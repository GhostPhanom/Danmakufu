let csd = GetCurrentScriptDirectory;

let bgm_track_1 = csd~"menu.ogg";
let bgm_track_2 = csd~"st1.ogg";
let bgm_track_3 = csd~"st1b.ogg";
let bgm_track_4 = csd~"st2.ogg";
let bgm_track_5 = csd~"st2b.ogg";

let e_shot = csd ~ "ef/ZUN/se_tan00.wav";
let e_shot_re = csd ~ "ef/ZUN/se_kira00.wav";
let e_shot_med = csd ~ "new/se_tan00.wav";
let e_shot_big = csd ~ "ef/se_tan00.wav";
let e_shot_lt = csd ~ "ef/se_tan00.wav";
let e_clear = csd ~ "ef/expl_07.wav";
let e_start = csd ~ "ef/e_spell3.wav";
let count1 = csd ~ "ef/scalarm.wav";
let count2 = csd ~ "ef/schargecountdown02.wav";
let p_fbomb = csd ~ "ef/expl_01.wav";
let p_ibomb = csd ~ "ef/expl_04.wav";
let p_hit = csd ~ "ef/expl_06.wav";
let p_shot = csd ~ "ef/p_shot7.wav";
let e_dmg1 = csd ~ "ef/dmg5.wav";
let e_dmg2 = csd ~ "ef/dmg5.wav";
let e_end = csd ~ "ef/expl_07.wav";
let p_lpart = csd ~ "ef/p_lpart.wav";
let p_life = csd ~ "ef/p_life.wav";
let e_expl = csd ~ "new/e_expl_new.wav";
let p_item1 = csd ~ "ef/p_shot5.wav";

let sndList =	[e_shot, e_shot_re, e_shot_med, e_shot_big, e_shot_lt, e_clear, e_start, count1,
				 count2, p_fbomb, p_ibomb, p_hit, p_shot, e_dmg1, e_dmg2, e_end,
				 p_lpart, p_life, e_expl, p_item1];
let sndObj =	[0, 0, 0, 0, 0, 0, 0, 0,
				 0, 0, 0, 0, 0, 0, 0, 0,
				 0, 0, 0, 0, 0, 0, 0, 0];

// Constants
let SND_e_shot = 0;
let SND_e_shot_re = 1;
let SND_e_shot_med = 2;
let SND_e_shot_big = 3;
let SND_e_shot_lt = 4;
let SND_e_clear = 5;
let SND_e_start = 6;
let SND_count1 = 7;
let SND_count2 = 8;
let SND_p_fbomb = 9;
let SND_p_ibomb = 10;
let SND_p_hit = 11;
let SND_p_shot = 12;
let SND_e_dmg1 = 13;
let SND_e_dmg2 = 14;
let SND_e_end = 15;
let SND_p_lpart = 16;
let SND_p_life = 17;
let SND_e_expl = 18;
let SND_p_item1 = 19;

let SFXVOL = 0.85;
//let SFXVOL = 1.0;
let MUSVOL = 1.0;

task LoadSE
{
	ascent(i in 0..length(sndList)) {
		let obj0 = ObjSound_Create;
		ObjSound_Load(obj0, sndList[i]);
		ObjSound_SetSoundDivision(obj0, SOUND_SE);
		sndObj[i] = obj0;
	}
}

let musList =	[bgm_track_1, bgm_track_2, bgm_track_3, bgm_track_4, bgm_track_5];
let musObj = [0, 0, 0, 0, 0, 0, 0, 0];
task TSetBGM
{
	ascent(i in 0..length(musList)) {
		let obj0 = ObjSound_Create;
		ObjSound_Load(obj0, musList[i]);
		ObjSound_SetSoundDivision(obj0, SOUND_SE);
		ObjSound_SetLoopEnable(obj0, true);
		musObj[i] = obj0;
	}
	//ObjSound_SetLoopTime(musObj[0], 5.02312, 10.05); // test
	//ObjSound_SetLoopTime(musObj[0], 12.275, 182.098); // Miko theme loop times
}

task TPlayBGM(delay, track)
{
	loop(delay){yield;}
	ObjSound_SetVolumeRate(musObj[track], 100*MUSVOL);
	ObjSound_Play(musObj[track]);
}
task TStopBGM(track)
{
	ObjSound_Stop(musObj[track]);
}
task TStopAllBGM
{
	let len = length(musObj);
	ascent(track in 0..len) {
		ObjSound_Stop(musObj[track]);
	}
}

task TFadeBGM(track, rate)
{
	//ObjSound_SetFade(musObj[track], rate);

	let fadeout = 100;
	let rate2 = 25/rate;
//	while(fadeout > 0)
	loop(rate)
	{
		ObjSound_SetVolumeRate(musObj[track], fadeout*MUSVOL);
		fadeout-=rate2;
		if(fadeout < 0) { fadeout = 0; }
		yield;
	}
	ObjSound_Stop(musObj[track]);
}

task PlaySnd(sound, volume)
{
	ObjSound_SetVolumeRate(sndObj[sound], volume*SFXVOL);
	ObjSound_Play(sndObj[sound]);
}

task PlaySndM(sound, volume)
{
	ObjSound_SetVolumeRate(sndObj[sound], volume);
	ObjSound_Play(sndObj[sound]);
}

task PlaySE_X(sound, delay)
{
	loop(delay) { yield; }
	PlaySE(sound);
}
