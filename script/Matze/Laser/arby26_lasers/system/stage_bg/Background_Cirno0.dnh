let bSpell = false;
let sideways_factor = -0.25;
let sideways_factor_persp = -0.25;
let half_frame = GetStgFrameWidth/2;
let current = GetCurrentScriptDirectory;

@Initialize
{
	SetCameraFocusX(0);
	SetCameraFocusY(0);
	SetCameraFocusZ(0);
	SetCameraRadius(900);
	SetCameraElevationAngle(20);
	SetCameraAzimuthAngle(90);

	TNormalBackground;
	TSpellBackground;
}
@MainLoop
{
	let objScene = GetEnemyBossSceneObjectID();
	if(objScene != ID_INVALID && ObjEnemyBossScene_GetInfo(objScene, INFO_IS_SPELL)){
		bSpell = true;
	}
	else{
		bSpell = false;
	}
	yield;
}

task TNormalBackground
{
	let img_mist = current ~ "img/arby_cirno_fx_add.png";
	let img_sky = current ~ "img/cirno_lake_sky.png";
	let img_water1 = current ~ "img/cirno_lake.png";
	let img_water2 = current ~ "img/cirno_lake2.png";
	let img_fog = current ~ "img/cirno_fog.png";
	let framex = GetStgFrameWidth;
	let framey = GetStgFrameHeight;

	let obj0 = ObjPrim_Create(OBJ_SPRITE_3D);
	ObjRender_SetBlendType(obj0, BLEND_ALPHA);
	Obj_SetRenderPriority(obj0, 0.2);
	ObjPrim_SetTexture(obj0, img_sky);
	let sky_vert_pivot = 0;
	ObjSprite3D_SetSourceRect(obj0, 0, 0, 1024, -512);
	ObjSprite3D_SetDestRect(obj0, -800, -400, 800, 400);
	ObjRender_SetPosition(obj0, 0, -50, -1024);
	ObjRender_SetScaleXYZ(obj0, 2, 2, 1);

	let obj1 = ObjPrim_Create(OBJ_SPRITE_3D);
	Obj_SetRenderPriority(obj1, 0.2);
	ObjPrim_SetTexture(obj1, img_water1);
	ObjSprite3D_SetSourceRect(obj1, 0, 0, 768, 768);
	ObjSprite3D_SetDestRect(obj1, -512, -512, 512, 512);
	ObjRender_SetScaleXYZ(obj1, 2, 2, 1);
	ObjRender_SetY(obj1, -50);

	let obj2 = ObjPrim_Create(OBJ_SPRITE_3D);
	Obj_SetRenderPriority(obj2, 0.2);
	ObjPrim_SetTexture(obj2, img_water2);
	ObjSprite3D_SetSourceRect(obj2, 0, 0, 768, 768);
	ObjSprite3D_SetDestRect(obj2, -512, -512, 512, 512);
	ObjRender_SetScaleXYZ(obj2, 2, 2, 1);
	ObjRender_SetY(obj2, -49);

	let obj3 = ObjPrim_Create(OBJ_SPRITE_3D);
	Obj_SetRenderPriority(obj3, 0.2);
	ObjPrim_SetTexture(obj3, img_fog);
	ObjSprite3D_SetSourceRect(obj3, 0, 1, 16, 16);
	ObjSprite3D_SetDestRect(obj3, -512, -512, 512, 512);
	ObjRender_SetScaleXYZ(obj3, 2.15, 2.15, 1);
	ObjRender_SetY(obj3, -48);

	ObjRender_SetColor(obj0, 255, 255, 255);
	ObjRender_SetColor(obj1, 50, 50, 150);
	ObjRender_SetColor(obj2, 50, 50, 150);
	ObjRender_SetAngleXYZ(obj0, 20, 180, 0);
	ObjRender_SetAngleXYZ(obj1, 90, 90, 90);
	ObjRender_SetAngleXYZ(obj2, 90, 90, 90);
	ObjRender_SetAngleXYZ(obj3, 90, 90, 90);

	let x = 0;
	let frameInvisible = 0;
	let recenter_rate = 3;
	let shift_x_move = 0;
	let player_x = GetPlayerX;
	let player_x_last = player_x;
	let lean = 0;

	TMist;
	TBgElement(obj0, true, 0,0);
	TBgElement(obj1, false, 0.5,-1);
	TBgElement(obj2, false, -0.5,-1);
	TBgElement(obj3, false, 0,0);
	loop{
		if(bSpell){
			frameInvisible++;
		}
		else{
			frameInvisible = 0;
		}

		if(GetPlayerState == STATE_DOWN){
			if(player_x > recenter_rate+half_frame){
				player_x -= recenter_rate;
			}
			else if(player_x < -recenter_rate+half_frame){
				player_x += recenter_rate;
			}
			else{
				player_x = half_frame;
			}
		}
		else{
			player_x = GetPlayerX;
		}
		shift_x_move = -(player_x - player_x_last)*sideways_factor_persp;
		player_x_last = player_x;
		lean = (player_x-half_frame)/48-(sin(x)*3);
		x = (x+0.75) %360;
		yield;
	}

	task TBgElement(obj, vert, u_slide, v_slide){
		TBgVisibility(obj);
		if(vert){TBgPosVert(obj);}
		else{TBgPosHori(obj);}
		if(u_slide!=0 || v_slide!=0){TBgUVSlide(obj, u_slide, v_slide);}

		task TBgVisibility(obj){
			loop{
				if(frameInvisible >= 60){
					Obj_SetVisible(obj, false);
				}
				else{
					Obj_SetVisible(obj, true);
				}
				yield;
			}
		}
		task TBgPosVert(obj){//For walls/skies
			loop{
				ObjRender_SetX(obj, ObjRender_GetX(obj)+shift_x_move);
				ObjRender_SetAngleZ(obj, lean);
				yield;
			}
		}
		task TBgPosHori(obj){//For floors/ground
			loop{
				ObjRender_SetX(obj, ObjRender_GetX(obj)+shift_x_move);
				ObjRender_SetAngleX(obj, 90+lean);
				yield;
			}
		}
		task TBgUVSlide(obj, u_slide, v_slide){
			let u=0;
			let v=0;
			let tilesize=256;
			loop{
				ObjSprite3D_SetSourceRect(obj, 0+u, 0+v, 768+u, 768+v);
				u = (u+u_slide)%tilesize;
				v = (v+v_slide)%tilesize;
				yield;
			}
		}
	}
	task TMist{
		let ys=0;
		loop{
			let sign = 2*(floor(rand(0,2))-0.5);
			TMistObj(rand(300,400)*sign,-50+32,rand(-900,500),rand(-2,-1)*sign,0, 120,120,120);
			ys+=20;
			loop(30){yield;}
		}
	}
	task TMistObj(x,y,z, vx,vy, t_start,t,t_end){
		let obj0 = ObjPrim_Create(OBJ_SPRITE_3D);
		ObjRender_SetBlendType(obj0, BLEND_ADD_RGB);
		Obj_SetRenderPriority(obj0, 0.21);
		ObjPrim_SetTexture(obj0, img_mist);
		let sky_vert_pivot = 0;
		ObjSprite3D_SetSourceRect(obj0, 32, 224, 63, 255);
		let horizon = 0;
		ObjSprite3D_SetDestRect(obj0, -256+x, 64+y+horizon, 256+x, -64+y+horizon);
		ObjRender_SetZ(obj0, z);
		ObjRender_SetAngleXYZ(obj0, 20, 180, 0);

		let a = 0;
		let a_d = 35/t_start;
		let sca_x = rand(2,3);
		let sca_y = rand(1,2);
		loop(t_start){
			SetMist;
			yield;
		}
		a_d=0;
		loop(t){
			SetMist;
			yield;
		}
		a_d=-35/t_end;
		loop(t_end){
			SetMist;
			yield;
		}
		Obj_Delete(obj0);

		sub SetMist{
			if(frameInvisible >= 60)
			{
				Obj_SetVisible(obj0, false);
			}
			else{
				Obj_SetVisible(obj0, true);
			}

			ObjRender_SetAngleZ(obj0, lean);
			ObjSprite3D_SetDestRect(obj0, -256+x+shift_x_move, 64+y+horizon, 256+x+shift_x_move, -64+y+horizon);
			ObjRender_SetScaleXYZ(obj0, sca_x, sca_y, 1);
			x+=vx;
			y+=vy;
			ObjRender_SetColor(obj0, a,a,a);
			a+=a_d;
		}
	}
}

task TSpellBackground
{
	let path1 = current ~ "img/cirno_spell_bg.png";
	let obj1 = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjRender_SetBlendType(obj1, BLEND_ALPHA);
	Obj_SetRenderPriority(obj1, 0.22);
	ObjPrim_SetTexture(obj1, path1);
	ObjSprite2D_SetDestRect(obj1, -64, -64, 512+64, 512+64);

	let u1 = 0;
	let v1 = 0;
	let alpha = 0;
	let frame = 0;
	let player_x = GetPlayerX;
	let player_x_last = player_x;
	let recenter_rate = 3;
	loop{
		if(bSpell){
			alpha += 4;
		}
		else{
			alpha = 0;
		}

		if(GetPlayerState == STATE_DOWN){
			if(player_x > recenter_rate+half_frame){
				player_x -= recenter_rate;
			}
			else if(player_x < -recenter_rate+half_frame){
				player_x += recenter_rate;
			}
			else{
				player_x = half_frame;
			}
		}
		else{
			player_x = GetPlayerX;
		}
		u1 = u1 -(player_x - player_x_last)*sideways_factor;
		player_x_last = player_x;

		v1 -= 1;
		if(v1 < 512){v1+=512;}

		ObjRender_SetAlpha(obj1, alpha);
		Obj_SetVisible(obj1, alpha > 0);
		ObjSprite2D_SetSourceRect(obj1, u1-64, v1-64, u1 + 512+64, v1 + 512+64);

		frame++;
		yield;
	}
}
