#include "../Generalfunction.dnh"

@Initialize
{
	MainTask;
}

@MainLoop
{
	yield;
}

let tower_start = 50;
let tower_winlevel = 150;
let wall_start = 20;
let ressource_start = 40;
let ressource_winlevel = 300;
let ressource_level_start = 3;

let setpath = GetModuleDirectory ~ "gamestate";
let getpath = GetModuleDirectory ~ "remote_gamestate";
let resetpath = GetModuleDirectory ~ "reset_remote_gamestate";

let player1 = CreatePlayer(1);
let player2 = CreatePlayer(2);
let old_cards = [];
let instance_hand = [];
let cardarray = [
101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134
//201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234
//301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334 
];
let deck = CreateDeck(1);

let own_player = -1;
let enemy_player = -1;

let currentplayer = 1;
let instanceplayer = 1; //Instance controlls Player1 or Player2
if(instanceplayer == 2)
{
	own_player = player2;
	enemy_player = player1;
}
else
{
	own_player = player1;
	enemy_player = player2;
}


CreateDataArea("GameState");
CreateDataArea("Remote_GameState");

task MainTask
{
	yield;
	AcroMage;
}

function AcroMage
{
	Create_StartConfig;
	Create_Graphics;
	CreateCover;
	CreatePlayedSlots;
	UpdateUI;
	loop(10)
	{
		GainRessource(player1);
		UpdateUI;
		EvaluateGameState;
		wait(30);
	}
	//RaiseError(deck);
}

let playedcardsx = 166;
let playedcardsy = 76;
let playedcardsgapx = 6;
let playedcardsgapy = 20;

let playercardsarray = [];

function UpdatePlayerSlots
{

}

function CreatePlayedSlots
{
	ascent(i in 1..4)
	{
		CreatePlayedSlot(playedcardsx + 96 * i + playedcardsgapx * i, playedcardsy);
	}
	ascent(i in 0..4)
	{
		CreatePlayedSlot(playedcardsx + 96 * i + playedcardsgapx * i, playedcardsy + 128 + playedcardsgapy);
	}

	function CreatePlayedSlot(x, y)
	{
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjSprite2D_SetSourceDestCenter(obj, GetCurrentScriptDirectory() ~ "card.png");
		Obj_SetRenderPriorityI(obj, 90);
		ObjRender_SetColor(obj, 200, 200, 200);
		ObjRender_SetAlpha(obj, 180);
		ObjRender_SetPosition(obj, x, y, 0);
		Obj_SetValue(obj, "card", -1);
		playercardsarray = playercardsarray ~ [obj];
	}
}

function CreateCover
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjSprite2D_SetSourceDestCenter(obj, GetCurrentScriptDirectory() ~ "card.png");
	Obj_SetRenderPriorityI(obj, 90);
	ObjRender_SetPosition(obj, playedcardsx, playedcardsy, 0);
}

function CreateDeck(number)
{
	let deck = [];
	loop(number)
	{
		deck = deck ~ ShuffleArray(cardarray);
	}
	return deck;
}

function GainRessource(target)
{
	Obj_SetValue(target, "stone", Obj_GetValue(target, "stone") + Obj_GetValue(target, "stone_level"));
	Obj_SetValue(target, "gem", Obj_GetValue(target, "gem") + Obj_GetValue(target, "gem_level"));
	Obj_SetValue(target, "monster", Obj_GetValue(target, "monster") + Obj_GetValue(target, "monster_level"));
}

function UpdateUI
{
	ObjText_SetText(GetAreaCommonData("AcroMage", "player1_stone_counter", -1), itoa(Obj_GetValue(player1, "stone")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player1_gem_counter", -1), itoa(Obj_GetValue(player1, "gem")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player1_monster_counter", -1), itoa(Obj_GetValue(player1, "monster")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player1_stone_level", -1), itoa(Obj_GetValue(player1, "stone_level")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player1_gem_level", -1), itoa(Obj_GetValue(player1, "gem_level")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player1_monster_level", -1), itoa(Obj_GetValue(player1, "monster_level")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player1_tower", -1), itoa(Obj_GetValue(player1, "tower")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player1_wall", -1), itoa(Obj_GetValue(player1, "wall")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player2_stone_counter", -1), itoa(Obj_GetValue(player2, "stone")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player2_gem_counter", -1), itoa(Obj_GetValue(player2, "gem")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player2_monster_counter", -1), itoa(Obj_GetValue(player2, "monster")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player2_stone_level", -1), itoa(Obj_GetValue(player2, "stone_level")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player2_gem_level", -1), itoa(Obj_GetValue(player2, "gem_level")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player2_monster_level", -1), itoa(Obj_GetValue(player2, "monster_level")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player2_tower", -1), itoa(Obj_GetValue(player2, "tower")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player2_wall", -1), itoa(Obj_GetValue(player2, "wall")));
}

//Cards 100+ for stone, 200+ for gems, 300+ for monster
function Create_Graphics
{
	CreateCommonDataArea("AcroMage");
	CreateUserUI(0, 0, "stone", 1);
	CreateUserUI(0, 96, "gem", 1);
	CreateUserUI(0, 96 + 96, "monster", 1);
	CreateUserUI(540, 0, "stone", 2);
	CreateUserUI(540, 96, "gem", 2);
	CreateUserUI(540, 96 + 96, "monster", 2);
	CreateTowerUI(150, 260, "tower", 1);
	CreateTowerUI(200, 260, "wall", 1);
	CreateTowerUI(640 - 150, 260, "tower", 2);
	CreateTowerUI(640 - 200, 260, "wall", 2);

	task CreateTowerUI(x, y, type, player)
	{
		/*
		let path = "";
		if(type == "stone"){path = GetCurrentScriptDirectory() ~ "stone.png";}
		if(type == "gem"){path = GetCurrentScriptDirectory() ~ "gem.png";}
		if(type == "monster"){path = GetCurrentScriptDirectory() ~ "monster.png";}

		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(obj, path);
		ObjSprite2D_SetSourceRect(obj, 0, 0, 96, 96);
		ObjSprite2D_SetDestRect(obj, x, y, x + 96, y + 96);
		Obj_SetRenderPriorityI(obj, 86);
		SetAreaCommonData("AcroMage", "player" ~ itoa(player) ~ "_" ~ type ~ "_graphic", obj);
		*/
		let obj = ObjText_Create;
		ObjText_SetText(obj, type);
		ObjText_SetFontSize(obj, 12);
		Obj_SetRenderPriorityI(obj, 86);
		ObjRender_SetPosition(obj, x, y, 0);
		SetAreaCommonData("AcroMage", "player" ~ itoa(player) ~ "_" ~ type, obj);
	}

	task CreateUserUI(x, y, type, player)
	{
		let path = "";
		if(type == "stone"){path = GetCurrentScriptDirectory() ~ "stone.png";}
		if(type == "gem"){path = GetCurrentScriptDirectory() ~ "gem.png";}
		if(type == "monster"){path = GetCurrentScriptDirectory() ~ "monster.png";}

		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(obj, path);
		ObjSprite2D_SetSourceRect(obj, 0, 0, 96, 96);
		ObjSprite2D_SetDestRect(obj, x, y, x + 96, y + 96);
		Obj_SetRenderPriorityI(obj, 86);
		SetAreaCommonData("AcroMage", "player" ~ itoa(player) ~ "_" ~ type ~ "_graphic", obj);

		obj = ObjText_Create;
		ObjText_SetText(obj, type ~ itoa(player));
		ObjText_SetFontSize(obj, 12);
		Obj_SetRenderPriorityI(obj, 86);
		ObjRender_SetPosition(obj, x + 4, y + 70, 0);
		SetAreaCommonData("AcroMage", "player" ~ itoa(player) ~ "_" ~ type ~ "_counter", obj);

		obj = ObjText_Create;
		ObjText_SetText(obj, type ~ itoa(player));
		ObjText_SetFontSize(obj, 20);
		Obj_SetRenderPriorityI(obj, 86);
		ObjRender_SetPosition(obj, x + 4, y + 20, 0);
		SetAreaCommonData("AcroMage", "player" ~ itoa(player) ~ "_" ~ type ~ "_level", obj);

		obj = ObjText_Create;
		ObjText_SetText(obj, type);
		ObjText_SetFontSize(obj, 12);
		Obj_SetRenderPriorityI(obj, 86);
		ObjRender_SetPosition(obj, x + 50, y + 70, 0);
		SetAreaCommonData("AcroMage", "player" ~ itoa(player) ~ "_" ~ type ~ "_type", obj);
	}
}

function DoRessourceChange(target, stone, gem, monster, stone_level, gem_level, monster_level)
{
	Obj_SetValue(target, "stone", max(0, Obj_GetValue(target, "stone") + stone));
	Obj_SetValue(target, "gem", max(0, Obj_GetValue(target, "gem") + gem));
	Obj_SetValue(target, "monster", max(0, Obj_GetValue(target, "monster") + monster));
	Obj_SetValue(target, "stone_level", max(1, Obj_GetValue(target, "stone_level") + stone_level));
	Obj_SetValue(target, "gem_level", max(1, Obj_GetValue(target, "gem_level") + gem_level));
	Obj_SetValue(target, "monster_level", max(1, Obj_GetValue(target, "monster_level") + monster_level));
}

function DoBuild(target, wall, tower)
{
	Obj_SetValue(target, "wall", Obj_GetValue(target, "wall") + wall);
	Obj_SetValue(target, "tower", Obj_GetValue(target, "tower") + wall);
}


function DoDamage(target, generaldamage, walldamage, towerdamage)
{
	let tower_hp = Obj_GetValue(target, "tower");
	let wall_hp = Obj_GetValue(target, "wall");
	if(generaldamage != 0)
	{
		if(generaldamage > wall_hp)
		{
			generaldamage -= wall_hp;
			wall_hp = 0;
			tower_hp = max(0, tower_hp - generaldamage);
		}
		else
		{
			wall_hp -= generaldamage;
		}
	}
	else
	{
		wall_hp = max(0, wall_hp - walldamage);
		tower_hp = max(0, tower_hp - towerdamage);
	}
	Obj_SetValue(target, "tower", tower_hp);
	Obj_SetValue(target, "wall", wall_hp);
}

function WriteOwnGameState()
{
	let name = "GameState";
	//SetAreaCommonData(name, "gametick", 0); //GameState is always updates 
	SetAreaCommonData(name, "active_player", 1); //who is the current player 
	SetAreaCommonData(name, "old_cards_played", [-1]); //What was the last played Card
	SetAreaCommonData(name, "cards_played", [-1]); //What was the last played Card
	SetAreaCommonData(name, "player1_confirm", 0); //Is a confirmation needed?
	SetAreaCommonData(name, "player2_confirm", 0); //Is a confirmation needed?
	
	//ONLY FOR DESYNC CHECK
	SetAreaCommonData(name, "player1_tower", Obj_GetValue(player1, "tower"));
	SetAreaCommonData(name, "player1_wall", Obj_GetValue(player1, "wall"));
	SetAreaCommonData(name, "player1_stone", Obj_GetValue(player1, "stone"));
	SetAreaCommonData(name, "player1_gem", Obj_GetValue(player1, "gem"));
	SetAreaCommonData(name, "player1_monster", Obj_GetValue(player1, "monster"));
	SetAreaCommonData(name, "player1_stone_level", Obj_GetValue(player1, "stone_level"));
	SetAreaCommonData(name, "player1_gem_level", Obj_GetValue(player1, "gem_level"));
	SetAreaCommonData(name, "player1_monster_level", Obj_GetValue(player1, "monster_level"));
	
	SetAreaCommonData(name, "player2_tower", Obj_GetValue(player2, "tower"));
	SetAreaCommonData(name, "player2_wall", Obj_GetValue(player2, "wall"));
	SetAreaCommonData(name, "player2_stone", Obj_GetValue(player2, "stone"));
	SetAreaCommonData(name, "player2_gem", Obj_GetValue(player2, "gem"));
	SetAreaCommonData(name, "player2_monster", Obj_GetValue(player2, "monster"));
	SetAreaCommonData(name, "player2_stone_level", Obj_GetValue(player2, "stone_level"));
	SetAreaCommonData(name, "player2_gem_level", Obj_GetValue(player2, "gem_level"));
	SetAreaCommonData(name, "player2_monster_level", Obj_GetValue(player2, "monster_level"));
}

function Create_StartConfig
{
	let filetest = ObjFile_Create(OBJ_FILE_BINARY);
	ObjFile_Open(filetest, resetpath);
	if(ObjFile_GetSize(filetest) == 0)
	{
		WriteLog("Existing Reset ConfigFile found (What?)! Overriding!");
	}
	else
	{
		WriteLog("No Reset ConfigFile found! Creating Reset StartConfig!");
	}
	CreateDataArea("Reset_Remote_GameState");
	let saved = SaveCommonDataAreaA2("Reset_Remote_GameState", setpath);
	if(saved == false){RaiseError("COULD NOT SAVE RESET START GAMESTATE TO FILE!!! THAT SHOULD NOT BE THE CASE!");}
	ClearAreaCommonData("Remote_GameState");
	
	return true;
}
function Update_Remote_GameState
{
	let resultc = FileTest(getpath);
	while(resultc == 1)//Check if Remote_ConfigFile wrongfully does not exist
	{
		FileTest(getpath); // 0 File exist; 1 File does not exist
		WriteLog("Remote ConfigFile not found! Retry!");
		loop(30){yield;}
	}
	
	resultc = FileTest(setpath);
	while(resultc == 0)//Check if Own_ConfigFile does wrongfully exist
	{
		FileTest(setpath); // 0 File exist; 1 File does not exist
		WriteLog("Own ConfigFile found! Retry! Maybe the Script is not running");
		loop(30){yield;}
	}
	
	ClearAreaCommonData("Remote_GameState");
	CopyCommonDataArea("Remote_GameState", "GameState");
	let saved = SaveCommonDataAreaA2("Remote_GameState", setpath);
	if(saved == false){RaiseError("COULD NOT SAVE OWN GAMESTATE TO FILE!!! THAT SHOULD NOT BE THE CASE!");}
	
	return true;
	
	function FileTest(path)
	{
		let filetest = ObjFile_Create(OBJ_FILE_BINARY);
		ObjFile_Open(filetest, path);
		if(ObjFile_GetSize(filetest) == 0)
		{
			Obj_Delete(filetest);
			return 0;
		}
		else
		{
			Obj_Delete(filetest);
			return 1;
		}
	}
}

function Update_WaitforSync
{
	ClearAreaCommonData("Remote_GameState");
	let tick = GetAreaCommonData("GameState", "gametick", -1);
	while(tick <= GetAreaCommonData("Remote_GameState", "gametick", 0))
	{
		let resultc = LoadCommonDataAreaA2("Remote_GameState", getpath);
		while(resultc == false)
		{
			resultc = LoadCommonDataAreaA2("Remote_GameState", getpath);
			WriteLog("Could not Read Remote_GameState! Retry!");
			loop(30){yield;}
		}
		loop(30){yield;}
		WriteLog("Waiting for higher gametick... Tick: " ~ itoa(tick));
	}
	WriteLog("Higher gametick detected! Advancing! Tick: " ~ itoa(GetAreaCommonData("Remote_GameState", "gametick", 0)));
	return true;
}

function CreateDataArea(name)
{
	CreateCommonDataArea(name);
	SetAreaCommonData(name, "gametick", 0); //Each synchronized action increases the gametick
	SetAreaCommonData(name, "active_player", 1); //who is the current player 
	SetAreaCommonData(name, "old_cards_played", [-1]); //What was the last played Card
	SetAreaCommonData(name, "cards_played", [-1]); //What was the last played Card
	SetAreaCommonData(name, "player1_confirm", 0); //Is a confirmation needed?
	SetAreaCommonData(name, "player2_confirm", 0); //Is a confirmation needed?
	
	//ONLY FOR DESYNC CHECK
	SetAreaCommonData(name, "player1_tower", Obj_GetValue(player1, "tower"));
	SetAreaCommonData(name, "player1_wall", Obj_GetValue(player1, "wall"));
	SetAreaCommonData(name, "player1_stone", Obj_GetValue(player1, "stone"));
	SetAreaCommonData(name, "player1_gem", Obj_GetValue(player1, "gem"));
	SetAreaCommonData(name, "player1_monster", Obj_GetValue(player1, "monster"));
	SetAreaCommonData(name, "player1_stone_level", Obj_GetValue(player1, "stone_level"));
	SetAreaCommonData(name, "player1_gem_level", Obj_GetValue(player1, "gem_level"));
	SetAreaCommonData(name, "player1_monster_level", Obj_GetValue(player1, "monster_level"));
	
	SetAreaCommonData(name, "player2_tower", Obj_GetValue(player2, "tower"));
	SetAreaCommonData(name, "player2_wall", Obj_GetValue(player2, "wall"));
	SetAreaCommonData(name, "player2_stone", Obj_GetValue(player2, "stone"));
	SetAreaCommonData(name, "player2_gem", Obj_GetValue(player2, "gem"));
	SetAreaCommonData(name, "player2_monster", Obj_GetValue(player2, "monster"));
	SetAreaCommonData(name, "player2_stone_level", Obj_GetValue(player2, "stone_level"));
	SetAreaCommonData(name, "player2_gem_level", Obj_GetValue(player2, "gem_level"));
	SetAreaCommonData(name, "player2_monster_level", Obj_GetValue(player2, "monster_level"));
}

function CreatePlayer(number)
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	
	Obj_SetValue(obj, "player_number", number);
	Obj_SetValue(obj, "tower", tower_start);
	Obj_SetValue(obj, "wall", wall_start);
	Obj_SetValue(obj, "stone", ressource_start);
	Obj_SetValue(obj, "gem", ressource_start);
	Obj_SetValue(obj, "monster", ressource_start);
	Obj_SetValue(obj, "stone_level", ressource_level_start);
	Obj_SetValue(obj, "gem_level", ressource_level_start);
	Obj_SetValue(obj, "monster_level", ressource_level_start);
	
	return obj;
}

function EvaluateGameState
{
	let player1_state = 0;
	let player2_state = 0;
	
	player1_state = CheckPlayer(player1);
	player2_state = CheckPlayer(player2);
	
	function CheckPlayer(player)
	{
		if(Obj_GetValue(player, "tower") <= 0){return -1;}
		else if(Obj_GetValue(player, "tower") >= tower_winlevel){return 1;}
		else if(Obj_GetValue(player, "stone") >= ressource_winlevel){return 1;}
		else if(Obj_GetValue(player, "gem") >= ressource_winlevel){return 1;}
		else if(Obj_GetValue(player, "monster") >= ressource_winlevel){return 1;}
		else{return 0;}
	}
	
	if(player1_state == -1 && player2_state == -1){yield; RaiseError("DRAW! Both Towers down!");}
	else if(player1_state == 1 && player2_state == 1){yield; RaiseError("DRAW! Both Players win!");}
	else if(player1_state == 1){yield; RaiseError("Player1 wins!");}
	else if(player2_state == 1){yield; RaiseError("Player2 wins!");}
}

//function DoRessourceChange(target, stone, gem, monster, stone_level, gem_level, monster_level)
//function DoBuild(target, wall, tower)
//function DoDamage(target, generaldamage, walldamage, towerdamage)

function Process_Card(number, user, target, reason)
{
	//reason 0 check for playability; 1 check if allowed to discard; 2 Card is used.
	//retrun 0 it is allowed; return 1 it is NOT allowed
	//DoRessourceChange(user, 0, 0, 0, 0, 0, 0);
	alternative(number)
	/////////////STONE CARDS//////////////
	case(101){
		if(reason == 1){return 0;}
		if(reason == 0){return 0;}
		DoRessourceChange(user, -8, 0, 0, 0, 0, 0);
		DoRessourceChange(target, -8, 0, 0, 0, 0, 0);
	}
	case(102){
		if(reason == 1){return 0;}
		if(reason == 0){return 0;}
		DoRessourceChange(user, 2, 2, 0, 0, 0, 0);
		//PLAY AGAIN
	}
	case(103){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 1){return 0;}else if(reason == 0){return 1;}
		DoBuild(user, 1, 0);
		DoRessourceChange(user, -1, 0, 0, 0, 0, 0);
		//PLAY AGAIN
	}
	case(104){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 3){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -3, 0, 0, 1, 0, 0);
	}
	case(105){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 4){return 0;}else if(reason == 0){return 1;}
		if(Obj_GetValue(user, "stone_level") < Obj_GetValue(target, "stone_level")){DoRessourceChange(user, 4, 0, 0, 2, 0, 0);}
		else{DoRessourceChange(user, -4, 0, 0, 1, 0, 0);}
	}
	case(106){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 7){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -7, 0, 0, 1, 0, 0);
		DoBuild(user, 4, 0);
	}
	case(107){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 2){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -2, -6, 0, 0, 0, 0);
		DoBuild(user, 5, 0);
	}
	case(108){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 5 && Obj_GetValue(user, "stone_level") < Obj_GetValue(target, "stone_level")){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -5, 0, 0, 0, 0, 0);
		Obj_SetValue(user, "stone_level", Obj_GetValue(target, "stone_level"));
	}
	case(109){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 2){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -2, 0, 0, 0, 0, 0);
		DoBuild(user, 3, 0);
	}
	case(110){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 3){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -3, 0, 0, 0, 0, 0);
		DoBuild(user, 4, 0);
	}
	case(111){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 2){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -2, 4, 0, 1, 0, 0);
		DoRessourceChange(user, 0, 0, 0, 1, 0, 0);
	}
	case(112){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 3){return 0;}else if(reason == 0){return 1;}
		if(Obj_GetValue(user, "wall") == 0){DoBuild(user, 6, 0);}
		else{DoBuild(user, 3, 0);}
		DoRessourceChange(user, -3, 0, 0, 0, 0, 0);
	}
	case(113){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 7){if(Obj_GetValue(user, "wall") > 0 || Obj_GetValue(target, "wall") > 0){return 0;}else{return 1;}}else if(reason == 0){return 1;}
		DoRessourceChange(user, -7, 0, 0, 0, 0, 0);
		DoDamage(user, 0, 5, 0);
		DoDamage(target, 0, 5, 0);
	}
	case(114){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 8){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -8, 0, 0, 0, 1, 0);
	}
	case(115){
		if(reason == 1){return 0;}
		if(reason == 0){if(Obj_GetValue(user, "stone_level") > 1 || Obj_GetValue(target, "stone_level") > 1){return 0;}else{return 1;}}
		DoRessourceChange(user, 0, 0, 0, -1, 0, 0);
		DoRessourceChange(target, 0, 0, 0, -1, 0, 0);
	}
	case(116){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 5){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -5, 0, 0, 0, 0, 0);
		DoBuild(user, 6, 0);
	}
	case(117){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 4 && Obj_GetValue(target, "stone_level") > 1){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -4, 0, 0, 0, 0, 0);
		DoRessourceChange(target, 0, 0, 0, -1, 0, 0);
	}
	case(118){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 6){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -6, 0, 0, 2, 0, 0);
	}
	case(119){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone_level") > 1){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 5, 0, -1, 0, 0);
		DoBuild(user, 10, 0);
	}
	case(120){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 8){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -8, 0, 0, 0, 0, 0);
		DoBuild(user, 8, 0);
	}
	case(121){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 9){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -9, 0, 0, 0, 0, 1);
		DoBuild(user, 5, 0);
	}
	case(122){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 9){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -9, 7, 0, 0, 0, 0);
		DoBuild(user, 7, 0);
	}
	case(123){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 11){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -11, 0, 0, 0, 0, 0);
		DoBuild(user, 3, 0);
	}
	case(124){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 13){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -13, 0, 0, 0, 0, 0);
		DoBuild(user, 12, 0);
	}
	case(125){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 15){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -15, 0, 0, 0, 0, 0);
		DoBuild(user, 8, 5);
	}
	case(126){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 16){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -16, 0, 0, 0, 0, 0);
		DoBuild(user, 15, 0);
	}
	case(127){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 18){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -18, 0, 0, 0, 0, 0);
		DoBuild(user, 6, 0);
		DoDamage(target, 10, 0, 0);
	}
	case(128){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 24){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -24, 0, 0, 0, 0, 0);
		DoBuild(user, 20, 8);
	}
	case(129){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 7){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -7, 0, -5, 0, 0, 0);
		DoBuild(user, 9, 0);
	}
	case(130){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 1){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -1, 0, 2, 0, 0, 0);
		DoBuild(user, 1, 1);
	}
	case(131){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 6 && Obj_GetValue(user, "wall") != Obj_GetValue(target, "wall")){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -6, 0, 0, 0, 0, 0);
		if(Obj_GetValue(user, "wall") < Obj_GetValue(target, "wall"))
		{
			DoRessourceChange(user, 0, 0, 0, 0, 0, -1);
			DoDamage(user, 0, 0, 2);
		}
		else
		{
			DoRessourceChange(target, 0, 0, 0, 0, 0, -1);
			DoDamage(target, 0, 0, 2);
		}
	}
	case(132){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 10){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -10, 0, 6, 0, 0, 0);
		if(Obj_GetValue(user, "monster_level") < Obj_GetValue(target, "monster_level")){DoRessourceChange(user, 0, 0, 0, 0, 0, 1);}
		DoBuild(user, 6, 0);
	}
	case(133){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 14){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -14, 0, 0, 0, 0, 0);
		DoBuild(user, 7, 0);
		DoDamage(target, 6, 0, 0);
	}
	case(134){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "stone") >= 17 && Obj_GetValue(user, "wall") != Obj_GetValue(target, "wall")){return 0;}else if(reason == 0){return 1;}
		let userwall = Obj_GetValue(user, "wall");
		Obj_SetValue(user, "wall", Obj_GetValue(target, "wall"));
		Obj_SetValue(target, "wall", userwall);
	}
	//////////////GEM CARDS//////////////////
	case(201){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 1){return 0;}else if(reason == 0){return 1;}
	}
	case(202){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 2){return 0;}else if(reason == 0){return 1;}
	}
	case(203){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 2){return 0;}else if(reason == 0){return 1;}
	}
	case(204){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 3){return 0;}else if(reason == 0){return 1;}
	}
	case(205){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 2){return 0;}else if(reason == 0){return 1;}
	}
	case(206){
		if(reason == 1){return 1;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 5){return 0;}else if(reason == 0){return 1;}
	}
	case(207){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 4){return 0;}else if(reason == 0){return 1;}
	}
	case(208){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 6){return 0;}else if(reason == 0){return 1;}
	}
	case(209){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 2){return 0;}else if(reason == 0){return 1;}
	}
	case(210){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 3){return 0;}else if(reason == 0){return 1;}
	}
	case(211){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 4){return 0;}else if(reason == 0){return 1;}
	}
	case(212){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 3){return 0;}else if(reason == 0){return 1;}
	}
	case(213){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 7){return 0;}else if(reason == 0){return 1;}
	}
	case(214){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 7 && Obj_GetValue(user, "gem_level") != Obj_GetValue(target, "gem_level")){return 0;}else if(reason == 0){return 1;}
	}
	case(215){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 6){return 0;}else if(reason == 0){return 1;}
	}
	case(216){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 9){return 0;}else if(reason == 0){return 1;}
	}
	case(217){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 8 && Obj_GetValue(user, "gem_level") > 1){return 0;}else if(reason == 0){return 1;}
	}
	case(218){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 7){return 0;}else if(reason == 0){return 1;}
	}
	case(219){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 10){return 0;}else if(reason == 0){return 1;}
	}
	case(220){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 5){return 0;}else if(reason == 0){return 1;}
	}
	case(221){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 13){return 0;}else if(reason == 0){return 1;}
	}
	case(222){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 4){return 0;}else if(reason == 0){return 1;}
	}
	case(223){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 12){return 0;}else if(reason == 0){return 1;}
	}
	case(224){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 14){return 0;}else if(reason == 0){return 1;}
	}
	case(225){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 16){return 0;}else if(reason == 0){return 1;}
	}
	case(226){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 15){return 0;}else if(reason == 0){return 1;}
	}
	case(227){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 17){return 0;}else if(reason == 0){return 1;}
	}
	case(228){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 21){return 0;}else if(reason == 0){return 1;}
	}
	case(229){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 8){return 0;}else if(reason == 0){return 1;}
	}
	case(230){
		if(reason == 1){return 0;}
		if(reason == 0){return 0;}
	}
	case(231){
		if(reason == 1){return 0;}
		if(reason == 0){return 0;}
	}
	case(232){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 5){return 0;}else if(reason == 0){return 1;}
	}
	case(233){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 11){return 0;}else if(reason == 0){return 1;}
	}
	case(234){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "gem") >= 18){return 0;}else if(reason == 0){return 1;}
	}
	/////////////MONSTER CARDS/////////////
	case(301){
		if(reason == 1){return 0;}
		if(reason == 0){if(Obj_GetValue(user, "monster") > 0 || Obj_GetValue(target, "monster") > 0){return 0;}else{return 1;}}else if(reason == 0){return 1;}
	}
	case(302){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 1){return 0;}else if(reason == 0){return 1;}
	}
	case(303){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 1){return 0;}else if(reason == 0){return 1;}
	}
	case(304){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 3){return 0;}else if(reason == 0){return 1;}
	}
	case(305){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 2){return 0;}else if(reason == 0){return 1;}
	}
	case(306){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 3){return 0;}else if(reason == 0){return 1;}
	}
	case(307){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 4){return 0;}else if(reason == 0){return 1;}
	}
	case(308){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 6){return 0;}else if(reason == 0){return 1;}
	}
	case(309){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 3){return 0;}else if(reason == 0){return 1;}
	}
	case(310){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 5){return 0;}else if(reason == 0){return 1;}
	}
	case(311){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 6){return 0;}else if(reason == 0){return 1;}
	}
	case(312){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 7){return 0;}else if(reason == 0){return 1;}
	}
	case(313){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 8){return 0;}else if(reason == 0){return 1;}
	}
	case(314){
		if(reason == 1){return 0;}
		if(reason == 0){return 0;}
	}
	case(315){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 5){return 0;}else if(reason == 0){return 1;}
	}
	case(316){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 6){return 0;}else if(reason == 0){return 1;}
	}
	case(317){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 6){return 0;}else if(reason == 0){return 1;}
	}
	case(318){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 5){return 0;}else if(reason == 0){return 1;}
	}
	case(319){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 8){return 0;}else if(reason == 0){return 1;}
	}
	case(320){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 9){return 0;}else if(reason == 0){return 1;}
	}
	case(321){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 11){return 0;}else if(reason == 0){return 1;}
	}
	case(322){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 9){return 0;}else if(reason == 0){return 1;}
	}
	case(323){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 10){return 0;}else if(reason == 0){return 1;}
	}
	case(324){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 14){return 0;}else if(reason == 0){return 1;}
	}
	case(325){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 11){return 0;}else if(reason == 0){return 1;}
	}
	case(326){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 7){if(Obj_GetValue(target, "gem") > 0 || Obj_GetValue(target, "stone") > 0){return 0;}else{return 1;}}else if(reason == 0){return 1;}
	}
	case(327){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 15){return 0;}else if(reason == 0){return 1;}
	}
	case(328){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 17){return 0;}else if(reason == 0){return 1;}
	}
	case(329){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 25){return 0;}else if(reason == 0){return 1;}
	}
	case(330){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 2){return 0;}else if(reason == 0){return 1;}
	}
	case(331){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 2){return 0;}else if(reason == 0){return 1;}
	}
	case(332){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 4){return 0;}else if(reason == 0){return 1;}
	}
	case(333){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 13){return 0;}else if(reason == 0){return 1;}
	}
	case(334){
		if(reason == 1){return 0;}
		if(reason == 0 && Obj_GetValue(user, "monster") >= 18){return 0;}else if(reason == 0){return 1;}
	}

	RaiseError("PROCESS CARD DID NOT RETURN! CARDNUMBER: " ~ itoa(number) ~ " User: " ~ itoa(user) ~ " Target: " ~ itoa(target) ~ " Reason: " ~ itoa(reason));
}
