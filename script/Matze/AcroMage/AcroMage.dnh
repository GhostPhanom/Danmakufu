#include "../Generalfunction.dnh"

@Initialize
{
	MainTask;
}

@MainLoop
{
	yield;
}

let tower_start = 50;
let tower_winlevel = 150;
let wall_start = 0;
let ressource_start = 10;
let ressource_winlevel = 300;
let ressource_level_start = 3;

let setpath = GetModuleDirectory ~ "gamestate";
let getpath = GetModuleDirectory ~ "remote_gamestate";
let resetpath = GetModuleDirectory ~ "reset_remote_gamestate";

let old_cards = [];
let instance_hand = [];
let cardarray = [
//101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,201,202,205,206,206,206,206,206,206,206,206,206,302,305,308
101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,
201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334 
];
//let deck = CreateDeck(1);

let player1 = CreatePlayer(1);
let player2 = CreatePlayer(2);

let own_player = -1;
let enemy_player = -1;

let currentplayer = player1;
let notcurrentplayer = player2;
let instanceplayer = player1; //Instance controlls Player1 or Player2
if(instanceplayer == 2)
{
	own_player = player2;
	enemy_player = player1;
}
else
{
	own_player = player1;
	enemy_player = player2;
}


CreateDataArea("GameState");
CreateDataArea("Remote_GameState");

task MainTask
{
	yield;
	AcroMage;
}

//MoveDeckToHand(DrawCards(1)[0]);

//MoveHandToCurrentPlayed(slot); //0 indexed

//MoveCurrentPlayedToPlayed

//MoveHandToPlayed(slot)

//MovePlayedToDeck

//return 0 it is allowed; return 1 it is NOT allowed; return 2 another turn; return 3 discard additional card
function AcroMage
{
	LoadCardGraphics;
	TestDebug;
	CreateGraphicElements;

	PlayerTurn;

	/*
	while(true)
	{
		GainRessource(currentplayer);
		RearangeHandCards;//TO ACCOUNT FOR CHANGES
		UpdateUI;
		EvaluateGameState;
		MoveDeckToHand(DrawCards(1)[0]);
		let selectresult = CardSelector(0);//returns [index, action] action 0 == discard; action 1 == usage
		MovePlayedToDeck;
		if(selectresult[1] == 0)
		{
			MoveHandToPlayed(selectresult[0]);
		}
		else if(selectresult[1] == 1)
		{
			MoveHandToCurrentPlayed(selectresult[0]);
			let specialcase = Process_Card(Obj_GetValue(currentplayedcard, "card"), currentplayer, notcurrentplayer, 1);
			UpdateUI;
			if(specialcase == 3)//DROP CARD
			{
				RearangeHandCards;//TO ACCOUNT FOR CHANGES
				EnableDiscardText(true);
				MoveDeckToHand(DrawCards(1)[0]);
				MoveCurrentPlayedToPlayed;
				MoveHandToPlayed(CardSelector(1)[0]);
				EnableDiscardText(false);
			}
			else//EVERY OTHER CARD
			{
				RearangeHandCards;//TO ACCOUNT FOR CHANGES
				wait(45);
				MoveCurrentPlayedToPlayed;
			}
			if(specialcase != 0){AnotherTurn;}
		}
		EvaluateGameState;
		//WHEN CODE HERE THE PLAYER SWITCHES
	}
	*/
}

function LoadCardGraphics
{
	LoadTexturesInPath(GetCurrentScriptDirectory() ~ "red/");
	LoadTexturesInPath(GetCurrentScriptDirectory() ~ "blue/");
	LoadTexturesInPath(GetCurrentScriptDirectory() ~ "green/");
	LoadTexturesInPath(GetCurrentScriptDirectory());
}

function AISelector(mode) //returns [index, action] action 0 == discard; action 1 == usage
{
	//mode 0 default
	//mode 1 only discard

	let turnarray = [0, 1, 2, 3, 4, 5];
	turnarray = ShuffleArray(turnarray);

	if(mode == 0)
	{
		ascent(i in 0..6)
		{
			if(Process_Card(Obj_GetValue(currentplayer, "hand")[turnarray[i]], currentplayer, notcurrentplayer, 0) == 0)//card is playable
			{
				return [turnarray[i], 1];
			}
		}
	}
	
	ascent(i in 0..6)
	{
		if(IsCardDiscardable(Obj_GetValue(currentplayer, "hand")[turnarray[i]]) == true)//card is trowable
		{
			return [turnarray[i], 0];
		}
	}

	RaiseError("AI DID NOT FIND A PLAYABLE MOVE!");
}

function AITurn
{
	GainRessource(currentplayer);
	RearangeHandCards;//TO ACCOUNT FOR CHANGES
	UpdateUI;
	MoveDeckToHand(DrawCards(1)[0]);
	let selectresult = AISelector(0);//returns [index, action] action 0 == discard; action 1 == usage
	MovePlayedToDeck;
	if(selectresult[1] == 0)
	{
		MoveHandToPlayed(selectresult[0]);
	}
	else if(selectresult[1] == 1)
	{
		MoveHandToCurrentPlayed(selectresult[0]);
		let specialcase = Process_Card(Obj_GetValue(currentplayedcard, "card"), currentplayer, notcurrentplayer, 1);
		UpdateUI;
		if(specialcase == 3)//DROP CARD
		{
			RearangeHandCards;//TO ACCOUNT FOR CHANGES
			EnableDiscardText(true);
			MoveDeckToHand(DrawCards(1)[0]);
			MoveCurrentPlayedToPlayed;
			MoveHandToPlayed(AISelector(1)[0]);
			EnableDiscardText(false);
			yield;
		}
		else//EVERY OTHER CARD
		{
			RearangeHandCards;//TO ACCOUNT FOR CHANGES
			wait(45);
			MoveCurrentPlayedToPlayed;
			yield;
		}
		if(specialcase != 0){AIAnotherTurn;}
	}
	EvaluateGameState;
	//WHEN CODE HERE THE PLAYER SWITCHES
	SwitchCurrentPlayer;
	PlayerTurn;
}

function AIAnotherTurn
{
	MoveDeckToHand(DrawCards(1)[0]);
	let selectresult = AISelector(0);
	//MovePlayedToDeck;
	if(selectresult[1] == 0)
	{
		MoveHandToPlayed(selectresult[0]);
	}
	else if(selectresult[1] == 1)
	{
		MoveHandToCurrentPlayed(selectresult[0]);
		let specialcase = Process_Card(Obj_GetValue(currentplayedcard, "card"), currentplayer, notcurrentplayer, 1);
		UpdateUI;
		if(specialcase == 3)//DROP CARD
		{
			RearangeHandCards;//TO ACCOUNT FOR CHANGES
			EnableDiscardText(true);
			MoveDeckToHand(DrawCards(1)[0]);
			MoveCurrentPlayedToPlayed;
			MoveHandToPlayed(AISelector(1)[0]);
			EnableDiscardText(false);
			yield;
		}
		else//EVERY OTHER CARD
		{
			RearangeHandCards;//TO ACCOUNT FOR CHANGES
			wait(45);
			MoveCurrentPlayedToPlayed;
			yield;
		}
		if(specialcase != 0){AIAnotherTurn;}
	}
}

function PlayerTurn
{
	GainRessource(currentplayer);
	RearangeHandCards;//TO ACCOUNT FOR CHANGES
	UpdateUI;
	MoveDeckToHand(DrawCards(1)[0]);
	let selectresult = CardSelector(0);//returns [index, action] action 0 == discard; action 1 == usage
	MovePlayedToDeck;
	if(selectresult[1] == 0)
	{
		MoveHandToPlayed(selectresult[0]);
	}
	else if(selectresult[1] == 1)
	{
		MoveHandToCurrentPlayed(selectresult[0]);
		let specialcase = Process_Card(Obj_GetValue(currentplayedcard, "card"), currentplayer, notcurrentplayer, 1);
		UpdateUI;
		if(specialcase == 3)//DROP CARD
		{
			RearangeHandCards;//TO ACCOUNT FOR CHANGES
			EnableDiscardText(true);
			MoveDeckToHand(DrawCards(1)[0]);
			MoveCurrentPlayedToPlayed;
			MoveHandToPlayed(CardSelector(1)[0]);
			EnableDiscardText(false);
		}
		else//EVERY OTHER CARD
		{
			RearangeHandCards;//TO ACCOUNT FOR CHANGES
			wait(45);
			MoveCurrentPlayedToPlayed;
		}
		if(specialcase != 0){AnotherTurn;}
	}
	EvaluateGameState;
	//WHEN CODE HERE THE PLAYER SWITCHES
	SwitchCurrentPlayer;
	AITurn;
}

function AnotherTurn
{
	MoveDeckToHand(DrawCards(1)[0]);
	let selectresult = CardSelector(0);
	//MovePlayedToDeck;
	if(selectresult[1] == 0)
	{
		MoveHandToPlayed(selectresult[0]);
	}
	else if(selectresult[1] == 1)
	{
		MoveHandToCurrentPlayed(selectresult[0]);
		let specialcase = Process_Card(Obj_GetValue(currentplayedcard, "card"), currentplayer, notcurrentplayer, 1);
		UpdateUI;
		if(specialcase == 3)//DROP CARD
		{
			RearangeHandCards;//TO ACCOUNT FOR CHANGES
			EnableDiscardText(true);
			MoveDeckToHand(DrawCards(1)[0]);
			MoveCurrentPlayedToPlayed;
			MoveHandToPlayed(CardSelector(1)[0]);
			EnableDiscardText(false);
		}
		else//EVERY OTHER CARD
		{
			RearangeHandCards;//TO ACCOUNT FOR CHANGES
			wait(45);
			MoveCurrentPlayedToPlayed;
		}
		if(specialcase != 0){AnotherTurn;}
	}
}

function TestDebug
{
	Create_StartConfig;
}

function CreateGraphicElements
{
	Create_Graphics;
	CreateDiscardText(280, 290);
	CreateCover;
	CreatePlayedSlots;
	UpdatePlayedSlots;
	CreateCurrentPlayedCard;
	UpdateCurrentPlayedCard;
	CreateHandDisplay;
	RearangeHandCards;
	ChangeHandDisplayPlayer;
	UpdateUI;
}



function SwitchCurrentPlayer
{
	if(currentplayer == player1)
	{
		currentplayer = player2;
		notcurrentplayer = player1;
	}
	else
	{
		currentplayer = player1;
		notcurrentplayer = player2;
	}
}

function PlaySound_GetRessources{ObjMusic_CreateSE(GetCurrentScriptDirectory() ~ "./sounds/bricks up.wav", 70);}
function PlaySound_LoseRessources{ObjMusic_CreateSE(GetCurrentScriptDirectory() ~ "sounds/bricks down.wav", 70);}
function PlaySound_Damage{ObjMusic_CreateSE(GetCurrentScriptDirectory() ~ "sounds/damage.wav", 70);}
function PlaySound_GetLevel{ObjMusic_CreateSE(GetCurrentScriptDirectory() ~ "sounds/quarry up.wav", 70);}
function PlaySound_LoseLevel{ObjMusic_CreateSE(GetCurrentScriptDirectory() ~ "sounds/quarry down.wav", 70);}
function PlaySound_GetTower{ObjMusic_CreateSE(GetCurrentScriptDirectory() ~ "sounds/tower up.wav", 70);}
function PlaySound_GetWall{ObjMusic_CreateSE(GetCurrentScriptDirectory() ~ "sounds/wall up.wav", 70);}
function PlaySound_Card{ObjMusic_CreateSE(GetCurrentScriptDirectory() ~ "sounds/deal.wav", 70);}


function CardSelector(mode) //returns [index, action] action 0 == discard; action 1 == usage
{
	//mode 0 default
	//mode 1 only discard
	let objarray = [];
	let action = -1;
	let choosenindex = -1;
	ascent(i in 0..length(handcardsarray))
	{
		CreateSelector(i);
	}

	while(choosenindex == -1)
	{
		yield;
	}
	ascent(i in 0..length(objarray))
	{
		Obj_Delete(objarray[i]);
	}

	return [choosenindex, action];

	task CreateSelector(indexx)
	{
		let targetobj = handcardsarray[indexx];
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		objarray = objarray ~ [obj];
		ObjSprite2D_SetSourceDestCenter(obj, GetCurrentScriptDirectory() ~ "border.png");
		ObjRender_SetPosition(obj, ObjRender_GetX(targetobj), ObjRender_GetY(targetobj), 0);
		Obj_SetRenderPriorityI(obj, 90);
		Obj_SetVisible(obj, false);

		let card = Obj_GetValue(currentplayer, "hand")[indexx];
		let borderx1 = ObjRender_GetX(targetobj) - 96 / 2;
		let borderx2 = ObjRender_GetX(targetobj) + 96 / 2;
		let bordery1 = ObjRender_GetY(targetobj) - 128 / 2;
		let bordery2 = ObjRender_GetY(targetobj) + 128 / 2;

		while(!Obj_IsDeleted(obj))
		{
			let mousex = GetMouseX();
			let mousey = GetMouseY();

			if(mousex > borderx1 && mousex < borderx2 && mousey > bordery1 && mousey < bordery2)
			{
				Obj_SetVisible(obj, true);
				if(GetMouseState(MOUSE_LEFT) == KEY_PUSH)
				{
					if(mode == 0)
					{
						if(Process_Card(card, currentplayer, notcurrentplayer, 0) == 0)
						{
							choosenindex = indexx;
							action = 1;
						}
						else
						{
							WriteLog("CARD NOT PLAYABLE: " ~ itoa(card));
						}
					}
					else
					{
						if(IsCardDiscardable(card))
						{
							choosenindex = indexx;
							action = 0;
						}
						else
						{
							WriteLog("CARD NOT DISCARDABLE: " ~ itoa(card));
						}
					}
				}
				else if(GetMouseState(MOUSE_RIGHT) == KEY_PUSH)
				{
					if(IsCardDiscardable(card))
					{
						choosenindex = indexx;
						action = 0;
					}
					else
					{
						WriteLog("CARD NOT DISCARDABLE: " ~ itoa(card));
					}
				}
			}
			else
			{
				Obj_SetVisible(obj, false);
			}
			yield;
		}
	}
}


let handcardsy = 390;
let handcardsgapx = 10;
let handcardsx = 320 - (96 + handcardsgapx) * 2;

let handcardsarray = []; //OBJ ARRAY, DO NOT EDIT

function CreateHandDisplay
{
	loop(6)
	{
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjSprite2D_SetSourceDestCenter(obj, GetCurrentScriptDirectory() ~ "card.png");
		Obj_SetRenderPriorityI(obj, 90);
		handcardsarray = handcardsarray ~ [obj];
	}
}

function RearangeHandCards //Moves Handcardpositions between 5 and 6 Cards
{
	if(currentplayer == instanceplayer)
	{
		ascent(i in 0..length(Obj_GetValue(currentplayer, "hand")))
		{
			ObjPrim_SetTexture(handcardsarray[i], GetCardTextruePath(Obj_GetValue(currentplayer, "hand")[i]));
			let playable = -1;
			if(Process_Card(Obj_GetValue(currentplayer, "hand")[i], currentplayer, notcurrentplayer, 0) == 0)
			{
				ObjRender_SetAlpha(handcardsarray[i], 255);
			}
			else
			{
				ObjRender_SetAlpha(handcardsarray[i], 180);
			}
		}
	}
	else
	{
		ascent(i in 0..length(Obj_GetValue(currentplayer, "hand")))
		{
			ObjPrim_SetTexture(handcardsarray[i], GetCurrentScriptDirectory() ~ "card.png");
			ObjRender_SetAlpha(handcardsarray[i], 255);
		}
	}

	if(length(Obj_GetValue(currentplayer, "hand")) == 6)
	{
		//MoveCardslots
		ascent(i in 0..6)
		{
			ObjRender_SetPosition(handcardsarray[i], handcardsx + 96 * i + handcardsgapx * i - (96 + handcardsgapx) / 2, handcardsy, 0);
		}
		Obj_SetVisible(handcardsarray[5], true);
	}
	else
	{
		//MoveCardslots
		ascent(i in 0..6)
		{
			ObjRender_SetPosition(handcardsarray[i], handcardsx + 96 * i + handcardsgapx * i, handcardsy, 0);
		}
		Obj_SetVisible(handcardsarray[5], false);
	}
}

function ChangeHandDisplayPlayer //It decides with currentplayer and instanceplayer
{
	if(currentplayer == instanceplayer)
	{
		ascent(i in 0..length(Obj_GetValue(currentplayer, "hand")))
		{
			ObjPrim_SetTexture(handcardsarray[i], GetCardTextruePath(Obj_GetValue(currentplayer, "hand")[i]));
		}
	}
	else
	{
		ascent(i in 0..length(Obj_GetValue(currentplayer, "hand")))
		{
			//ObjPrim_SetTexture(handcardsarray[i], GetCardTextruePath(Obj_GetValue(currentplayer, "hand")[i]));
			ObjPrim_SetTexture(handcardsarray[i], GetCurrentScriptDirectory() ~ "card.png");
		}
	}
}

function DrawCards(number) //returns an array of cards that have been drawn from the deck
{
	let cards = [];

	loop(number)
	{
		cards = cards ~ [cardarray[rand_int(0, length(cardarray) - 1)]];
	}
	/*
	if(number >= length(deck)){RaiseError("NO CARDS TO DRAW FROM DECK! THIS SHOULD NOT BE POSSIBLE!!!")}
	let cards = slice(deck, 0, number);
	loop(number)
	{
		deck = erase(deck, 0);
	}*/
	return cards; //returns ARRAY
}

let discardtext = -1;

function CreateDiscardText(x, y)
{
	discardtext = ObjText_Create();
	ObjText_SetFontSize(discardtext, 12);
	ObjText_SetMaxWidth(discardtext, 200);
	ObjText_SetText(discardtext, "DISCARD A CARD");
	//ObjText_SetHorizontalAlignment(discardtext, ALIGNMENT_CENTER);
	ObjText_SetAutoTransCenter(discardtext, true);
	ObjRender_SetPosition(discardtext, x, y, 0);
	Obj_SetRenderPriorityI(discardtext, 90); 
	Obj_SetVisible(discardtext, false);
}

function EnableDiscardText(state)
{
	Obj_SetVisible(discardtext, state);
}

let currentplayedcard = -1;

function UpdateCurrentPlayedCard
{
	let card = Obj_GetValue(currentplayedcard, "card");
	if(card == -1)
	{
		Obj_SetVisible(currentplayedcard, false);
	}
	else
	{
		Obj_SetVisible(currentplayedcard, true);
		ObjPrim_SetTexture(currentplayedcard, GetCardTextruePath(card));
	}
}

function CreateCurrentPlayedCard
{
	currentplayedcard = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjSprite2D_SetSourceDestCenter(currentplayedcard, GetCurrentScriptDirectory() ~ "card.png");
	ObjRender_SetPosition(currentplayedcard, 320, 240, 0);
	Obj_SetRenderPriorityI(currentplayedcard, 90);
	Obj_SetValue(currentplayedcard, "card", -1);
}

function GetCardTextruePath(card)
{
	let path = GetCurrentScriptDirectory();
	if(truncate(card / 100) == 1){path = path ~ "red/" ~ itoa(truncate(card)) ~ ".png";}
	else if(truncate(card / 100) == 2){path = path ~ "blue/" ~ itoa(truncate(card)) ~ ".png";}
	else if(truncate(card / 100) == 3){path = path ~ "green/" ~ itoa(truncate(card)) ~ ".png";}
	else{path = path ~ "card.png";}
	return path;
}

let playedcardsx = 166;
let playedcardsy = 76;
let playedcardsgapx = 6;
let playedcardsgapy = 20;

let playedcardsarray = []; //OBJ ARRAY, DO NOT EDIT

function UpdatePlayedSlots
{
	ascent(i in 0..length(playedcardsarray))
	{
		let card = Obj_GetValue(playedcardsarray[i], "card");
		if(card == -1)
		{
			Obj_SetVisible(playedcardsarray[i], false);
		}
		else
		{
			Obj_SetVisible(playedcardsarray[i], true);
			ObjPrim_SetTexture(playedcardsarray[i], GetCardTextruePath(card));
		}
	}
}

function CreatePlayedSlots
{
	ascent(i in 1..4)
	{
		CreatePlayedSlot(playedcardsx + 96 * i + playedcardsgapx * i, playedcardsy);
	}
	ascent(i in 0..4)
	{
		CreatePlayedSlot(playedcardsx + 96 * i + playedcardsgapx * i, playedcardsy + 128 + playedcardsgapy);
	}
	ascent(i in 0..4)
	{
		CreatePlayedSlot(playedcardsx + 96 * i + playedcardsgapx * i, playedcardsy + 256 + playedcardsgapy * 2);
	}

	function CreatePlayedSlot(x, y)
	{
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjSprite2D_SetSourceDestCenter(obj, GetCurrentScriptDirectory() ~ "card.png");
		Obj_SetRenderPriorityI(obj, 90);
		ObjRender_SetColor(obj, 200, 200, 200);
		ObjRender_SetAlpha(obj, 180);
		ObjRender_SetPosition(obj, x, y, 0);
		Obj_SetValue(obj, "card", -1);
		playedcardsarray = playedcardsarray ~ [obj];
	}
}

task MovePlayedToDeck
{
	let t = 30;
	let counter = 0;
	let cardarray = [];
	descent(i in 0..length(playedcardsarray))
	{
		if(Obj_GetValue(playedcardsarray[i], "card") != -1)
		{
			MoveToDeck(i);
			counter++;
		}
	}
	UpdatePlayedSlots;
	if(counter != 0)
	{
		wait(t);
		//cardarray = ShuffleArray(cardarray);
		//deck = deck ~ cardarray;
	}

	task MoveToDeck(slot)
	{
		let card = Obj_GetValue(playedcardsarray[slot], "card");
		Obj_SetValue(playedcardsarray[slot], "card", -1);
		cardarray = cardarray ~ [card];
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjSprite2D_SetSourceDestCenter(obj, GetCardTextruePath(card));
		Obj_SetRenderPriorityI(obj, 89);
		ObjRender_SetPosition(obj, ObjRender_GetX(playedcardsarray[slot]), ObjRender_GetY(playedcardsarray[slot]), 0);
		ObjRender_SetDestAtFrame(obj, playedcardsx, playedcardsy, t);
		ObjRender_SetColor(obj, 200, 200, 200);
		ObjRender_SetAlpha(obj, 180);
		wait(t);
		Obj_Delete(obj);
	}
}

function MoveDeckToHand(card)
{
	PlaySound_Card;
	let t = 20;
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	//if(currentplayer == instanceplayer){ObjSprite2D_SetSourceDestCenter(obj, GetCardTextruePath(card));}
	//else{ObjSprite2D_SetSourceDestCenter(obj, GetCurrentScriptDirectory() ~ "card.png");}
	ObjSprite2D_SetSourceDestCenter(obj, GetCurrentScriptDirectory() ~ "card.png");
	Obj_SetRenderPriorityI(obj, 91);
	ObjRender_SetPosition(obj, playedcardsx, playedcardsy, 0);
	ObjRender_SetDestAtFrame(obj, handcardsx + 96 * 5 + handcardsgapx * 5 - (96 + handcardsgapx) / 2, handcardsy, t);
	wait(t);
	Obj_SetValue(currentplayer, "hand", Obj_GetValue(currentplayer, "hand") ~ [card]);
	RearangeHandCards;
	Obj_Delete(obj);
}

function MoveHandToCurrentPlayed(slot)
{
	PlaySound_Card;
	WriteLog(Obj_GetValue(currentplayer, "hand"));
	WriteLog(slot);
	let card = Obj_GetValue(currentplayer, "hand")[slot];
	Obj_SetValue(currentplayer, "hand", erase(Obj_GetValue(currentplayer, "hand"), slot));
	RearangeHandCards;
	let t = 12;
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjSprite2D_SetSourceDestCenter(obj, GetCardTextruePath(card));
	Obj_SetRenderPriorityI(obj, 91);
	ObjRender_SetPosition(obj, handcardsx + 96 * slot + handcardsgapx * slot - (96 + handcardsgapx) / 2, handcardsy, 0);
	ObjRender_SetDestAtFrame(obj, 320, 240, t);
	wait(t);
	Obj_SetValue(currentplayedcard, "card", card);
	UpdateCurrentPlayedCard;
	Obj_Delete(obj);
}

function MoveCurrentPlayedToPlayed
{
	let card = Obj_GetValue(currentplayedcard, "card");
	Obj_SetValue(currentplayedcard, "card", -1);
	UpdateCurrentPlayedCard;
	let t = 16;
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjSprite2D_SetSourceDestCenter(obj, GetCardTextruePath(card));
	Obj_SetRenderPriorityI(obj, 91);
	ObjRender_SetPosition(obj, 320, 240, 0);
	let targetobj = -1;
	ascent(i in 0..length(playedcardsarray))
	{
		if(Obj_GetValue(playedcardsarray[i], "card") == -1){targetobj = playedcardsarray[i];break;}
	}
	if(targetobj == -1){RaiseError("NO FREE PLAYED CARD SLOT!!!");}
	ObjRender_SetDestAtFrame(obj, ObjRender_GetX(targetobj), ObjRender_GetY(targetobj), t);
	wait(t);
	Obj_SetValue(targetobj, "card", card);
	UpdatePlayedSlots;
	Obj_Delete(obj);
}

function MoveHandToPlayed(slot)
{
	PlaySound_Card;
	let card = Obj_GetValue(currentplayer, "hand")[slot];
	Obj_SetValue(currentplayer, "hand", erase(Obj_GetValue(currentplayer, "hand"), slot));
	RearangeHandCards;
	let t = 20;
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjSprite2D_SetSourceDestCenter(obj, GetCardTextruePath(card));
	Obj_SetRenderPriorityI(obj, 91);
	ObjRender_SetPosition(obj, handcardsx + 96 * slot + handcardsgapx * slot - (96 + handcardsgapx) / 2, handcardsy, 0);
	let targetobj = -1;
	ascent(i in 0..length(playedcardsarray))
	{
		if(Obj_GetValue(playedcardsarray[i], "card") == -1){targetobj = playedcardsarray[i];break;}
	}
	if(targetobj == -1){RaiseError("NO FREE PLAYED CARD SLOT!!!");}
	ObjRender_SetDestAtFrame(obj, ObjRender_GetX(targetobj), ObjRender_GetY(targetobj), t);
	wait(t);
	Obj_SetValue(targetobj, "card", card);
	UpdatePlayedSlots;
	Obj_Delete(obj);
}

function CreateCover
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjSprite2D_SetSourceDestCenter(obj, GetCurrentScriptDirectory() ~ "card.png");
	Obj_SetRenderPriorityI(obj, 90);
	ObjRender_SetPosition(obj, playedcardsx, playedcardsy, 0);
}

function CreateDeck(number)
{
	let deck = [];
	loop(number)
	{
		deck = deck ~ ShuffleArray(cardarray);
	}
	return deck;
}

function GainRessource(target)
{
	Obj_SetValue(target, "stone", Obj_GetValue(target, "stone") + Obj_GetValue(target, "stone_level"));
	Obj_SetValue(target, "gem", Obj_GetValue(target, "gem") + Obj_GetValue(target, "gem_level"));
	Obj_SetValue(target, "monster", Obj_GetValue(target, "monster") + Obj_GetValue(target, "monster_level"));
}

function UpdateUI
{
	ObjText_SetText(GetAreaCommonData("AcroMage", "player1_stone_counter", -1), itoa(Obj_GetValue(player1, "stone")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player1_gem_counter", -1), itoa(Obj_GetValue(player1, "gem")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player1_monster_counter", -1), itoa(Obj_GetValue(player1, "monster")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player1_stone_level", -1), itoa(Obj_GetValue(player1, "stone_level")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player1_gem_level", -1), itoa(Obj_GetValue(player1, "gem_level")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player1_monster_level", -1), itoa(Obj_GetValue(player1, "monster_level")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player1_tower", -1), itoa(Obj_GetValue(player1, "tower")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player1_wall", -1), itoa(Obj_GetValue(player1, "wall")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player2_stone_counter", -1), itoa(Obj_GetValue(player2, "stone")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player2_gem_counter", -1), itoa(Obj_GetValue(player2, "gem")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player2_monster_counter", -1), itoa(Obj_GetValue(player2, "monster")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player2_stone_level", -1), itoa(Obj_GetValue(player2, "stone_level")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player2_gem_level", -1), itoa(Obj_GetValue(player2, "gem_level")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player2_monster_level", -1), itoa(Obj_GetValue(player2, "monster_level")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player2_tower", -1), itoa(Obj_GetValue(player2, "tower")));
	ObjText_SetText(GetAreaCommonData("AcroMage", "player2_wall", -1), itoa(Obj_GetValue(player2, "wall")));
}

//Cards 100+ for stone, 200+ for gems, 300+ for monster

function UpdateTowerHeight
{
	let obj = GetAreaCommonData("AcroMage", "player1_wall_obj", -1);
	ObjSprite2D_SetDestRect(GetAreaCommonData("AcroMage", "player1_wall_obj", -1), x - GetTextureWidth(path) / 2 + towerxmissplace, , , ) 

	ObjSprite2D_SetDestRect(obj, x - GetTextureWidth(path) / 2 + towerxmissplace, y - towerpeak, x + GetTextureWidth(path) / 2 + towerxmissplace, y - towerpeak + GetTextureHeight(path));
}

let baseUIy = 305;
let baseUIxmissplace = 10;
let baseUIymissplace = 10;
let towerpeak = 83;
let towerbottom = GetTextureHeight(GetCurrentScriptDirectory() ~ "testturm22.png") - towerpeak;
let towerxmissplace = 4;

function Create_Graphics
{
	let basey = baseUIy;

	CreateCommonDataArea("AcroMage");
	CreateBG;
	CreateUserUI(0, 0, "stone", 1);
	CreateUserUI(0, 96, "gem", 1);
	CreateUserUI(0, 96 + 96, "monster", 1);
	CreateUserUI(544, 0, "stone", 2);
	CreateUserUI(544, 96, "gem", 2);
	CreateUserUI(544, 96 + 96, "monster", 2);
	CreateTowerUI(150, basey, "tower", 1);
	CreateTowerUI(210, basey, "wall", 1);
	CreateTowerUI(640 - 150, basey, "tower", 2);
	CreateTowerUI(640 - 210, basey, "wall", 2);

	task CreateBG
	{


		let bottombgy = basey + 5;
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(obj, GetCurrentScriptDirectory() ~ "bottombg.png");
		ObjSprite2D_SetSourceRect(obj, 0, 0, 640, GetTextureHeight(GetCurrentScriptDirectory() ~ "bottombg.png"));
		ObjSprite2D_SetDestRect(obj, 0, bottombgy, 640, bottombgy + GetTextureHeight(GetCurrentScriptDirectory() ~ "bottombg.png"));
		Obj_SetRenderPriorityI(obj, 86);
	}

	task CreateTowerUI(x, y, type, player)
	{
		/*
		let path = "";
		if(type == "stone"){path = GetCurrentScriptDirectory() ~ "stone.png";}
		if(type == "gem"){path = GetCurrentScriptDirectory() ~ "gem.png";}
		if(type == "monster"){path = GetCurrentScriptDirectory() ~ "monster.png";}

		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(obj, path);
		ObjSprite2D_SetSourceRect(obj, 0, 0, 96, 96);
		ObjSprite2D_SetDestRect(obj, x, y, x + 96, y + 96);
		Obj_SetRenderPriorityI(obj, 86);
		SetAreaCommonData("AcroMage", "player" ~ itoa(player) ~ "_" ~ type ~ "_graphic", obj);
		*/

		let bgobj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjSprite2D_SetSourceDestCenter(bgobj, GetCurrentScriptDirectory() ~ "valuebg.png");
		Obj_SetRenderPriorityI(bgobj, 86);
		ObjRender_SetPosition(bgobj, x + 4, y + 5, 0);

		let path = GetCurrentScriptDirectory();
		if(type == "tower" && player == 1){path = path ~ "testturm22.png";}
		else if(type == "tower" && player == 2){path = path ~ "testturm22.png";}
		else{path = path ~ "wall22.png";}
		let objx1 = x - GetTextureWidth(path) / 2 + towerxmissplace;
		let objx2 = x - x + GetTextureWidth(path) / 2 + towerxmissplace;
		let objy1 = y - towerpeak;
		let objy2 = y - towerpeak + GetTextureHeight(path);

		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(obj, path);
		ObjSprite2D_SetSourceRect(obj, 0, 0, GetTextureWidth(path), GetTextureHeight(path));
		ObjSprite2D_SetDestRect(obj, objx1, objy1, objx2, objy2);
		Obj_SetRenderPriorityI(obj, 85);
		Obj_SetValue(obj, "x1", objx1);
		Obj_SetValue(obj, "x2", objx2);
		Obj_SetValue(obj, "y1", objy1);
		Obj_SetValue(obj, "y2", objy2);
		SetAreaCommonData("AcroMage", "player" ~ itoa(player) ~ "_" ~ type ~ "obj", obj);

		obj = ObjText_Create;
		ObjText_SetText(obj, type);
		ObjText_SetFontSize(obj, 12);
		ObjText_SetHorizontalAlignment(obj, ALIGNMENT_CENTER);
		ObjText_SetMaxWidth(obj, 30);
		Obj_SetRenderPriorityI(obj, 86);
		ObjRender_SetPosition(obj, x - baseUIxmissplace, y, 0);
		SetAreaCommonData("AcroMage", "player" ~ itoa(player) ~ "_" ~ type, obj);
	}

	task CreateUserUI(x, y, type, player)
	{
		let path = "";
		if(type == "stone"){path = GetCurrentScriptDirectory() ~ "Acromage_Bricks.png";}
		if(type == "gem"){path = GetCurrentScriptDirectory() ~ "Acromage_Gems.png";}
		if(type == "monster"){path = GetCurrentScriptDirectory() ~ "Acromage_Recruits.png";}

		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(obj, path);
		ObjSprite2D_SetSourceRect(obj, 0, 0, 96, 96);
		ObjSprite2D_SetDestRect(obj, x, y, x + 96, y + 96);
		Obj_SetRenderPriorityI(obj, 86);
		SetAreaCommonData("AcroMage", "player" ~ itoa(player) ~ "_" ~ type ~ "_graphic", obj);

		obj = ObjText_Create;
		ObjText_SetText(obj, type ~ itoa(player));
		ObjText_SetFontSize(obj, 12);
		ObjText_SetFontBorderType(obj, BORDER_FULL);
		ObjText_SetFontBorderWidth(obj, 1);
		ObjText_SetFontBorderColor(obj, 0, 0, 0);
		Obj_SetRenderPriorityI(obj, 86);
		ObjRender_SetPosition(obj, x + 6, y + 81, 0);
		SetAreaCommonData("AcroMage", "player" ~ itoa(player) ~ "_" ~ type ~ "_counter", obj);

		obj = ObjText_Create;
		ObjText_SetText(obj, type ~ itoa(player));
		ObjText_SetFontSize(obj, 24);
		ObjText_SetFontBorderType(obj, BORDER_FULL);
		ObjText_SetFontBorderWidth(obj, 1);
		ObjText_SetFontBorderColor(obj, 0, 0, 0);
		Obj_SetRenderPriorityI(obj, 86);
		ObjRender_SetPosition(obj, x + 6, y + 30, 0);
		SetAreaCommonData("AcroMage", "player" ~ itoa(player) ~ "_" ~ type ~ "_level", obj);

		obj = ObjText_Create;
		ObjText_SetText(obj, type);
		ObjText_SetFontSize(obj, 12);
		ObjText_SetFontBorderType(obj, BORDER_FULL);
		ObjText_SetFontBorderWidth(obj, 1);
		ObjText_SetFontBorderColor(obj, 0, 0, 0);
		Obj_SetRenderPriorityI(obj, 86);
		ObjRender_SetPosition(obj, x + 44, y + 81, 0);
		SetAreaCommonData("AcroMage", "player" ~ itoa(player) ~ "_" ~ type ~ "_type", obj);
	}
}

function DoRessourceChange(target, stone, gem, monster, stone_level, gem_level, monster_level)
{
	Obj_SetValue(target, "stone", max(0, Obj_GetValue(target, "stone") + stone));
	Obj_SetValue(target, "gem", max(0, Obj_GetValue(target, "gem") + gem));
	Obj_SetValue(target, "monster", max(0, Obj_GetValue(target, "monster") + monster));
	Obj_SetValue(target, "stone_level", max(1, Obj_GetValue(target, "stone_level") + stone_level));
	Obj_SetValue(target, "gem_level", max(1, Obj_GetValue(target, "gem_level") + gem_level));
	Obj_SetValue(target, "monster_level", max(1, Obj_GetValue(target, "monster_level") + monster_level));
}

function DoBuild(target, wall, tower)
{
	Obj_SetValue(target, "wall", Obj_GetValue(target, "wall") + wall);
	Obj_SetValue(target, "tower", Obj_GetValue(target, "tower") + tower);
}


function DoDamage(target, generaldamage, walldamage, towerdamage)
{
	let tower_hp = Obj_GetValue(target, "tower");
	let wall_hp = Obj_GetValue(target, "wall");
	if(generaldamage != 0)
	{
		if(generaldamage > wall_hp)
		{
			generaldamage -= wall_hp;
			wall_hp = 0;
			tower_hp = max(0, tower_hp - generaldamage);
		}
		else
		{
			wall_hp -= generaldamage;
		}
	}
	else
	{
		wall_hp = max(0, wall_hp - walldamage);
		tower_hp = max(0, tower_hp - towerdamage);
	}
	Obj_SetValue(target, "tower", tower_hp);
	Obj_SetValue(target, "wall", wall_hp);
}

function WriteOwnGameState()
{
	let name = "GameState";
	//SetAreaCommonData(name, "gametick", 0); //GameState is always updates 
	SetAreaCommonData(name, "active_player", 1); //who is the current player 
	SetAreaCommonData(name, "old_cards_played", [-1]); //What was the last played Card
	SetAreaCommonData(name, "cards_played", [-1]); //What was the last played Card
	SetAreaCommonData(name, "player1_confirm", 0); //Is a confirmation needed?
	SetAreaCommonData(name, "player2_confirm", 0); //Is a confirmation needed?
	//SetAreaCommonData(name, "deck", deck);

	//ONLY FOR DESYNC CHECK
	SetAreaCommonData(name, "player1_tower", Obj_GetValue(player1, "tower"));
	SetAreaCommonData(name, "player1_wall", Obj_GetValue(player1, "wall"));
	SetAreaCommonData(name, "player1_stone", Obj_GetValue(player1, "stone"));
	SetAreaCommonData(name, "player1_gem", Obj_GetValue(player1, "gem"));
	SetAreaCommonData(name, "player1_monster", Obj_GetValue(player1, "monster"));
	SetAreaCommonData(name, "player1_stone_level", Obj_GetValue(player1, "stone_level"));
	SetAreaCommonData(name, "player1_gem_level", Obj_GetValue(player1, "gem_level"));
	SetAreaCommonData(name, "player1_monster_level", Obj_GetValue(player1, "monster_level"));
	SetAreaCommonData(name, "player1_hand", Obj_GetValue(player1, "hand"));
	
	SetAreaCommonData(name, "player2_tower", Obj_GetValue(player2, "tower"));
	SetAreaCommonData(name, "player2_wall", Obj_GetValue(player2, "wall"));
	SetAreaCommonData(name, "player2_stone", Obj_GetValue(player2, "stone"));
	SetAreaCommonData(name, "player2_gem", Obj_GetValue(player2, "gem"));
	SetAreaCommonData(name, "player2_monster", Obj_GetValue(player2, "monster"));
	SetAreaCommonData(name, "player2_stone_level", Obj_GetValue(player2, "stone_level"));
	SetAreaCommonData(name, "player2_gem_level", Obj_GetValue(player2, "gem_level"));
	SetAreaCommonData(name, "player2_monster_level", Obj_GetValue(player2, "monster_level"));
	SetAreaCommonData(name, "player2_hand", Obj_GetValue(player2, "hand"));
}

function Create_StartConfig
{
	let filetest = ObjFile_Create(OBJ_FILE_BINARY);
	ObjFile_Open(filetest, resetpath);
	if(ObjFile_GetSize(filetest) == 0)
	{
		WriteLog("Existing Reset ConfigFile found (What?)! Overriding!");
	}
	else
	{
		WriteLog("No Reset ConfigFile found! Creating Reset StartConfig!");
	}
	CreateDataArea("Reset_Remote_GameState");
	let saved = SaveCommonDataAreaA2("Reset_Remote_GameState", setpath);
	if(saved == false){RaiseError("COULD NOT SAVE RESET START GAMESTATE TO FILE!!! THAT SHOULD NOT BE THE CASE!");}
	ClearAreaCommonData("Remote_GameState");
	
	return true;
}
function Update_Remote_GameState
{
	let resultc = FileTest(getpath);
	while(resultc == 1)//Check if Remote_ConfigFile wrongfully does not exist
	{
		FileTest(getpath); // 0 File exist; 1 File does not exist
		WriteLog("Remote ConfigFile not found! Retry!");
		loop(30){yield;}
	}
	
	resultc = FileTest(setpath);
	while(resultc == 0)//Check if Own_ConfigFile does wrongfully exist
	{
		FileTest(setpath); // 0 File exist; 1 File does not exist
		WriteLog("Own ConfigFile found! Retry! Maybe the Script is not running");
		loop(30){yield;}
	}
	
	ClearAreaCommonData("Remote_GameState");
	CopyCommonDataArea("Remote_GameState", "GameState");
	let saved = SaveCommonDataAreaA2("Remote_GameState", setpath);
	if(saved == false){RaiseError("COULD NOT SAVE OWN GAMESTATE TO FILE!!! THAT SHOULD NOT BE THE CASE!");}
	
	return true;
	
	function FileTest(path)
	{
		let filetest = ObjFile_Create(OBJ_FILE_BINARY);
		ObjFile_Open(filetest, path);
		if(ObjFile_GetSize(filetest) == 0)
		{
			Obj_Delete(filetest);
			return 0;
		}
		else
		{
			Obj_Delete(filetest);
			return 1;
		}
	}
}

function Update_WaitforSync
{
	ClearAreaCommonData("Remote_GameState");
	let tick = GetAreaCommonData("GameState", "gametick", -1);
	while(tick <= GetAreaCommonData("Remote_GameState", "gametick", 0))
	{
		let resultc = LoadCommonDataAreaA2("Remote_GameState", getpath);
		while(resultc == false)
		{
			resultc = LoadCommonDataAreaA2("Remote_GameState", getpath);
			WriteLog("Could not Read Remote_GameState! Retry!");
			loop(30){yield;}
		}
		loop(30){yield;}
		WriteLog("Waiting for higher gametick... Tick: " ~ itoa(tick));
	}
	WriteLog("Higher gametick detected! Advancing! Tick: " ~ itoa(GetAreaCommonData("Remote_GameState", "gametick", 0)));
	return true;
}

function CreateDataArea(name)
{
	CreateCommonDataArea(name);
	SetAreaCommonData(name, "gametick", 0); //Each synchronized action increases the gametick
	SetAreaCommonData(name, "active_player", 1); //who is the current player 
	SetAreaCommonData(name, "old_cards_played", [-1]); //What was the last played Card
	SetAreaCommonData(name, "cards_played", [-1]); //What was the last played Card
	SetAreaCommonData(name, "player1_confirm", 0); //Is a confirmation needed?
	SetAreaCommonData(name, "player2_confirm", 0); //Is a confirmation needed?
	//SetAreaCommonData(name, "deck", deck);

	//ONLY FOR DESYNC CHECK
	SetAreaCommonData(name, "player1_tower", Obj_GetValue(player1, "tower"));
	SetAreaCommonData(name, "player1_wall", Obj_GetValue(player1, "wall"));
	SetAreaCommonData(name, "player1_stone", Obj_GetValue(player1, "stone"));
	SetAreaCommonData(name, "player1_gem", Obj_GetValue(player1, "gem"));
	SetAreaCommonData(name, "player1_monster", Obj_GetValue(player1, "monster"));
	SetAreaCommonData(name, "player1_stone_level", Obj_GetValue(player1, "stone_level"));
	SetAreaCommonData(name, "player1_gem_level", Obj_GetValue(player1, "gem_level"));
	SetAreaCommonData(name, "player1_monster_level", Obj_GetValue(player1, "monster_level"));
	SetAreaCommonData(name, "player1_hand", Obj_GetValue(player1, "hand"));
	
	SetAreaCommonData(name, "player2_tower", Obj_GetValue(player2, "tower"));
	SetAreaCommonData(name, "player2_wall", Obj_GetValue(player2, "wall"));
	SetAreaCommonData(name, "player2_stone", Obj_GetValue(player2, "stone"));
	SetAreaCommonData(name, "player2_gem", Obj_GetValue(player2, "gem"));
	SetAreaCommonData(name, "player2_monster", Obj_GetValue(player2, "monster"));
	SetAreaCommonData(name, "player2_stone_level", Obj_GetValue(player2, "stone_level"));
	SetAreaCommonData(name, "player2_gem_level", Obj_GetValue(player2, "gem_level"));
	SetAreaCommonData(name, "player2_monster_level", Obj_GetValue(player2, "monster_level"));
	SetAreaCommonData(name, "player2_hand", Obj_GetValue(player2, "hand"));
}

function CreatePlayer(number)
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	
	Obj_SetValue(obj, "player_number", number);
	Obj_SetValue(obj, "tower", tower_start);
	Obj_SetValue(obj, "wall", wall_start);
	Obj_SetValue(obj, "stone", ressource_start);
	Obj_SetValue(obj, "gem", ressource_start);
	Obj_SetValue(obj, "monster", ressource_start);
	Obj_SetValue(obj, "stone_level", ressource_level_start);
	Obj_SetValue(obj, "gem_level", ressource_level_start);
	Obj_SetValue(obj, "monster_level", ressource_level_start);
	Obj_SetValue(obj, "hand", DrawCards(5));
	
	return obj;
}

function EvaluateGameState
{
	let player1_state = 0;
	let player2_state = 0;
	
	player1_state = CheckPlayer(player1);
	player2_state = CheckPlayer(player2);
	
	function CheckPlayer(player)
	{
		if(Obj_GetValue(player, "tower") <= 0){return -1;}
		else if(Obj_GetValue(player, "tower") >= tower_winlevel){return 1;}
		else if(Obj_GetValue(player, "stone") >= ressource_winlevel){return 1;}
		else if(Obj_GetValue(player, "gem") >= ressource_winlevel){return 1;}
		else if(Obj_GetValue(player, "monster") >= ressource_winlevel){return 1;}
		else{return 0;}
	}
	
	//WriteLog("CHECK PLAYER1: " ~ itoa(player1_state) ~ " CHECK PLAYER2: " ~ itoa(player2_state));

	if(player1_state == -1 && player2_state == -1){yield; RaiseError("DRAW! Both Towers down!");}
	else if(player1_state == 1 && player2_state == 1){yield; RaiseError("DRAW! Both Players win!");}
	else if(player1_state == 1 || player2_state == -1){yield; RaiseError("Player1 wins!");}
	else if(player2_state == 1 || player1_state == -1){yield; RaiseError("Player2 wins!");}
}

/*
PlaySound_GetRessources;
PlaySound_LoseRessources;
PlaySound_Damage;
PlaySound_GetLevel;
PlaySound_LoseLevel;
PlaySound_GetTower;
PlaySound_GetWall;
*/

//function DoRessourceChange(target, stone, gem, monster, stone_level, gem_level, monster_level)
//function DoBuild(target, wall, tower)
//function DoDamage(target, generaldamage, walldamage, towerdamage)

function IsCardDiscardable(number)//bool
{
	if(number == 206){return false;}
	else{return true;}
}

function Process_Card(number, user, target, reason)
{
	//reason 0 check for playability; 1 Card is used.
	//return 0 it is allowed; return 1 it is NOT allowed; return 2 another turn; return 3 discard additional card
	//DoRessourceChange(user, 0, 0, 0, 0, 0, 0);
	alternative(number)
	/////////////STONE CARDS//////////////
	case(101){
		if(reason == 0){return 0;}
		DoRessourceChange(user, -8, 0, 0, 0, 0, 0);
		DoRessourceChange(target, -8, 0, 0, 0, 0, 0);
		PlaySound_LoseRessources;
	}
	case(102){
		if(reason == 0){return 0;}
		DoRessourceChange(user, 2, 2, 0, 0, 0, 0);
		PlaySound_GetRessources;
		return 2;
		//PLAY AGAIN
	}
	case(103){
		if(reason == 0 && Obj_GetValue(user, "stone") >= 1){return 0;}else if(reason == 0){return 1;}
		DoBuild(user, 1, 0);
		DoRessourceChange(user, -1, 0, 0, 0, 0, 0);
		PlaySound_GetWall;
		return 2;
		//PLAY AGAIN
	}
	case(104){
		if(reason == 0 && Obj_GetValue(user, "stone") >= 3){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -3, 0, 0, 1, 0, 0);
		PlaySound_GetLevel;
	}
	case(105){
		if(reason == 0 && Obj_GetValue(user, "stone") >= 4){return 0;}else if(reason == 0){return 1;}
		if(Obj_GetValue(user, "stone_level") < Obj_GetValue(target, "stone_level")){DoRessourceChange(user, -4, 0, 0, 2, 0, 0);}
		else{DoRessourceChange(user, -4, 0, 0, 1, 0, 0);}
		PlaySound_GetLevel;
	}
	case(106){
		if(reason == 0 && Obj_GetValue(user, "stone") >= 7){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -7, 0, 0, 1, 0, 0);
		DoBuild(user, 4, 0);
		PlaySound_GetLevel;
	}
	case(107){
		if(reason == 0 && Obj_GetValue(user, "stone") >= 2){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -2, -6, 0, 0, 0, 0);
		DoBuild(user, 5, 0);
		PlaySound_GetWall;
	}
	case(108){
		if(reason == 0 && Obj_GetValue(user, "stone") >= 5 && Obj_GetValue(user, "stone_level") < Obj_GetValue(target, "stone_level")){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -5, 0, 0, 0, 0, 0);
		Obj_SetValue(user, "stone_level", Obj_GetValue(target, "stone_level"));
		PlaySound_GetLevel;
	}
	case(109){
		if(reason == 0 && Obj_GetValue(user, "stone") >= 2){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -2, 0, 0, 0, 0, 0);
		DoBuild(user, 3, 0);
		PlaySound_GetWall;
	}
	case(110){
		if(reason == 0 && Obj_GetValue(user, "stone") >= 3){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -3, 0, 0, 0, 0, 0);
		DoBuild(user, 4, 0);
		PlaySound_GetWall;
	}
	case(111){
		if(reason == 0 && Obj_GetValue(user, "stone") >= 2){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -2, 4, 0, 1, 0, 0);
		DoRessourceChange(target, 0, 0, 0, 1, 0, 0);
		PlaySound_GetLevel;
	}
	case(112){
		if(reason == 0 && Obj_GetValue(user, "stone") >= 3){return 0;}else if(reason == 0){return 1;}
		if(Obj_GetValue(user, "wall") == 0){DoBuild(user, 6, 0);}
		else{DoBuild(user, 3, 0);}
		DoRessourceChange(user, -3, 0, 0, 0, 0, 0);
		PlaySound_GetWall;
	}
	case(113){
		if(reason == 0 && Obj_GetValue(user, "stone") >= 7){if(Obj_GetValue(user, "wall") > 0 || Obj_GetValue(target, "wall") > 0){return 0;}else{return 1;}}else if(reason == 0){return 1;}
		DoRessourceChange(user, -7, 0, 0, 0, 0, 0);
		DoDamage(user, 0, 5, 0);
		DoDamage(target, 0, 5, 0);
		PlaySound_Damage;
		return 2;
		//PLAY AGAIN
	}
	case(114){
		if(reason == 0 && Obj_GetValue(user, "stone") >= 8){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -8, 0, 0, 0, 1, 0);
		PlaySound_GetLevel;
		return 2;
		//PLAY AGAIN
	}
	case(115){
		if(reason == 0){if(Obj_GetValue(user, "stone_level") > 1 || Obj_GetValue(target, "stone_level") > 1){return 0;}else{return 1;}}
		DoRessourceChange(user, 0, 0, 0, -1, 0, 0);
		DoRessourceChange(target, 0, 0, 0, -1, 0, 0);
		PlaySound_LoseLevel;
	}
	case(116){
		if(reason == 0 && Obj_GetValue(user, "stone") >= 5){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -5, 0, 0, 0, 0, 0);
		DoBuild(user, 6, 0);
		PlaySound_GetWall;
	}
	case(117){

		if(reason == 0 && Obj_GetValue(user, "stone") >= 4 && Obj_GetValue(target, "stone_level") > 1){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -4, 0, 0, 0, 0, 0);
		DoRessourceChange(target, 0, 0, 0, -1, 0, 0);
		PlaySound_LoseLevel;
	}
	case(118){

		if(reason == 0 && Obj_GetValue(user, "stone") >= 6){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -6, 0, 0, 2, 0, 0);
		PlaySound_GetLevel;
	}
	case(119){

		if(reason == 0 && Obj_GetValue(user, "stone_level") > 1){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 5, 0, -1, 0, 0);
		DoBuild(user, 10, 0);
		PlaySound_GetWall;
	}
	case(120){

		if(reason == 0 && Obj_GetValue(user, "stone") >= 8){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -8, 0, 0, 0, 0, 0);
		DoBuild(user, 8, 0);
		PlaySound_GetWall;
	}
	case(121){

		if(reason == 0 && Obj_GetValue(user, "stone") >= 9){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -9, 0, 0, 0, 0, 1);
		DoBuild(user, 5, 0);
		PlaySound_GetLevel;
	}
	case(122){

		if(reason == 0 && Obj_GetValue(user, "stone") >= 9){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -9, 7, 0, 0, 0, 0);
		DoBuild(user, 7, 0);
		PlaySound_GetWall;
	}
	case(123){

		if(reason == 0 && Obj_GetValue(user, "stone") >= 11){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -11, 0, 0, 0, 0, 0);
		DoBuild(user, 3, 0);
		PlaySound_GetTower;
	}
	case(124){

		if(reason == 0 && Obj_GetValue(user, "stone") >= 13){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -13, 0, 0, 0, 0, 0);
		DoBuild(user, 12, 0);
		PlaySound_GetWall;
	}
	case(125){

		if(reason == 0 && Obj_GetValue(user, "stone") >= 15){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -15, 0, 0, 0, 0, 0);
		DoBuild(user, 8, 5);
		PlaySound_GetTower;
	}
	case(126){

		if(reason == 0 && Obj_GetValue(user, "stone") >= 16){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -16, 0, 0, 0, 0, 0);
		DoBuild(user, 15, 0);
		PlaySound_GetWall;
	}
	case(127){

		if(reason == 0 && Obj_GetValue(user, "stone") >= 18){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -18, 0, 0, 0, 0, 0);
		DoBuild(user, 6, 0);
		DoDamage(target, 10, 0, 0);
		PlaySound_Damage;
	}
	case(128){

		if(reason == 0 && Obj_GetValue(user, "stone") >= 24){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -24, 0, 0, 0, 0, 0);
		DoBuild(user, 20, 8);
		PlaySound_GetTower;
	}
	case(129){

		if(reason == 0 && Obj_GetValue(user, "stone") >= 7){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -7, 0, -5, 0, 0, 0);
		DoBuild(user, 9, 0);
		PlaySound_GetWall;
	}
	case(130){

		if(reason == 0 && Obj_GetValue(user, "stone") >= 1){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -1, 0, 2, 0, 0, 0);
		DoBuild(user, 1, 1);
		PlaySound_GetTower;
	}
	case(131){

		if(reason == 0 && Obj_GetValue(user, "stone") >= 6 && Obj_GetValue(user, "wall") != Obj_GetValue(target, "wall")){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -6, 0, 0, 0, 0, 0);
		if(Obj_GetValue(user, "wall") < Obj_GetValue(target, "wall"))
		{
			DoRessourceChange(user, 0, 0, 0, 0, 0, -1);
			DoDamage(user, 0, 0, 2);
		}
		else
		{
			DoRessourceChange(target, 0, 0, 0, 0, 0, -1);
			DoDamage(target, 0, 0, 2);
		}
		PlaySound_Damage;
	}
	case(132){

		if(reason == 0 && Obj_GetValue(user, "stone") >= 10){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -10, 0, 6, 0, 0, 0);
		if(Obj_GetValue(user, "monster_level") < Obj_GetValue(target, "monster_level")){DoRessourceChange(user, 0, 0, 0, 0, 0, 1);}
		DoBuild(user, 6, 0);
		PlaySound_GetLevel;
	}
	case(133){

		if(reason == 0 && Obj_GetValue(user, "stone") >= 14){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -14, 0, 0, 0, 0, 0);
		DoBuild(user, 7, 0);
		DoDamage(target, 6, 0, 0);
		PlaySound_Damage;
	}
	case(134){

		if(reason == 0 && Obj_GetValue(user, "stone") >= 17 && Obj_GetValue(user, "wall") != Obj_GetValue(target, "wall")){return 0;}else if(reason == 0){return 1;}
		let userwall = Obj_GetValue(user, "wall");
		Obj_SetValue(user, "wall", Obj_GetValue(target, "wall"));
		Obj_SetValue(target, "wall", userwall);
		PlaySound_GetWall;
	}
	//////////////GEM CARDS//////////////////
	case(201){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 1){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -1, 0, 0, 0, 0);
		DoBuild(user, 0, 1);
		PlaySound_GetTower;
		return 2;
		//PLAY AGAIN
	}
	case(202){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 2){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -2, 0, 0, 0, 0);
		DoDamage(target, 0, 0, 1);
		PlaySound_Damage;
		return 2;
		//PLAY AGAIN
	}
	case(203){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 2){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -3, 0, 0, 0, 0);
		DoBuild(user, 0, 3);
		PlaySound_GetTower;
	}
	case(204){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 3){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -3, 0, 0, 1, 0);
		PlaySound_GetLevel;
	}
	case(205){
		if(reason == 0 && Obj_GetValue(user, "gem") >= 2){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -2, 0, 0, 0, 0);
		return 3;
		//PLAY AGAIN; DROP CARD
	}
	case(206){
		if(reason == 0 && Obj_GetValue(user, "gem") >= 5){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -5, 0, 0, 0, 0);
		DoBuild(user, 0, 3);
		PlaySound_GetTower;
		//CANT BE DISCARDED
	}
	case(207){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 4){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -4, 0, 0, 0, 0);
		DoBuild(user, 0, 2);
		DoDamage(target, 0, 0, 2);
		PlaySound_Damage;
	}
	case(208){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 6){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -6, 0, 0, 1, 0);
		DoBuild(user, 0, 3);
		DoBuild(target, 0, 1);
		PlaySound_GetLevel;
	}
	case(209){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 2){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -2, 0, 0, 0, 0);
		DoDamage(target, 0, 0, 3);
		PlaySound_Damage;
	}
	case(210){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 3){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -3, 0, 0, 0, 0);
		DoBuild(user, 0, 5);
		PlaySound_GetTower;
	}
	case(211){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 4){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -4, 0, 0, 0, 0);
		DoDamage(target, 0, 0, 5);
		PlaySound_Damage;
	}
	case(212){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 3){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -3, 0, 0, 2, 0);
		DoDamage(user, 5, 0, 0);
		PlaySound_GetLevel;
	}
	case(213){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 7){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -7, 0, 0, 1, 0);
		DoBuild(user, 3, 3);
		PlaySound_GetLevel;
	}
	case(214){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 7 && Obj_GetValue(user, "gem_level") != Obj_GetValue(target, "gem_level")){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -7, 0, 0, 0, 0);
		let level = max(Obj_GetValue(user, "gem_level"), Obj_GetValue(target, "gem_level"));
		Obj_SetValue(user, "gem_level", level);
		Obj_SetValue(target, "gem_level", level);
		PlaySound_GetLevel;
	}
	case(215){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 6){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -6, 0, 0, 0, 0);
		DoBuild(user, 0, 8);
		PlaySound_GetTower;
	}
	case(216){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 9){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -9, 0, 0, 1, 0);
		DoBuild(user, 0, 5);
		PlaySound_GetTower;
	}
	case(217){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 8 && Obj_GetValue(user, "gem_level") > 1){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -8, 0, 0, -1, 0);
		DoDamage(target, 0, 0, 9);
		PlaySound_Damage;
	}
	case(218){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 7){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -7, 0, 0, 0, 0);
		DoRessourceChange(target, -6, 0, 0, 0, 0, 0);
		DoBuild(user, 0, 5);
		PlaySound_GetTower;
	}
	case(219){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 10){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -10, 0, 0, 0, 0);
		DoBuild(user, 0, 11);
		PlaySound_GetTower;
	}
	case(220){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 5){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -5, 0, 0, -1, 0);
		DoRessourceChange(target, 0, 0, 0, 0, -1, 0);
		DoDamage(user, 0, 0, 7);
		DoDamage(target, 0, 0, 7);
		PlaySound_LoseLevel;
	}
	case(221){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 13){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -13, 0, 0, 0, 0);
		DoBuild(user, 0, 6);
		DoDamage(target, 0, 0, 4);
		PlaySound_GetTower;
	}
	case(222){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 4){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -10, -4, 0, 0, 0, 0);
		DoBuild(user, 0, 7);
		PlaySound_GetTower;
	}
	case(223){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 12){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -12, 0, 0, 0, 0);
		DoBuild(user, 3, 8);
		PlaySound_GetTower;
	}
	case(224){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 14){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -14, 0, 0, 0, 1);
		DoBuild(user, 0, 8);
		PlaySound_GetLevel;
	}
	case(225){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 16){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -16, 0, 0, 0, 0);
		DoBuild(user, 0, 15);
		PlaySound_GetTower;
	}
	case(226){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 15){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -15, 5, 0, 0, 0);
		DoBuild(user, 5, 10);
		PlaySound_GetTower;
	}
	case(227){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 17){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -17, 0, 0, 0, 0);
		DoBuild(user, 0, 12);
		DoDamage(target, 0, 6, 6);
		PlaySound_Damage;
	}
	case(228){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 21){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -21, 0, 0, 0, 0);
		DoBuild(user, 0, 20);
		PlaySound_GetTower;
	}
	case(229){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 8){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -8, 0, 0, 0, 0);
		DoBuild(user, 0, 11);
		DoDamage(user, 0, 6, 0);
		PlaySound_GetTower;
	}
	case(230){

		if(reason == 0){return 0;}
		if(Obj_GetValue(user, "tower") < Obj_GetValue(target, "tower")){DoBuild(user, 0, 2);}
		else{DoBuild(user, 0, 1);}
		PlaySound_GetTower;
	}
	case(231){

		if(reason == 0){return 0;}
		DoBuild(user, 0, 1);
		DoBuild(target, 0, 1);
		DoRessourceChange(user, 0, 3, 0, 0, 0, 0);
		PlaySound_GetTower;
	}
	case(232){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 5){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -5, -3, 0, 0, 0);
		DoDamage(target, 0, 0, 2);
		DoBuild(user, 0, 4);
		PlaySound_GetTower;
	}
	case(233){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 11){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -11, 0, 0, 0, 0);
		if(Obj_GetValue(user, "tower") > Obj_GetValue(target, "wall")){DoDamage(target, 0, 0, 8);}
		else{DoDamage(target, 8, 0, 0);}
		PlaySound_Damage;
	}
	case(234){

		if(reason == 0 && Obj_GetValue(user, "gem") >= 18){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 6, -18, 6, 0, 0, 0);
		DoBuild(user, 0, 13);
		PlaySound_GetTower;
	}
	/////////////MONSTER CARDS/////////////
	case(301){

		if(reason == 0){if(Obj_GetValue(user, "monster") > 0 || Obj_GetValue(target, "monster") > 0){return 0;}else{return 1;}}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -6, 0, 0, 0);
		DoRessourceChange(target, 0, 0, -6, 0, 0, 0);
		PlaySound_LoseRessources;
	}
	case(302){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 1){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -1, 0, 0, 0);
		DoDamage(target, 2, 0, 0);
		PlaySound_Damage;
		return 2;
		//PLAY AGAIN
	}
	case(303){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 1){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -3, -1, 0, 0, 0);
		DoDamage(target, 4, 0, 0);
		PlaySound_Damage;
	}
	case(304){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 3){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -3, 0, 0, 1);
		PlaySound_GetLevel;
	}
	case(305){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 2){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -2, 0, 0, 0);
		return 3;
		//PLAY AGAIN; DROP CARD
	}
	case(306){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 3){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -3, 0, 0, 0);
		DoDamage(user, 3, 0, 0);
		DoDamage(target, 6, 0, 0);
		PlaySound_Damage;
	}
	case(307){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 4){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -4, 0, 0, 0);
		DoDamage(user, 1, 0, 0);
		DoDamage(target, 0, 0, 3);
		PlaySound_Damage;
	}
	case(308){
		if(reason == 0 && Obj_GetValue(user, "monster") >= 6){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -6, 0, 0, 0);
		DoDamage(target, 2, 0, 0);
		PlaySound_Damage;
		return 2;
		//PLAY AGAIN
	}
	case(309){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 3){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -3, 0, 0, 0);
		DoDamage(target, 5, 0, 0);
		PlaySound_Damage;
	}
	case(310){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 5){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -5, 0, 0, 0);
		DoDamage(target, 4, 0, 0);
		DoBuild(user, 3, 0);
		PlaySound_Damage;
	}
	case(311){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 6){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -6, 0, 0, 0);
		DoDamage(target, 0, 0, 4);
		PlaySound_Damage;
	}
	case(312){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 7){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -7, 0, 0, 2);
		PlaySound_GetLevel;
	}
	case(313){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 8){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -8, 0, 0, 0);
		DoDamage(target, 2, 0, 0);
		DoBuild(user, 4, 2);
		PlaySound_GetTower;
	}
	case(314){

		if(reason == 0){return 0;}
		DoRessourceChange(user, 0, 0, 3, 0, 0, 1);
		DoRessourceChange(target, 0, 0, 0, 0, 0, 1);
		PlaySound_GetLevel;
	}
	case(315){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 5){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -5, 0, 0, 0);
		DoDamage(target, 6, 0 ,0);
		PlaySound_Damage;
	}
	case(316){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 6){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -6, 0, 0, 0);
		DoDamage(target, 7, 0 ,0);
		PlaySound_Damage;
	}
	case(317){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 6){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -6, 0, 0, 0);
		DoRessourceChange(target, 0, 0, -3, 0, 0, 0);
		DoDamage(target, 6, 0 ,0);
		PlaySound_Damage;
	}
	case(318){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 5){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, -5, -5, -10, 0, 0, 0);
		DoRessourceChange(target, -5, -5, -5, 0, 0, 0);
		DoDamage(target, 6, 0 ,0);
		PlaySound_LoseRessources;
	}
	case(319){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 8){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -8, 0, 0, 0);
		if(Obj_GetValue(target, "wall") == 0){DoDamage(target, 10, 0, 0);}
		else{DoDamage(target, 6, 0, 0);}
		PlaySound_Damage;
	}
	case(320){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 9){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -9, 0, 0, 0);
		DoDamage(target, 9, 0, 0);
		PlaySound_Damage;
	}
	case(321){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 11){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -11, 0, 0, 0);
		if(Obj_GetValue(target, "wall") > 0){DoDamage(target, 10, 0, 0);}
		else{DoDamage(target, 7, 0, 0);}
		PlaySound_Damage;
	}
	case(322){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 9){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -9, 0, 0, 0);
		if(Obj_GetValue(user, "gem_level") > Obj_GetValue(target, "gem_level")){DoDamage(target, 12, 0,0);}
		else{DoDamage(target, 8, 0, 0);}
		PlaySound_Damage;
	}
	case(323){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 10){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -10, 0, 0, 0);
		if(Obj_GetValue(user, "wall") > Obj_GetValue(target, "wall")){DoDamage(target, 0, 0, 6);}
		else{DoDamage(target, 6, 0, 0);}
		PlaySound_Damage;
	}
	case(324){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 14){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -14, 0, 0, 0);
		DoRessourceChange(target, 0, 0, -8, 0, 0, 0);
		DoDamage(target, 0, 0, 5);
		PlaySound_Damage;
	}
	case(325){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 11){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -11, 0, 0, 0);
		DoRessourceChange(target, 0, 0, 0, -1, 0, 0);
		DoDamage(target, 8, 0, 0);
		PlaySound_Damage;
	}
	case(326){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 7){if(Obj_GetValue(target, "gem") > 0 || Obj_GetValue(target, "stone") > 0){return 0;}else{return 1;}}else if(reason == 0){return 1;}
		let gems = ceil(min(10, Obj_GetValue(target, "gem")) / 2);
		let stones = ceil(min(5, Obj_GetValue(target, "stone")) / 2);
		DoRessourceChange(user, stones, gems, -12, 0, 0, 0);
		DoRessourceChange(target, -5, -10, 0, 0, 0, 0);
		PlaySound_GetRessources;
	}
	case(327){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 15){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -15, 0, 0, 0);
		DoDamage(target, 10, 0, 0);
		DoBuild(user, 4, 0);
		PlaySound_Damage;
	}
	case(328){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 17){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -17, 0, 0, 0);
		DoRessourceChange(target, 0, 0, -5, 0, 0, -1);
		DoDamage(target, 10, 0, 0);
		PlaySound_Damage;
	}
	case(329){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 25){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -25, 0, 0, 0);
		DoRessourceChange(target, 0, -10, 0, 0, 0, -1);
		DoDamage(target, 20, 0, 0);
		PlaySound_Damage;
	}
	case(330){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 2){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -2, 0, 0, 0);
		if(Obj_GetValue(user, "wall") > Obj_GetValue(target, "wall")){DoDamage(target, 3, 0, 0)}
		else{DoDamage(target, 2, 0, 0);}
		PlaySound_Damage;
	}
	case(331){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 2){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 1, -2, 0, 0, 0);
		DoDamage(target, 3, 0, 0);
		PlaySound_Damage;
	}
	case(332){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 4){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -4, 0, 0, 0);
		DoDamage(user, 0, 0, 3);
		DoDamage(target, 8, 0, 0);
		PlaySound_Damage;
	}
	case(333){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 13){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, -3, -13, 0, 0, 0);
		DoDamage(target, 13, 0, 0);
		PlaySound_Damage;
	}
	case(334){

		if(reason == 0 && Obj_GetValue(user, "monster") >= 18){return 0;}else if(reason == 0){return 1;}
		DoRessourceChange(user, 0, 0, -18, 0, 0, 0);
		DoDamage(target, 0, 0, 12);
		PlaySound_Damage;
	}

	return 0;
	RaiseError("PROCESS CARD DID NOT RETURN! CARDNUMBER: " ~ itoa(number) ~ " User: " ~ itoa(user) ~ " Target: " ~ itoa(target) ~ " Reason: " ~ itoa(reason));
}
