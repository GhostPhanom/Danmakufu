task PlayHoMM
{
	let HoMMphase = 0; //0 active, 1 end
	let turnphase = 0; //0 MovePhase, 1 AttackPhase, 2 AnimationPhase
	let MouseX = 0;
	let MouseY = 0;
	CheckMouse;
	
	
	let startx = 100;
	let starty = 50;
	let reihen = 10;//Die Felder sind mit 0 bis n-1 durchnummeriert
	let zeilen = 10;
	let blockwidth = 30;
	let gapwidth = 10;
	
	let fighterarray = [];
	let fighternummer = [];
	let activeFighter = -1;
	let activeFighterReihe = -1;
	let activeFighterZeile = -1;
	let activeFighterTyp = -1;
	let activeFighterBewegung = -1;
	
	CreateCommonDataArea("HoMM");
	ascent(i in 0..zeilen)
	{
		let array = [];
		loop(reihen)
		{
			array = array ~ [-1];
		}
		SetAreaCommonData("HoMM", ToString(i), array);
	}
	
	let BG = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(BG, "");
	ObjSprite2D_SetSourceRect(BG, 0, 0, 0, 0);
	ObjSprite2D_SetDestRect(BG, 0, 0, 640, 480);
	ObjRender_SetColor(BG, 50, 50, 50);
	Obj_SetRenderPriorityI(BG, 85);
	
	ascent(i in 0..zeilen)//Nachschlageliste für die FelderIDs
	{
		let array = [];
		
		ascent(j in 0..reihen)
		{
			array = array ~ [CreateField(startx + blockwidth / 2 + (gapwidth + blockwidth) * j, starty + blockwidth / 2 + (gapwidth + blockwidth) * i, j, i)];
		}
		SetAreaCommonData("HoMM", ToString(i), array);
	}
	

	//activeFighterBewegung = -1;
	wait(180);
	CreateEnemy(0, 3, 8, 0);
	CreateEnemy(0, 5, 8, 1);
	CreateEnemy(1, 4, 3, 1);
	activeFighter = fighterarray[0];
	activeFighterReihe = Obj_GetValueD(activeFighter, "Reihe", -1);
	activeFighterZeile = Obj_GetValueD(activeFighter, "Zeile", -1);
	activeFighterTyp = Obj_GetValueD(activeFighter, "Typ", -1);
	if(Obj_GetValueD(activeFighter, "Typ", -1) == -1){activeFighterBewegung = 0;}
	if(Obj_GetValueD(activeFighter, "Typ", -1) == 0){activeFighterBewegung = 3;}
	if(Obj_GetValueD(activeFighter, "Typ", -1) == 1){activeFighterBewegung = 5;}
	UpdateEnemyFieldPositionData;
	//Obj_Delete(GetFieldID(7, 3));
	
	
	function UpdateEnemyFieldPositionData
	{
		ascent(i in 0..zeilen)
		{
			let array = GetAreaCommonData("HoMM", ToString(i), [-100]);
			if(array[0] == -100){RaiseError("AreaCommonData: 'HoMM' does not exist!!!");}
			
			ascent(j in 0..reihen)
			{
				Obj_SetValue(array[j], "Figur", -1);
				Obj_SetValue(array[j], "Fraktion", -1);
				Obj_SetValue(array[j], "Typ", -1);
			}
		}
		
		ascent(i in 0..length(fighterarray))
		{
			let fieldID = GetFieldID(Obj_GetValue(fighterarray[i], "Reihe"), Obj_GetValue(fighterarray[i], "Zeile"));
			Obj_SetValue(fieldID, "Figur", fighterarray[i]);
			Obj_SetValue(fieldID, "Fraktion", Obj_GetValueD(fighterarray[i], "Fraktion", -10));
			Obj_SetValue(fieldID, "Typ", Obj_GetValueD(fighterarray[i], "Typ", -10));
		}
	}
	
	function CreateEnemy(fraktion, reihe, zeile, gegnertyp)
	{
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(obj, "");
		ObjSprite2D_SetSourceRect(obj, 0, 0, 10, 10);
		ObjSprite2D_SetDestRect(obj, -5, -5, 5, 5);
		Obj_SetRenderPriorityI(obj, 87);
		//ObjSprite2D_SetDestCenter(obj);
		if(fraktion == 0)//Freundlich
		{
			ObjRender_SetColor(obj, 128, 128, 128);
		}
		else//Feindlich
		{
			ObjRender_SetColor(obj, 50, 50, 255);
		}
		
		let startfield = GetFieldID(reihe, zeile);
		ObjRender_SetPosition(obj, ObjRender_GetX(startfield), ObjRender_GetY(startfield), 0);
		Obj_SetValue(obj, "Reihe", reihe);
		Obj_SetValue(obj, "Zeile", zeile);
		Obj_SetValue(obj, "Fraktion", fraktion);
		Obj_SetValue(obj, "Typ", gegnertyp);
		
		fighterarray = fighterarray ~ [obj];
	}
	
	function CreateField(x, y, reihe, zeile)
	{
		let xborderL = x - blockwidth / 2;
		let xborderR = x + blockwidth / 2;
		let yborderT = y - blockwidth / 2;
		let yborderB = y + blockwidth / 2;
		
		let objf = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(objf, "");
		ObjSprite2D_SetSourceRect(objf, 0, 0, blockwidth, blockwidth);
		ObjSprite2D_SetDestRect(objf, blockwidth / -2, blockwidth / -2, blockwidth / 2, blockwidth / 2);
		ObjRender_SetPosition(objf, x, y, 1);
		Obj_SetRenderPriorityI(objf, 86);
		ObjRender_SetColor(objf, 0, 0, 130);
		
		Obj_SetValue(objf, "Reihe", reihe);
		Obj_SetValue(objf, "Zeile", zeile);
		
		Obj_SetValue(objf, "Figur", -10);
		Obj_SetValue(objf, "Fraktion", -10);
		Obj_SetValue(objf, "Typ", -10);
		
		Check;
		
		return objf;
		
		task Check
		{
			while(HoMMphase == 0)
			{
				if(turnphase == 0)
				{
					if(activeFighter == Obj_GetValueD(objf, "Figur", -1))
					{
						ObjRender_SetColor(objf, 220, 220, 220);
						Obj_SetVisible(objf, true);
					}
					else if(Obj_GetValueD(objf, "Fraktion", -1))
					{
						//if() Hier Bewegungsabfrage
						if(absolute(reihe - activeFighterReihe) +  absolute(zeile - activeFighterZeile) <= activeFighterBewegung)
						//if(true)
						{
							if(MouseX > xborderL && MouseX < xborderR && MouseY > yborderT && MouseY < yborderB)
							{
								ObjRender_SetColor(objf, 150, 255, 150);
								if(GetMouseState(MOUSE_LEFT) == KEY_PUSH)
								{
									RaiseError("SooS Reihe: " ~ ToString(reihe) ~ " Zeile: " ~ ToString(zeile));
								}
							}
							else
							{
								ObjRender_SetColor(objf, 0, 255, 0);
							}
							Obj_SetVisible(objf, true);
						}
					}
					else
					{
						Obj_SetVisible(objf, false);
					}
				}
				else if(turnphase == 1)
				{
					if(activeFighter == Obj_GetValueD(objf, "Fighter", -1))
					{
						ObjRender_SetColor(objf, 220, 220, 220);
						Obj_SetVisible(objf, true);
					}
					else if(Obj_GetValueD(objf, "Fraktion", 1))
					{
						//if() Hier Reichweitenabfrage
						if(true)
						{
							if(MouseX > xborderL && MouseX < xborderR && MouseY > yborderT && MouseY < yborderB)
							{
								ObjRender_SetColor(objf, 255, 150, 150);
							}
							else
							{
								ObjRender_SetColor(objf, 255, 0, 0);
							}
							Obj_SetVisible(objf, true);
						}
					}
					else
					{
						Obj_SetVisible(objf, false);
					}
				}
				else
				{
					Obj_SetVisible(objf, false);
				}
				yield;
			}
			Obj_Delete(objf);
		}
	}
	
	function CheckEnemyArray(obj, zeile, reihe) //gibt aus ob auf dem angegebenen Feld eine Figur steht
	{
		let ergebnis = false;
		ascent(i in 0.. length(fighterarray))
		{
			if(fighterarray[i] == obj && Obj_GetValueD(fighterarray[i], "Zeile", -1) == zeile && Obj_GetValueD(fighterarray[i], "Reihe", -1) == reihe)
			{
				ergebnis = true;
			}
		}
		return ergebnis;
	}
	
	function GetFieldID(reihe, zeile)
	{
		let array = GetAreaCommonData("HoMM", ToString(zeile), [-10]);
		if(array[0] == -10){RaiseError("Ungültiges Feld angefragt!")}
		return array[reihe];
	}
	
	task CheckMouse
	{
		let counter = CreateTestCounter(10, 50);
		Obj_SetRenderPriorityI(counter, 90);
		while(HoMMphase == 0)
		{
			ObjText_SetText(counter, MouseX);
			MouseX = GetMouseX;
			MouseY = GetMouseY;
			yield;
		}
	}
}


