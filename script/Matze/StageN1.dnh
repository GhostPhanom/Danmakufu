#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Grusel N1"]
#Text["Grusel N1" ]

#include "./Bulletsheet/Shotconstants.dnh"
#include "./Generalfunction.dnh"
#include "./selibrary.txt"

#include "./effectlibrary.dnh"

#include "./DokiDoki.dnh"

let objBoss;
let objScene = GetEnemyBossSceneObjectID();
let bossX=0;
let bossY=0;


@Event
{
    alternative(GetEventType())
    case(EV_REQUEST_LIFE)
    {
        SetScriptResult(2000);
    }
    case(EV_REQUEST_TIMER)
    {
        SetScriptResult(999);
    }
    case(EV_REQUEST_SPELL_SCORE)
    {
        SetScriptResult(1000000);
    }
}

@Initialize
{
    objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
    ObjEnemy_Regist(objBoss);
    ObjMove_SetX(objBoss,360);
    ObjMove_SetDestAtWeight(objBoss, GetCenterX, GetCenterY-80, 20,3); //Move the boss to the specified location
    ObjEnemy_SetDamageRate(objBoss,0,0);
	SetPlayerLife(99);
	TDrawLoop;
	TFinalize;
	MainTask;
}

@MainLoop
{
	bossX=ObjMove_GetX(objBoss);
	bossY=ObjMove_GetY(objBoss);
    ObjEnemy_SetIntersectionCircleToShot(objBoss,ObjMove_GetX(objBoss),ObjMove_GetY(objBoss),32);
    ObjEnemy_SetIntersectionCircleToPlayer(objBoss,ObjMove_GetX(objBoss),ObjMove_GetY(objBoss),24);
    yield;
}


task MainTask
{
	
	wait(120);
	//cutintest;
	//RenderSBG1(0,255);
	//LenenSpellcardring(objBoss,4,2,50,120);
	//wait(300);
	//Firetask;
	//CreatePoem;
	//Muster2;
	//Epicycloid([objBoss], 100, 6.5, 2, 10, 10, 0, 10);
	Rosettet([objBoss], 100, 4, 10, 10, 0, 1);
	yield;
}



function CreateTestCounter(x, y)//Creates a simple Textobj to use it as a debug field
{
	let obj = ObjText_Create;
	ObjText_SetFontSize(obj, 20);
	ObjRender_SetPosition(obj, x, y, 0);
	Obj_SetRenderPriorityI(obj, 79);
	return obj;
}

task Rosettet(originpoint, shotcount, k, scalex, scaley, correctangle, n) //originpoint can be one Obj or x and y !!!IS ALWAYS AN ARRAY!!!; shotcount; parameter; scalex; scaley; Rotationsangle of the entire figue;wait timer
{
	//Rosette([objBoss], 100, 3, 1, 0.5, 10, 10, 270, 1); Example
	let origin = originpoint[0];
	if(length(originpoint) == 2)//static position
	{
		origin = CreateShotA1(originpoint[0], originpoint[1], 0, 0, -1, 0);
		ObjShot_SetSpellResist(origin, true);
		ObjShot_Regist(origin);
		ObjShot_SetIntersectionEnable(origin, false);
	}
	
	let t = 0;//Laufvariable
	let a = 360 / shotcount;//Steigerung der Variable
	
    loop 
	{
		let x = 4 * k * cos(t) * (sin(t) ^ 2) * sin(t);
		let y = 4 * k * cos(t) * (sin(t) ^ 2) * sin(t);
		
		let obj = CreateShotA2(ObjMove_GetX(origin) + scalex * x, ObjMove_GetY(origin) + scaley * y, 0, t*2, 0.00, 3, 50, 10);
		
		let dis = GetObjectDistance(origin, obj);
		let angle = GetAngleTo(origin, obj);
		ObjMove_SetPosition(obj, ObjMove_GetX(origin) + dis * cos(angle + correctangle), ObjMove_GetY(origin) + dis * sin(angle + correctangle));
		
		t += a;
		if(t >= 3600)
		{
			if(length(originpoint) == 2){Obj_Delete(origin);}
			return;
		}
        wait(n);
    }
}

task Rosette(originpoint, shotcount, k, scalex, scaley, correctangle, n) //originpoint can be one Obj or x and y !!!IS ALWAYS AN ARRAY!!!; shotcount; parameter; scalex; scaley; Rotationsangle of the entire figue;wait timer
{
	//Rosette([objBoss], 100, 3, 1, 0.5, 10, 10, 270, 1); Example
	let origin = originpoint[0];
	if(length(originpoint) == 2)//static position
	{
		origin = CreateShotA1(originpoint[0], originpoint[1], 0, 0, -1, 0);
		ObjShot_SetSpellResist(origin, true);
		ObjShot_Regist(origin);
		ObjShot_SetIntersectionEnable(origin, false);
	}
	
	let t = 0;//Laufvariable
	let a = 360 / shotcount;//Steigerung der Variable
	
    loop 
	{
		let x = cos(k * t) * cos(t);
		let y = cos(k * t) * sin(t);
		
		let obj = CreateShotA2(ObjMove_GetX(origin) + scalex * x, ObjMove_GetY(origin) + scaley * y, 0, t*2, 0.00, 3, 50, 10);
		
		let dis = GetObjectDistance(origin, obj);
		let angle = GetAngleTo(origin, obj);
		ObjMove_SetPosition(obj, ObjMove_GetX(origin) + dis * cos(angle + correctangle), ObjMove_GetY(origin) + dis * sin(angle + correctangle));
		
		t += a;
		if(t >= 3600)
		{
			if(length(originpoint) == 2){Obj_Delete(origin);}
			return;
		}
        wait(n);
    }
}

task Epicycloid(originpoint, shotcount, R, r, scalex, scaley, correctangle, n) //originpoint can be one Obj or x and y !!!IS ALWAYS AN ARRAY!!!; shotcount; parameter; parameter; scalex; scaley; Rotationsangle of the entire figue;wait timer
{
	//Epicycloid([objBoss], 100, 3, 1, 10, 10, 270, 1); Example
	let origin = originpoint[0];
	if(length(originpoint) == 2)//static position
	{
		origin = CreateShotA1(originpoint[0], originpoint[1], 0, 0, -1, 0);
		ObjShot_SetSpellResist(origin, true);
		ObjShot_Regist(origin);
		ObjShot_SetIntersectionEnable(origin, false);
	}
	
	let t = 0;//Laufvariable
	let a = 360 / shotcount;//Steigerung der Variable
	
	let counter1 = CreateTestCounter(50,50);
	let counter2 = CreateTestCounter(50,100);
	let counter3 = CreateTestCounter(50,150);
	let counter4 = CreateTestCounter(50,200);
	let counter5 = CreateTestCounter(50,250);
	let startbullet = [0, 0];
	
	
    loop 
	{
		let x = (R + r) * cos(t) - r * cos((R + r) / r * t);
		let y = (R + r) * sin(t) - r * sin((R + r) / r * t);
		
		let obj = CreateShotA2(ObjMove_GetX(origin) + scalex * x, ObjMove_GetY(origin) + scaley * y, 0, t*2, 0.00, 3, 50, 10);
		
		let dis = GetObjectDistance(origin, obj);
		let angle = GetAngleTo(origin, obj);
		ObjMove_SetPosition(obj, ObjMove_GetX(origin) + dis * cos(angle + correctangle), ObjMove_GetY(origin) + dis * sin(angle + correctangle));
		if(t == 0){startbullet = [x, y];}
		
		ObjText_SetText(counter1, ToString(absolute(x)));
		ObjText_SetText(counter2, ToString(absolute(y)));
		ObjText_SetText(counter3, ToString(absolute(startbullet[0])));
		ObjText_SetText(counter4, ToString(absolute(startbullet[1])));
		ObjText_SetText(counter5, ToString(t));
		
		
		if(CompareFloats(startbullet[0], absolute(x)) == true && CompareFloats(startbullet[1], absolute(y)) == true && t !=0)
		{
			if(length(originpoint) == 2){Obj_Delete(origin);}
			return;
		}
		/*
		ObjText_SetText(counter1, ToString(x));
		ObjText_SetText(counter2, ToString(y));
		if(t >= 360 && R % 2 == 0)
		{
			if(length(originpoint) == 2){Obj_Delete(origin);}
			return;
		}
		else if(t >= 3600 + 360 * (R % 2))
		{
			if(length(originpoint) == 2){Obj_Delete(origin);}
			return;
		}*/
		t += a;
        wait(n);
    }
}

task Epitrochoid(originpoint, shotcount, R, r, d, scalex, scaley, correctangle, n) //originpoint can be one Obj or x and y !!!IS ALWAYS AN ARRAY!!!; shotcount; parameter; parameter; parameter; scalex; scaley; Rotationsangle of the entire figue;wait timer
{
	//Epitrochoid([objBoss], 100, 3, 1, 0.5, 10, 10, 270, 1); Example
	let origin = originpoint[0];
	if(length(originpoint) == 2)//static position
	{
		origin = CreateShotA1(originpoint[0], originpoint[1], 0, 0, -1, 0);
		ObjShot_SetSpellResist(origin, true);
		ObjShot_Regist(origin);
		ObjShot_SetIntersectionEnable(origin, false);
	}
	
	let t = 0;//Laufvariable
	let a = 360 / shotcount;//Steigerung der Variable
	
    loop 
	{
		let x = (R + r) * cos(t) - d * cos((R + r) / r * t);
		let y = (R + r) * sin(t) - d * sin((R + r) / r * t);
		
		let obj = CreateShotA2(ObjMove_GetX(origin) + scalex * x, ObjMove_GetY(origin) + scaley * y, 0, t*2, 0.00, 3, 50, 10);
		
		let dis = GetObjectDistance(origin, obj);
		let angle = GetAngleTo(origin, obj);
		ObjMove_SetPosition(obj, ObjMove_GetX(origin) + dis * cos(angle + correctangle), ObjMove_GetY(origin) + dis * sin(angle + correctangle));
		
		t += a;
		if(t >= 360)
		{
			if(length(originpoint) == 2){Obj_Delete(origin);}
			return;
		}
        wait(n);
    }
}

task Hypotrochoid(originpoint, shotcount, R, r, d, scalex, scaley, correctangle, n) //originpoint can be one Obj or x and y !!!IS ALWAYS AN ARRAY!!!; shotcount; parameter; parameter; parameter; scalex; scaley; Rotationsangle of the entire figue; wait timer
{
	//Hypotrochoid([objBoss], 100, 1, 3, 6, 10, 10, 270, 1); Example
	let origin = originpoint[0];
	if(length(originpoint) == 2)//static position
	{
		origin = CreateShotA1(originpoint[0], originpoint[1], 0, 0, -1, 0);
		ObjShot_SetSpellResist(origin, true);
		ObjShot_Regist(origin);
		ObjShot_SetIntersectionEnable(origin, false);
	}
	
	let t = 0;//Laufvariable
	let a = 360 * r / shotcount;//Steigerung der Variable
	
    loop 
	{
		let x = (R - r) * cos(t) + d * cos((R - r) / r * t);
		let y = (R - r) * sin(t) + d * sin((R - r) / r * t);
		
		let obj = CreateShotA2(ObjMove_GetX(origin) + scalex * x, ObjMove_GetY(origin) + scaley * y, 0, t*2, 0.00, 3, 50, 10);
		
		let dis = GetObjectDistance(origin, obj);
		let angle = GetAngleTo(origin, obj);
		ObjMove_SetPosition(obj, ObjMove_GetX(origin) + dis * cos(angle + correctangle), ObjMove_GetY(origin) + dis * sin(angle + correctangle));
		
		t += a;
		if(t >= 360 * r)
		{
			if(length(originpoint) == 2){Obj_Delete(origin);}
			return;
		}
        wait(n);
    }
}


function CompareFloats (input1, input2) 
{
	let EPSILON = 0.0001;
    let diff = input1 - input2;
	if(diff < EPSILON && -diff < EPSILON)
	{
		return true;
	}
    return false;
}

//let x = ((-58/7 * sinr(14/9 - 16*t) - 61/11 * sinr(14/9 - 12*t) - 43/8 * sinr(3/2 - 10*t) - 108/7 * sinr(11/7 - 8*t) - 193/9 * sinr(14/9 - 6*t) - 53/4 * sinr(4/3 - 5*t) + 18741/4 * sinr(t + 11/7) + 356/5 * sinr(2*t + 47/10) + 359/5 * sinr(3*t + 11/7) + 659/47 * sinr(4*t + 33/7) + 237/7 * sinr(7*t + 11/7) + 445/7 * sinr(9*t + 8/5) + 147/5 * sinr(11*t + 8/5) + 13/2 * sinr(13*t + 3/2) + 14/9 * sinr(14*t + 9/7) + 3/4 * sinr(15*t + 3/5) - 3448/7) * theta(75 * pi - t) * theta(t - 71 * pi) + (18175/9 * sinr(t + 11/7) + 35/3 * sinr(2*t + 14/9) + 1195/6 * sinr(3*t + 11/7) + 199/22 * sinr(4*t + 11/7) + 16851/7) * theta(71 * pi - t) * theta(t - 67 * pi) + (-27/5 * sinr(14/9 - 8*t) - 23/3 * sinr(17/11 - 6*t) - 39/5 * sinr(14/9 - 4*t) + 12163/6 * sinr(t + 11/7) + 89/5 * sinr(2*t + 11/7) + 595/3 * sinr(3*t + 11/7) + 367/5 * sinr(5*t + 11/7) + 116/3 * sinr(7*t + 11/7) - 19148/5) * theta(67 * pi - t) * theta(t - 63 * pi) + (-881/7 * sinr(14/9 - 16*t) - 277/4 * sinr(14/9 - 12*t) - 117 * sinr(11/7 - 11*t) - 166 * sinr(11/7 - 10*t) - 624/7 * sinr(11/7 - 9*t) - 713/5 * sinr(11/7 - 4*t) - 353/5 * sinr(11/7 - 3*t) - 13/5 * sinr(11/7 - 2*t) + 199/4 * sinr(t + 11/7) + 18/5 * sinr(5*t + 37/8) + 437/10 * sinr(6*t + 8/5) + 155/12 * sinr(7*t + 5/3) + 23/12 * sinr(8*t + 13/6) + 121/8 * sinr(13*t + 14/3) + 760/9 * sinr(14*t + 8/5) + 75/4 * sinr(15*t + 14/9) + 797/7 * sinr(17*t + 8/5) - 5461/8) * theta(63 * pi - t) * theta(t - 59 * pi) + (-81/2 * sinr(3/2 - 6*t) - 209/16 * sinr(13/14 - 4*t) - 103/5 * sinr(9/8 - 2*t) + 24415/7 * sinr(t + 11/7) + 1571/3 * sinr(3*t + 11/7) + 463/4 * sinr(5*t + 11/7) + 428/7 * sinr(7*t + 11/7) + 172/9 * sinr(8*t + 11/8) + 95/3 * sinr(9*t + 3/2) + 284/7 * sinr(10*t + 37/8) - 10097/33) * theta(59 * pi - t) * theta(t - 55 * pi) + (-172/3 * sinr(11/7 - 13*t) - 807/7 * sinr(11/7 - 9*t) + 864/5 * sinr(t + 11/7) + 6045/7 * sinr(2*t + 11/7) + 136/3 * sinr(3*t + 14/9) + 25/6 * sinr(4*t + 30/7) + 657/8 * sinr(5*t + 11/7) + 8218/33 * sinr(6*t + 11/7) + 617/5 * sinr(7*t + 33/7) + 199/2 * sinr(8*t + 11/7) + 7744/29 * sinr(10*t + 11/7) + 235/4 * sinr(11*t + 14/9) + 335/6 * sinr(12*t + 33/7) + 683/5 * sinr(14*t + 33/7) + 42 * sinr(15*t + 11/7) + 285/8 * sinr(16*t + 11/7) + 280/31 * sinr(17*t + 47/10) + 427/4 * sinr(18*t + 11/7) + 282/5 * sinr(19*t + 11/7) + 32/5 * sinr(20*t + 14/3) + 17 * sinr(21*t + 11/7) - 2441/4) * theta(55 * pi - t) * theta(t - 51 * pi) + (-173/3 * sinr(20/13 - 8*t) - 80/3 * sinr(2/5 - 4*t) + 5601/5 * sinr(t + 11/7) + 173/8 * sinr(2*t + 3/4) + 1608/7 * sinr(3*t + 19/13) + 372/5 * sinr(5*t + 9/7) + 155/7 * sinr(6*t + 3/4) + 361/4 * sinr(7*t + 3/2) + 1373/28 * sinr(9*t + 14/3) + 122/5 * sinr(10*t + 35/8) + 179/10 * sinr(11*t + 29/7) + 147/10 * sinr(12*t + 12/5) + 53/4 * sinr(13*t + 13/6) + 83/5 * sinr(14*t + 17/10) - 5417/8) * theta(51 * pi - t) * theta(t - 47 * pi) + (-249/10 * sinr(13/9 - 6*t) - 2573/7 * sinr(11/7 - 4*t) - 76/3 * sinr(14/9 - t) + 2069/4 * sinr(2*t + 11/7) + 6079/9 * sinr(3*t + 11/7) + 1049/9 * sinr(5*t + 11/7) + 2623/46 * sinr(7*t + 8/5) + 39/2 * sinr(8*t + 3/2) + 79/2 * sinr(9*t + 14/3) + 91/5 * sinr(10*t + 33/7) + 99/4 * sinr(11*t + 8/5) + 30058/9) * theta(47 * pi - t) * theta(t - 43 * pi) + (-535/17 * sinr(14/9 - 10*t) - 1566/7 * sinr(11/7 - 4*t) + 1435/8 * sinr(t + 8/5) + 2383/9 * sinr(2*t + 8/5) + 2861/5 * sinr(3*t + 8/5) + 145/3 * sinr(5*t + 11/7) + 297/7 * sinr(6*t + 8/5) + 26/5 * sinr(7*t + 25/6) + 791/10 * sinr(8*t + 13/8) + 51/5 * sinr(9*t + 32/7) + 265/6 * sinr(11*t + 8/5) + 20/3 * sinr(12*t + 9/2) - 31695/7) * theta(43 * pi - t) * theta(t - 39 * pi) + (-151/7 * sinr(6/7 - 7*t) + 7955/2 * sinr(t + 5/3) + 411/8 * sinr(2*t + 1/9) + 4576/15 * sinr(3*t + 11/6) + 107/5 * sinr(4*t + 17/5) + 110/9 * sinr(5*t + 63/31) + 55/9 * sinr(6*t + 18/5) - 4994/7) * theta(39 * pi - t) * theta(t - 35 * pi) + (3476/5 * sinr(t + 4/3) + 433/5 * sinr(2*t + 25/6) + 579/7 * sinr(3*t + 5/3) + 113/5 * sinr(4*t + 23/5) + 6084/5) * theta(35 * pi - t) * theta(t - 31 * pi) + (-619/7 * sinr(9/7 - 3*t) + 802 * sinr(t + 37/8) + 421/5 * sinr(2*t + 11/7) - 23264/9) * theta(31 * pi - t) * theta(t - 27 * pi) + (-71/4 * sinr(7/9 - 9*t) - 289/9 * sinr(6/7 - 8*t) - 922/3 * sinr(1/10 - 3*t) - 3601/36 * sinr(5/4 - 2*t) + 30703/7 * sinr(t + 1) + 706/9 * sinr(4*t + 5/6) + 265/14 * sinr(5*t + 11/5) + 278/9 * sinr(6*t + 1/8) + 341/10 * sinr(7*t + 4/5) - 605) * theta(27 * pi - t) * theta(t - 23 * pi) + (10764/7 * sinr(t + 40/9) + 519/4 * sinr(2*t + 28/11) + 707/4 * sinr(3*t + 27/7) + 685/14 * sinr(4*t + 21/10) + 355/7 * sinr(5*t + 11/3) + 128/3 * sinr(6*t + 7/5) + 96/5 * sinr(7*t + 29/9) + 272/9 * sinr(8*t + 18/17) + 71/8 * sinr(9*t + 16/5) + 127/7 * sinr(10*t + 4/7) + 71/9 * sinr(11*t + 30/7) + 46/3 * sinr(12*t + 2/7) - 3661/6) * theta(23 * pi - t) * theta(t - 19 * pi) + (-115/7 * sinr(1/7 - 13*t) - 462/13 * sinr(1/6 - 9*t) - 353/3 * sinr(6/5 - 7*t) - 6463/6 * sinr(5/6 - 2*t) + 340/3 * sinr(8*t) + 22885/12 * sinr(t + 6/5) + 443/7 * sinr(3*t + 19/5) + 295/14 * sinr(4*t + 5/2) + 1466/7 * sinr(5*t + 27/10) + 288/5 * sinr(6*t + 13/4) + 265/8 * sinr(10*t + 16/7) + 60/7 * sinr(11*t + 21/5) + 930/19 * sinr(12*t + 16/7) - 5475/8) * theta(19 * pi - t) * theta(t - 15 * pi) + (3299/2 * sinr(t + 7/6) + 377/5 * sinr(2*t + 7/6) + 139/6 * sinr(3*t + 2/7) + 10166/7) * theta(15 * pi - t) * theta(t - 11 * pi) + (-30228/19 * sinr(16/15 - t) + 200/7 * sinr(2*t + 35/12) + 316/9 * sinr(3*t + 7/3) + 178/5 * sinr(4*t + 12/7) + 365/9 * sinr(5*t + 21/5) + 18/7 * sinr(6*t + 11/9) - 20196/7) * theta(11 * pi - t) * theta(t - 7 * pi) + (-257/4 * sinr(23/24 - 15*t) - 2071/4 * sinr(1/3 - 3*t) - 99793/36 * sinr(10/9 - 2*t) + 51290/7 * sinr(t + 1) + 6064/9 * sinr(4*t + 3/4) + 2497/5 * sinr(5*t + 16/9) + 2413/8 * sinr(6*t + 11/4) + 5585/21 * sinr(7*t + 1) + 493/3 * sinr(8*t + 5/3) + 859/11 * sinr(9*t + 3/2) + 462/5 * sinr(10*t + 26/7) + 421/4 * sinr(11*t + 2) + 735/8 * sinr(12*t + 5/2) + 63 * sinr(13*t + 8/3) + 425/7 * sinr(14*t + 71/18) - 4853/8) * theta(7 * pi - t) * theta(t - 3 * pi) + (-4027/7 * sinr(4/3 - 5*t) + 55361/7 * sinr(t + 1) + 2324/3 * sinr(2*t + 31/16) + 705/7 * sinr(3*t + 11/9) + 2194/11 * sinr(4*t + 26/25) + 977/9 * sinr(6*t + 13/4) + 284 * sinr(7*t + 27/7) + 1026/7 * sinr(8*t + 7/5) + 677/8 * sinr(9*t + 19/7) + 1023/8 * sinr(10*t + 5/9) - 4475/8) * theta(3 * pi - t) * theta(t + pi)) * theta(0.5^(sgn(sinr(t/2)))); 
		//let y = ((-59 * sinr(14/9 - 16*t) - 5/2 * sinr(4/3 - 15*t) - 466/7 * sinr(17/11 - 14*t) - 14/5 * sinr(14/9 - 13*t) - 265/12 * sinr(11/7 - 12*t) - 185/2 * sinr(11/7 - 8*t) - 38/3 * sinr(11/7 - 7*t) - 2523/8 * sinr(11/7 - 6*t) - 7094/7 * sinr(11/7 - 4*t) - 451/5 * sinr(14/9 - 3*t) + 581/5 * sinr(t + 11/7) + 707/6 * sinr(2*t + 8/5) + 289/36 * sinr(5*t + 4/3) + 93/7 * sinr(9*t + 12/7) + 592/9 * sinr(10*t + 13/8) + 137/9 * sinr(11*t + 14/3) - 63797/8) * theta(75 * pi - t) * theta(t - 71 * pi) + (-311/8 * sinr(11/7 - 4*t) - 1619/5 * sinr(11/7 - 2*t) - 471/4 * sinr(11/7 - t) + 107/3 * sinr(3*t + 11/7) + 4487/3) * theta(71 * pi - t) * theta(t - 67 * pi) + (-143/6 * sinr(11/7 - 6*t) - 709/10 * sinr(11/7 - 4*t) - 3736/15 * sinr(11/7 - 2*t) + 3961/30 * sinr(t + 11/7) + 27/7 * sinr(3*t + 33/7) + 145/6 * sinr(5*t + 33/7) + 52/7 * sinr(7*t + 33/7) + 37/6 * sinr(8*t + 33/7) + 19529/14) * theta(67 * pi - t) * theta(t - 63 * pi) + (-11/5 * sinr(14/9 - 17*t) - 161/20 * sinr(14/9 - 16*t) - 52/7 * sinr(11/7 - 12*t) - 3/2 * sinr(3/2 - 11*t) - 67/10 * sinr(14/9 - 10*t) - 13/6 * sinr(14/9 - 4*t) + 573 * sinr(t + 11/7) + 172/19 * sinr(2*t + 33/7) + 185/6 * sinr(3*t + 11/7) + 179/7 * sinr(5*t + 11/7) + 37/9 * sinr(6*t + 11/7) + 79/5 * sinr(7*t + 11/7) + 14/3 * sinr(8*t + 11/7) + 107/7 * sinr(9*t + 8/5) + 7/4 * sinr(13*t + 8/5) + 11/12 * sinr(14*t + 32/7) + 27/10 * sinr(15*t + 8/5) - 4217/3) * theta(63 * pi - t) * theta(t - 59 * pi) + (35/3 * sinr(t + 33/7) + 550/9 * sinr(2*t + 47/10) + 255/4 * sinr(3*t + 17/11) + 979/6 * sinr(4*t + 14/9) + 245/9 * sinr(5*t + 3/2) + 101/4 * sinr(6*t + 17/11) + 820/11 * sinr(7*t + 3/2) + 437/7 * sinr(8*t + 3/2) + 339/7 * sinr(9*t + 14/3) + 75/4 * sinr(10*t + 3/2) - 17567/5) * theta(59 * pi - t) * theta(t - 55 * pi) + (-25/4 * sinr(11/7 - 19*t) - 621/5 * sinr(11/7 - 5*t) + 498/5 * sinr(t + 11/7) + 11/8 * sinr(2*t + 22/5) + 2609/15 * sinr(3*t + 11/7) + 149/3 * sinr(4*t + 8/5) + 52/5 * sinr(6*t + 14/3) + 271/10 * sinr(7*t + 14/9) + 1112/7 * sinr(8*t + 11/7) + 557/6 * sinr(9*t + 33/7) + 109/8 * sinr(10*t + 14/3) + 403/6 * sinr(11*t + 33/7) + 113/3 * sinr(12*t + 8/5) + 609/8 * sinr(13*t + 11/7) + 11/8 * sinr(14*t + 9/2) + 193/7 * sinr(15*t + 11/7) + 117/10 * sinr(16*t + 11/7) + 204/5 * sinr(17*t + 33/7) + 77/10 * sinr(18*t + 33/7) + 401/20 * sinr(20*t + 33/7) + 56/3 * sinr(21*t + 33/7) - 56953/7) * theta(55 * pi - t) * theta(t - 51 * pi) + (-459/7 * sinr(1/8 - 13*t) - 459/5 * sinr(7/5 - 11*t) + 89/5 * sinr(t + 31/15) + 4109/11 * sinr(2*t + 14/3) + 23 * sinr(3*t + 23/8) + 2692/23 * sinr(4*t + 40/9) + 968/13 * sinr(5*t + 9/4) + 1201/6 * sinr(6*t + 11/6) + 1017/5 * sinr(7*t + 9/5) + 5035/8 * sinr(8*t + 14/3) + 1697/9 * sinr(9*t + 23/5) + 996/7 * sinr(10*t + 13/8) + 166 * sinr(12*t + 4/3) + 736/5 * sinr(14*t + 28/27) - 29201/5) * theta(51 * pi - t) * theta(t - 47 * pi) + (7611/8 * sinr(t + 11/7) + 2098/3 * sinr(2*t + 11/7) + 4549/5 * sinr(3*t + 11/7) + 3369/5 * sinr(4*t + 33/7) + 484/5 * sinr(5*t + 14/3) + 125/9 * sinr(6*t + 13/8) + 402/5 * sinr(7*t + 23/5) + 267/2 * sinr(8*t + 14/3) + 730/7 * sinr(9*t + 37/8) + 2056/17 * sinr(10*t + 14/3) + 35 * sinr(11*t + 12/7) - 5032) * theta(47 * pi - t) * theta(t - 43 * pi) + (-1233/22 * sinr(7/5 - 9*t) - 566/5 * sinr(16/11 - 8*t) - 733/12 * sinr(14/9 - 7*t) - 919/7 * sinr(11/7 - 5*t) - 3557/3 * sinr(14/9 - 3*t) - 2939/4 * sinr(14/9 - 2*t) + 6148/11 * sinr(t + 11/7) + 1185/7 * sinr(4*t + 3/2) + 1600/13 * sinr(6*t + 8/5) + 59/5 * sinr(10*t + 9/7) + 71/9 * sinr(11*t + 13/3) + 164/5 * sinr(12*t + 13/8) - 41799/8) * theta(43 * pi - t) * theta(t - 39 * pi) + (-117/5 * sinr(4/5 - 6*t) - 145/4 * sinr(5/4 - 4*t) - 1311/7 * sinr(7/5 - 2*t) + 15551/10 * sinr(t + 1/9) + 518 * sinr(3*t + 1/5) + 679/17 * sinr(5*t + 2/5) + 259/6 * sinr(7*t + 5/6) - 9484/7) * theta(39 * pi - t) * theta(t - 35 * pi) + (-130/7 * sinr(9/8 - 4*t) - 427/4 * sinr(24/25 - 3*t) - 3332/3 * sinr(9/7 - t) + 932/19 * sinr(2*t + 30/7) - 32269/6) * theta(35 * pi - t) * theta(t - 31 * pi) + (-1119/13 * sinr(10/9 - 3*t) - 1386/17 * sinr(4/3 - 2*t) - 4103/4 * sinr(9/7 - t) - 46877/9) * theta(31 * pi - t) * theta(t - 27 * pi) + (-7485/4 * sinr(5/9 - t) + 1909/9 * sinr(2*t + 34/9) + 2861/4 * sinr(3*t + 23/5) + 11/2 * sinr(4*t + 7/2) + 111/8 * sinr(5*t + 12/7) + 511/8 * sinr(6*t + 16/15) + 180/7 * sinr(7*t + 11/4) + 279/4 * sinr(8*t + 17/5) + 76/5 * sinr(9*t + 81/20) - 16919/11) * theta(27 * pi - t) * theta(t - 23 * pi) + (-71/13 * sinr(1/2 - 11*t) - 119/6 * sinr(17/16 - 6*t) - 292/7 * sinr(10/7 - 5*t) - 64/13 * sinr(3/5 - 3*t) - 1493/3 * sinr(2/7 - t) + 1883/8 * sinr(2*t + 7/6) + 171/7 * sinr(4*t + 32/9) + 251/25 * sinr(7*t + 1) + 35/2 * sinr(8*t + 16/7) + 117/10 * sinr(9*t + 15/4) + 43/9 * sinr(10*t + 29/8) + 43/9 * sinr(12*t + 20/13) - 65269/8) * theta(23 * pi - t) * theta(t - 19 * pi) + (-174/5 * sinr(4/7 - 8*t) - 4532/23 * sinr(5/6 - 6*t) + 36005/17 * sinr(t + 25/9) + 2164/5 * sinr(2*t + 35/9) + 1376/5 * sinr(3*t + 13/7) + 1164/5 * sinr(4*t + 28/9) + 277/3 * sinr(5*t + 19/5) + 539/4 * sinr(7*t + 3/10) + 839/12 * sinr(9*t + 26/9) + 23/5 * sinr(10*t + 8/3) + 901/22 * sinr(11*t + 11/5) + 163/5 * sinr(12*t + 5/9) + 135/7 * sinr(13*t + 9/2) - 11569/2) * theta(19 * pi - t) * theta(t - 15 * pi) + (-5801/5 * sinr(5/11 - t) + 171/7 * sinr(2*t + 21/5) + 782/9 * sinr(3*t + 17/4) - 7576/5) * theta(15 * pi - t) * theta(t - 11 * pi) + (-34/3 * sinr(1 - 4*t) - 838/7 * sinr(1/2 - 2*t) + 7788/7 * sinr(t + 2/5) + 1055/7 * sinr(3*t + 11/7) + 219/10 * sinr(5*t + 19/5) + 194/7 * sinr(6*t + 49/11) - 7441/5) * theta(11 * pi - t) * theta(t - 7 * pi) + (-209/2 * sinr(5/6 - 8*t) + 58085/14 * sinr(t + 21/8) + 5813/3 * sinr(2*t + 26/7) + 25709/7 * sinr(3*t + 10/7) + 6831/8 * sinr(4*t + 9/4) + 3693/10 * sinr(5*t + 38/13) + 6453/7 * sinr(6*t + 30/7) + 1996/11 * sinr(7*t + 16/5) + 3541/22 * sinr(9*t + 5/4) + 2263/29 * sinr(10*t + 35/18) + 4279/46 * sinr(11*t + 1/5) + 523/4 * sinr(12*t + 21/5) + 326/7 * sinr(13*t + 21/8) + 396/7 * sinr(14*t + 21/5) + 1446/17 * sinr(15*t + 2/3) + 1971/5) * theta(7 * pi - t) * theta(t - 3 * pi) + (-938/5 * sinr(8/9 - 7*t) + 26701/4 * sinr(t + 18/7) + 8911/33 * sinr(2*t + 7/2) + 4615/6 * sinr(3*t + 32/7) + 18102/23 * sinr(4*t + 12/5) + 1129/7 * sinr(5*t + 13/4) + 473/7 * sinr(6*t + 10/7) + 671/7 * sinr(8*t + 1/14) + 7/4 * sinr(9*t + 9/2) + 491/9 * sinr(10*t + 29/14) - 19490/3) * theta(3 * pi - t) * theta(t + pi))* theta(0.5^(sgn(sinr(t/2))));
		//let x = -a * (t * (cos(t) ^ 2 - sin(t) ^ 2) - sin(t) - sin(t) * cos(t)) / (t ^ 2);
		//let y = a * (t * sin(t) * cos(t) - sin(t) ^ 2) / (t ^ 2);

function ToDegree(input)//Winkelmaß
{
	return ((360 / (2 * pi)) * input);
}

function ToRadiant(input) //Bogenmaß
{
	return ((2 * pi) / 360 * input);
}

function sinr(input)
{
	return ToRadiant(sin(input));
}

function cosr(input)
{
	return ToRadiant(cos(input));
}


function theta(input)
{
	if(input >= 0)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

function sgn(input)
{
	if(input > 0)
	{
		return 1;
	}
	else if(input == 0)
	{
		return 0;
	}
	else
	{
		return -1;
	}
}task Muster1
{
	let angle2 = 0;
	let angle = 1;
    // Control the curve parameters
    let a2 = 1;
    let b2 = 2;
    // Control the scaling parameters
    let scalex = 64;
    let scaley = 64;
    loop 
	{
        let s_num = a2*sin(angle2)*sin(angle2) - b2*cos(angle2)*cos(angle2);
        let s_denom = sin(angle2)*sin(angle2) - cos(angle2)*cos(angle2);
        let s_all = (s_num/s_denom)^0.5;
		CreateShotA1(ObjMove_GetX(objBoss) + scalex*cos(angle2)*s_all, ObjMove_GetY(objBoss) + scaley*sin(angle2)*s_all, 0, angle2, 30, 10);
        //CreateShotA2(ObjMove_GetX(objBoss) + scalex*cos(t)*s_all, ObjMove_GetY(objBoss) + scaley*sin(t)*s_all, 0, t*2, 0.01, 3, DS_BALL_BS_SKY, 10);
        angle2 += angle;
        yield;
    }
}

task Muster2
{
	ascent(i in 0..5)
	{
		Bullets((424.1 / 5) * i);
	}

	//Bullets(0);
	
	task Bullets(t)
	{
		let angle = 10;
		// Control the scaling parameters
		let scalex = 10;
		let scaley = 10;
		loop 
		{
			let x = 11 * cos(t) - 6 * cos(11 / 6 * t);
			let y = 11 * sin(t) - 6 * sin(11 / 6 * t);
			let obj = CreateShotA1(ObjMove_GetX(objBoss) + scalex * x, ObjMove_GetY(objBoss) + scaley * y, 1, t, 30, 10);
			t += angle;
			wait(3);
		}
	}
}
task Muster3
{
	let t = 0;
	let t1 = 1;
	let a = 2.5;
	let b = 2.5;
	let c = 2.5;
	let d = 2.5;
	let j = 2.5;
	let k = 2.5;
    // Control the scaling parameters
    let scalex = 100;
    let scaley = 100;
    loop 
	{
        let x = cos(a * t) - cos(b * t)^j;
		let y = sin(c * t) - sin(d * t)^k;
		CreateShotA1(ObjMove_GetX(objBoss) + scalex*x, ObjMove_GetY(objBoss) + scaley*y, 0.00, t, 71, 10);
        t += t1;
        yield;
    }
}
task Firetask
{
	ObjEnemy_SetDamageRate(objBoss,100,0);
	let n=40;
	let n1=90/n;
	let n2=90;
	let disx=150;
	let angle=90;
	let x=GetCenterX;
	let y=ObjMove_GetY(objBoss);
	
	
	while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0)
	{
		if(n2%(90)==0){Shot(n);}
		ObjRender_SetAngleZ(objBoss,0+(angle*cos(n2)));
		ObjMove_SetPosition(objBoss,x+(disx*cos(n2)),y);
		n2+=n1;
		yield;
	}
	
	task Shot(n)
	{
		let normal=10;
		let candy=30;
		let t=n;
		let dis=20;
		let disx=10;
		let disx2=0;
		let speedx=2;
		let speedx2=0;
		let speedy=-3;
		let speedy2=0;
		let accx=0;
		let accy=0.05;
		let maxspeedx=speedx;
		let maxspeedy=3;
		
		PlaySound("LenenShot4",70,0);
		
		loop(candy)
		{
			disx2=rand(neg(disx),disx);
			speedx2=rand(neg(speedx),speedx);
			speedy2=rand(speedy,speedy*1.5);
			maxspeedx=speedx2;
			let angle=rand(255,285);
			FireShot((bossX+disx2)+dis*cos(angle),bossY+dis*cos(angle),speedx2,speedy2,accx,accy,maxspeedx,maxspeedy,rand_int(1100,1101),0);
		}
		loop(normal)
		{
			disx2=rand(neg(disx),disx);
			speedx2=rand(neg(speedx),speedx);
			speedy2=rand(speedy,speedy*1.5);
			maxspeedx=speedx2;
			let angle=rand(255,285);
			FireShot((bossX+disx2)+dis*cos(angle),bossY+dis*cos(angle),speedx2,speedy2,accx,accy,maxspeedx,maxspeedy,rand_int(71,79),0);
		}
		
		task FireShot(bossX,bossY,speedx,speedy,accx,accy,maxspeedx,maxspeedy,graphic,delay)
		{
			let obj=CreateShotB2(bossX,bossY,speedx,speedy,accx,accy,maxspeedx,maxspeedy,graphic,delay);
			if(graphic>=1100)
			{
				Obj_SetRenderPriorityI(obj,Obj_GetRenderPriorityI(obj)-1);
			}
		}
	}
}

task TDrawLoop
{
	let scale=0.7;
	let counter =0;
	let countertime =6;
	let countertime1 =0;
    let path= CSD ~ "./Enemy/tsugumi.png";
	LoadTexture(path);
	let partcount=8;
	let xpart=GetTextureWidth(path)/partcount;
	let x1=0;
	let y1=0;
	let x2=xpart;
	let y2=GetTextureHeight(path);

    ObjPrim_SetTexture(objBoss,path);
    ObjSprite2D_SetSourceRect(objBoss,x1,y1,x2,y2);
    ObjRender_SetScaleXYZ(objBoss,scale,scale,scale);
    ObjSprite2D_SetDestCenter(objBoss);
	
	while(!Obj_IsDeleted(objBoss))
	{
		ObjSprite2D_SetSourceRect(objBoss,x1+(xpart*counter),y1,x2+(xpart*counter),y2);
		countertime1++;
		if(countertime1>=countertime)
		{
			counter++;
			countertime1=0;
		}
		if(counter>=partcount)
		{
			counter=0;
		}
	yield;
	}

	
}

task TFinalize 
{
    while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0){yield;}
	NotifyEvent(GetCommonData("Cutincontrol Script ID",0),EV_USER,["Cutin","Drehzeichen: Fang die Bonbons"]);
    Obj_Delete(objBoss);
    DeleteShotAll(TYPE_ALL, TYPE_IMMEDIATE);
    SetAutoDeleteObject(true);
    CloseScript(GetOwnScriptID());
    
    if(ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SHOOTDOWN_COUNT) +ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SPELL_COUNT) == 0)
    {
        AddScore(ObjEnemyBossScene_GetInfo(objScene, INFO_SPELL_SCORE));
    }
    return;
}

