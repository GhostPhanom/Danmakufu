#TouhouDanmakufu[Player]
#ScriptVersion[3]
#ID["WEWS"]
#Title["WEWS"]
#Text["Wie es wohl Schmeckt"]
#Image["./wews_select.png"]
#ReplayName["WEWS"]

let CSD = GetCurrentScriptDirectory;
let playerID= GetPlayerObjectID;
let playerObj = ObjPrim_Create(OBJ_SPRITE_2D);
let hitboxObj = ObjPrim_Create(OBJ_SPRITE_2D);
let count = -1;
let isFocus = false;
let playerisdead = false;

// Shot Sheet
let shotMarisa = CSD ~ "playershot.txt";

// Texture Sheet
let playerSprite = CSD ~ "MarisaWEWS2.png";

// Spell Texture
let spellTexture2 = CSD ~ "hud_reticle_sniper6.png";
let spellTexture = CSD ~ "ring.png";

// Death Texture
let deathTexture = CSD ~ "enm5b.png";

@Initialize
{
// Load Player Shot Data
LoadPlayerShotData(shotMarisa);

// Set player unfocussed and focusse speed
SetPlayerSpeed(5,2.5);

//Set Player hitbox parameters = (playerobject, location x, location y, radius, grazerradius);
ObjPlayer_AddIntersectionCircleA1(playerID,0,0,2,16);

// Set the boundrary box for the game field
// Standart = x:384, y:448
SetPlayerClip(0+6,0+24,384-6,448-16);

// Set how long the player is "gone" upon Pichuun.
SetPlayerDownStateFrame(60);

// Counterbomb time frame
SetPlayerRebirthFrame(10);

// Set Y coordinate where the player starts auto-collecting.
SetPlayerAutoItemCollectLine(120);

// Launch two tasks to handle the sprinte animation
renderPlayer;
renderHitBox(GetPlayerX,GetPlayerY);
LoadSE;
}

@Event
{
alternative(GetEventType)

// Spell card
case(EV_REQUEST_SPELL)
{
	if(GetPlayerSpell > 0)
	{
		SetScriptResult(true);
		SetPlayerSpell(GetPlayerSpell-1);
		Bomb;
	}
	else
	{
	SetScriptResult(false);
	}
	
	
	//If the Player has no Bomb, use this
/*	if(GetPlayerSpell > 0)
	{
	SetScriptResult(true);
	}
	else
	{
	SetScriptResult(false);
	}*/
}

// Player is pichuun (after the counterbomb timer)
case(EV_PLAYER_SHOOTDOWN)
{
	SetForbidPlayerShot(true);
	SetForbidPlayerSpell(true);
	playerisdead=true;
	Deathexplosion;
}

// Player is reviving
case(EV_PLAYER_REBIRTH)
{
	SetForbidPlayerShot(false);
	SetForbidPlayerSpell(false);
	SetPlayerInvincibilityFrame(120);
	SetPlayerSpell(2);
	ObjRender_SetAlpha(playerObj,255);
	playerisdead=false;	
}

case(EV_HIT)
{
	PlaySound("seDeath",50,0);
}

}

@MainLoop
{
	if(GetVirtualKeyState(VK_SLOWMOVE) == KEY_PUSH || GetVirtualKeyState(VK_SLOWMOVE) == KEY_HOLD)
	{
		isFocus = true;
	}
	if(GetVirtualKeyState(VK_SLOWMOVE) == KEY_PULL)
	{
		isFocus = false;
	}
	
	//Shoot function
	
	if(GetVirtualKeyState(VK_SHOT) == KEY_PUSH || GetVirtualKeyState(VK_SHOT) == KEY_HOLD)
	{
	count++;
	if(count >=5){count=0;}
	}
	if(GetVirtualKeyState(VK_SHOT) == KEY_PULL)
	{
	count = -1;
	}
	
	// Focus shot
	if(isFocus)
	{
		if(count >3)
		{
			// Location x, location y, speed, angle, damage, penetration, id
			CreatePlayerShotA1(GetPlayerX-22, GetPlayerY -20, 12, 270, 5, 1, 2);
			CreatePlayerShotA1(GetPlayerX+22, GetPlayerY -20, 12, 270, 5, 1, 2);
			if(IsPermitPlayerShot){PlaySound("seShot",90,0);}
			
		}
		if(count ==1)
		{
			CreatePlayerShotA1(GetPlayerX, GetPlayerY -25, 15, 270, 10, 1, 4);
		}
	}
	
	// Regular shot
	else 
	{
		if(count > 3)
		{
			let speed=8;
			CreatePlayerShotA1(GetPlayerX-4, GetPlayerY -20, speed, 255, 5, 1, 3);
			CreatePlayerShotA1(GetPlayerX-8, GetPlayerY -20, speed, 240, 5, 1, 3);
			CreatePlayerShotA1(GetPlayerX, GetPlayerY -20, speed, 270, 5, 1, 3);	
			CreatePlayerShotA1(GetPlayerX+4, GetPlayerY -20, speed, 285, 5, 1, 3);
			CreatePlayerShotA1(GetPlayerX+8, GetPlayerY -20, speed, 300, 5, 1, 3);
			if(IsPermitPlayerShot){PlaySound("seShot",90,0);}
		}
	}
	yield;
}
		let retscale=2;
		let objreticle = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(objreticle,spellTexture2);
		ObjRender_SetBlendType(objreticle,BLEND_ALPHA);
		ObjRender_SetAlpha(objreticle,0);
		Obj_SetRenderPriorityI(objreticle,75);
		ObjRender_SetScaleXYZ(objreticle,retscale,retscale,0);
		ObjSprite2D_SetSourceRect(objreticle,0,0,2000,2000);
		ObjSprite2D_SetDestCenter(objreticle);
		ObjRender_SetPosition(objreticle,GetPlayerX,GetPlayerY,0);

let bombactive = false;
let sniperx=0;
let snipery=0;
//Sniper
let sniperSprite = CSD ~ "Sniper.png";
let sniperangle=0;
	let objSniper = ObjEnemy_Create(OBJ_ENEMY);
	ObjEnemy_Regist(objSniper);
	ObjPrim_SetTexture(objSniper,sniperSprite);
	Obj_SetRenderPriorityI(objSniper,31);
	ObjRender_SetBlendType(objSniper,BLEND_ALPHA);
	ObjRender_SetAngleXYZ(objSniper,0,0,0);
	ObjRender_SetScaleXYZ(objSniper,0.5,0.5,0);
	ObjRender_SetAlpha(objSniper,255);
	ObjSprite2D_SetSourceRect(objSniper,0,0,138,138);
	ObjSprite2D_SetDestCenter(objSniper);
	ObjRender_SetPosition(objSniper,999,999,0);

task Sniper
{
	ObjRender_SetPosition(objSniper,sniperx,snipery,0);
	ObjMove_SetPosition(GetPlayerID,GetPlayerX+500,GetPlayerY-100);
	let angle=0;
	while(bombactive&&zooms)
	{
		angle=GetAngleTo(objSniper,GetPlayerObjectID());
		ObjRender_SetAngleZ(objSniper,angle);
		yield;
		//angle+=30;
	}
wait(30);	
ObjMove_SetPosition(objSniper,GetPlayerX+1000,GetPlayerY-1000);
}

let zooms=false;

task Bomb
{
	// Prepare
		bombactive = true;
		SetForbidPlayerShot(true);
		SetForbidPlayerSpell(true);
		SetPlayerInvincibilityFrame(400);
		SetPlayerSpeed(3,3);
	// A spellcard object
		let spellObject = ObjSpell_Create();
		ObjSpell_Regist(spellObject);
		ObjSpell_SetEraseShot(spellObject,true);
	// Bomb
	ObjRender_SetAlpha(objreticle,245);
		//wait(180);
		zooms=true;
		sniperx=GetPlayerX();
		snipery=GetPlayerY();
		Sniper;
		ObjMove_SetPosition(GetPlayerObjectID,GetPlayerX,GetPlayerY-20);
		let n=15;
		PlaySound("zoom",100,5);
		loop(n)
		{
			ObjRender_SetScaleXYZ(objreticle,retscale,retscale,0);
			ObjRender_SetPosition(objreticle,GetPlayerX,GetPlayerY,0);
			retscale-=1.5/n;
			wait(1);
		}
		n=270;
		let speed=4;
		loop(n)
		{
			if(GetVirtualKeyState(VK_BOMB)==KEY_PUSH){SetPlayerInvincibilityFrame(100);break;}
			SetPlayerSpeed(speed,speed);
			ObjRender_SetScaleXYZ(objreticle,retscale,retscale,0);
			ObjRender_SetPosition(objreticle,GetPlayerX,GetPlayerY,0);
			speed-=2.5/n;
			retscale-=0.07/n;
			wait(1);
		}
		let spellx=GetPlayerX;
		let spelly=GetPlayerY;
		zooms=false;
		//wait(20);
		PlaySound("sniperShot",100,0);
		createRingEffect(spellx,spelly);
		ObjSpell_SetIntersectionCircle(spellObject,spellx,spelly,200);
		ObjSpell_SetDamage(spellObject,2000);
		DeleteShotInCircle(TYPE_SHOT,TYPE_FADE,GetPlayerX,GetPlayerY,500);
		ObjMove_SetPosition(GetPlayerObjectID,sniperx,snipery);
	// Cleanup and reset
	bombactive = false;
	ReticleFade;
	retscale=2;
	
	SetForbidPlayerShot(false);
	SetPlayerSpeed(5,2.5);
	Obj_Delete(GetSpellManageObject);
	wait(60);
	SetForbidPlayerSpell(false);
}

task ReticleFade
{
	let n=60;
	let alpha=245;
	loop(n)
	{
		if(bombactive==true){return;}
		ObjRender_SetAlpha(objreticle,alpha);
		alpha-=245/n;
		wait(1);
	}
}

task createRingEffect(spellx,spelly)
{
	let scale = 0;
	let alpha = 200;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj,spellTexture);
	ObjRender_SetBlendType(obj,BLEND_ADD_ARGB);
	ObjRender_SetAlpha(obj,alpha);
	Obj_SetRenderPriorityI(obj,79);
	ObjRender_SetScaleXYZ(obj,scale,scale,0);
	ObjSprite2D_SetSourceRect(obj,0,0,128,128);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetPosition(obj,spellx,spelly,0);
	
	ObjRender_SetColor(obj, truncate(rand(128,255)), truncate(rand(128,255)), truncate(rand(128,255)));
	
	while(alpha > 0)
	{
		ObjRender_SetAlpha(obj,alpha);
		ObjRender_SetScaleXYZ(obj,scale,scale,0);
		
		scale+=0.4;
		alpha-=2;
		
		yield;
	}
	
	Obj_Delete(obj);
}

// Render the Player
task renderPlayer
{
	ObjPrim_SetTexture(playerObj,playerSprite);
	Obj_SetRenderPriorityI(playerObj,31);
	ObjRender_SetBlendType(playerObj,BLEND_ALPHA);
	ObjRender_SetAngleXYZ(playerObj,0,0,0);
	ObjRender_SetScaleXYZ(playerObj,1,1,0);
	ObjRender_SetAlpha(playerObj,255);
	ObjSprite2D_SetSourceRect(playerObj,0,0,32,48);
	ObjSprite2D_SetDestCenter(playerObj);
	ObjRender_SetPosition(playerObj,GetPlayerX,GetPlayerY,0);
	
	while(!Obj_IsDeleted(playerObj))
	{
		if (bombactive){ObjSprite2D_SetSourceRect(playerObj,0,0,0,0)}
		else{
		ObjRender_SetPosition(playerObj,GetPlayerX,GetPlayerY,0);
		
		//Player is pressing left
		if(GetVirtualKeyState(VK_LEFT) == KEY_PUSH || GetVirtualKeyState(VK_LEFT) == KEY_HOLD)
		{
			ObjRender_SetAngleY(playerObj,0);
			ObjSprite2D_SetSourceRect(playerObj,32,0,64,48);
		}
		//Player is pressing right
		else if (GetVirtualKeyState(VK_RIGHT) == KEY_PUSH || GetVirtualKeyState(VK_RIGHT) == KEY_HOLD)
		{
			ObjRender_SetAngleY(playerObj,180);
			ObjSprite2D_SetSourceRect(playerObj,32,0,64,48);
		}
		// Idle animation or moving forward/backward
		else
		{
			ObjSprite2D_SetSourceRect(playerObj,0,0,32,48);
		}
		}
		yield;
	}
}

// Render the hitbox
task renderHitBox(x,y)
{
	let alpha = 0;
	let spin = 0;
	
	ObjPrim_SetTexture(hitboxObj,playerSprite);
	ObjRender_SetBlendType(hitboxObj,BLEND_ALPHA);
	Obj_SetRenderPriorityI(hitboxObj,50);
	ObjRender_SetAlpha(hitboxObj,0);
	ObjRender_SetScaleXYZ(hitboxObj,1,1,0);
	ObjSprite2D_SetSourceRect(hitboxObj,0,64,64,128);
	ObjSprite2D_SetDestCenter(hitboxObj);
	
	while(!Obj_IsDeleted(hitboxObj))
	{
		// update the hitbox position, angle and alpha
		ObjRender_SetPosition(hitboxObj,GetPlayerX,GetPlayerY,0);
		ObjRender_SetAngleZ(hitboxObj,spin);
		ObjRender_SetAlpha(hitboxObj,alpha);
		
		if(isFocus&& !playerisdead&&bombactive==false)
		{
			alpha=255;
		}
		else
		{
			alpha=0;
		}
		
		// increase spin to make it roteate
		spin+=2; 
		
		yield;
	}
}

task Deathexplosion
{
	let scale = 0;
	let alpha = 200;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj,deathTexture);
	ObjRender_SetBlendType(obj,BLEND_ALPHA);
	ObjRender_SetAlpha(obj,alpha);
	Obj_SetRenderPriorityI(obj,79);
	ObjRender_SetScaleXYZ(obj,scale,scale,0);
	ObjSprite2D_SetSourceRect(obj,0,0,128,128);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetPosition(obj,GetPlayerX,GetPlayerY,0);
	
	ObjRender_SetColor(obj,255,0,0);
	
	while(alpha > 0)
	{
		ObjRender_SetAlpha(obj,alpha);
		ObjRender_SetScaleXYZ(obj,scale,scale,0);
		ObjRender_SetAlpha(playerObj,0);
		scale+=0.2;
		alpha-=4;
		
		yield;
	}
	
	Obj_Delete(obj);

}

function GetAngleTo(let object1, let object2) { return atan2(ObjRender_GetY(object2)-ObjRender_GetY(object1),
ObjRender_GetX(object2)-ObjRender_GetX(object1));}

function wait(w)
{
	loop(w)
	{
	yield;
	}
}

let soundarr = [];
let se;
let s = ObjSound_Create;

task PlaySound(str,v,w){
	if(str == "seShot"){ObjSound_Load(s,CSD ~ "seShot.wav");}
	if(str == "seDeath"){ObjSound_Load(s,CSD ~ "seDeath.wav");}
	if(str == "sniperShot"){ObjSound_Load(s,CSD ~ "sniperShot.wav");}
	if(str == "zoom"){ObjSound_Load(s,CSD ~ "zoom.wav");}

	loop(w){yield;}
	ObjSound_SetSoundDivision(s,SOUND_SE);
	ObjSound_SetVolumeRate(s,v);
	ObjSound_Play(s);
	soundarr = soundarr ~ [s];
	if(str=="item")
	{
		yield;
		Obj_Delete(s);
	}
}


task LoadSE{
	LoadSound(CSD ~ "seShot.wav");
	LoadSound(CSD ~ "sniperShot.wav");
	LoadSound(CSD ~ "zoom.wav");
	LoadSound(CSD ~ "seDeath.wav");
	}