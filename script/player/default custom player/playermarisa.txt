#TouhouDanmakufu[Player]
#ScriptVersion[3]
#ID["MARISA_A"]
#Title["MARISA_A"]
#Text["Marisa A"]
#ReplayName["MarisaA"]

let CSD = GetCurrentScriptDirectory;
let playerID= GetPlayerObjectID;
let playerObj = ObjPrim_Create(OBJ_SPRITE_2D);
let hitboxObj = ObjPrim_Create(OBJ_SPRITE_2D);
let count = -1;
let isFocus = false;
let playerisdead = false;

// Shot Sheet
let shotMarisa = CSD ~ "playershot.txt";

// Texture Sheet
let playerSprite = CSD ~ "marisasprite.png";

// Spell Texture
let spellTexture = CSD ~ "ring.png";

@Initialize
{
// Load Player Shot Data
LoadPlayerShotData(shotMarisa);

// Set player unfocussed and focusse speed
SetPlayerSpeed(5,2.5);

//Set Player hitbox parameters = (playerobject, location x, location y, radius, grazerradius);
ObjPlayer_AddIntersectionCircleA1(playerID,0,0,2,16);

// Set the boundrary box for the game field
// Standart = x:384, y:448
SetPlayerClip(0+6,0+24,384-6,448-16);

// Set how long the player is "gone" upon Pichuun.
SetPlayerDownStateFrame(60);

// Counterbomb time frame
SetPlayerRebirthFrame(30);

// Set Y coordinate where the player starts auto-collecting.
SetPlayerAutoItemCollectLine(120);

// Launch two tasks to handle the sprinte animation
renderPlayer;
renderHitBox(GetPlayerX,GetPlayerY);
}

@Event
{
alternative(GetEventType)

// Spell card
case(EV_REQUEST_SPELL)
{
	if(GetPlayerSpell > 0)
	{
		SetScriptResult(true);
		SetPlayerSpell(GetPlayerSpell-1);
		Bomb;
	}
	else
	{
	SetScriptResult(false);
	}
	
	
	//If the Player has no Bomb, use this
/*	if(GetPlayerSpell > 0)
	{
	SetScriptResult(true);
	}
	else
	{
	SetScriptResult(false);
	}*/
}

// Player is pichuun (after the counterbomb timer)
case(EV_PLAYER_SHOOTDOWN)
{
	SetForbidPlayerShot(true);
	SetForbidPlayerSpell(true);
	ObjRender_SetAlpha(playerObj,0);
	playerisdead=true;
}

// Player is reviving
case(EV_PLAYER_REBIRTH)
{
	SetForbidPlayerShot(false);
	SetForbidPlayerSpell(false);
	SetPlayerInvincibilityFrame(120);
	SetPlayerSpell(2);
	ObjRender_SetAlpha(playerObj,255);
	playerisdead=false;
}

}

@MainLoop
{
	if(GetVirtualKeyState(VK_SLOWMOVE) == KEY_PUSH || GetVirtualKeyState(VK_SLOWMOVE) == KEY_HOLD)
	{
		isFocus = true;
	}
	if(GetVirtualKeyState(VK_SLOWMOVE) == KEY_PULL)
	{
		isFocus = false;
	}
	
	//Shoot function
	
	if(GetVirtualKeyState(VK_SHOT) == KEY_PUSH || GetVirtualKeyState(VK_SHOT) == KEY_HOLD)
	{
	count++;
	if(count >=5){count=0;}
	}
	if(GetVirtualKeyState(VK_SHOT) == KEY_PULL)
	{
	count = -1;
	}
	
	// Focus shot
	if(isFocus)
	{
		if(count >3)
		{
			// Location x, location y, speed, angle, damage, penetration, id
			CreatePlayerShotA1(GetPlayerX-8, GetPlayerY -20, 20, 270, 0.45, 1, 1);
			CreatePlayerShotA1(GetPlayerX+8, GetPlayerY -20, 20, 270, 0.45, 1, 1);
		}
	}
	
	// Regular shot
	else 
	{
		if(count > 3)
		{
			CreatePlayerShotA1(GetPlayerX-8, GetPlayerY -20, 20, 240, 0.45, 1, 1);
			CreatePlayerShotA1(GetPlayerX, GetPlayerY -20, 20, 270, 0.45, 1, 1);
			CreatePlayerShotA1(GetPlayerX+8, GetPlayerY -20, 20, 300, 0.45, 1, 1);
		}
	}
	yield;
}

task Bomb
{
	// Prepare
		SetForbidPlayerShot(true);
		SetForbidPlayerSpell(true);
		SetPlayerInvincibilityFrame(180);
		SetPlayerSpeed(1,1);
	// A spellcard object
		let spellObject = ObjSpell_Create();
		ObjSpell_Regist(spellObject);
		ObjSpell_SetEraseShot(spellObject,true);
	// Bomb
		loop(16)
		{
			createRingEffect;
			ObjSpell_SetIntersectionCircle(spellObject,GetPlayerX,GetPlayerY,512);
			ObjSpell_SetDamage(spellObject,10);
			wait(10);
		}
	// Cleanup and reset
	SetForbidPlayerShot(false);
	SetForbidPlayerSpell(false);
	SetPlayerSpeed(5,2.5);
	Obj_Delete(GetSpellManageObject);
}

task createRingEffect
{
	let scale = 0;
	let alpha = 200;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj,spellTexture);
	ObjRender_SetBlendType(obj,BLEND_ADD_ARGB);
	ObjRender_SetAlpha(obj,alpha);
	Obj_SetRenderPriorityI(obj,41);
	ObjRender_SetScaleXYZ(obj,scale,scale,0);
	ObjSprite2D_SetSourceRect(obj,0,0,128,128);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetPosition(obj,GetPlayerX,GetPlayerY,0);
	
	ObjRender_SetColor(obj, truncate(rand(128,255)), truncate(rand(128,255)), truncate(rand(128,255)));
	
	while(alpha > 0)
	{
		ObjRender_SetAlpha(obj,alpha);
		ObjRender_SetScaleXYZ(obj,scale,scale,0);
		
		scale+=0.4;
		alpha-=2;
		
		yield;
	}
	
	Obj_Delete(obj);
}


// Render the Player
task renderPlayer
{
	ObjPrim_SetTexture(playerObj,playerSprite);
	Obj_SetRenderPriorityI(playerObj,31);
	ObjRender_SetBlendType(playerObj,BLEND_ALPHA);
	ObjRender_SetAngleXYZ(playerObj,0,0,0);
	ObjRender_SetScaleXYZ(playerObj,1,1,0);
	ObjRender_SetAlpha(playerObj,255);
	ObjSprite2D_SetSourceRect(playerObj,0,0,32,48);
	ObjSprite2D_SetDestCenter(playerObj);
	ObjRender_SetPosition(playerObj,GetPlayerX,GetPlayerY,0);
	
	while(!Obj_IsDeleted(playerObj))
	{
		ObjRender_SetPosition(playerObj,GetPlayerX,GetPlayerY,0);
		
		//Player is pressing left
		if(GetVirtualKeyState(VK_LEFT) == KEY_PUSH || GetVirtualKeyState(VK_LEFT) == KEY_HOLD)
		{
			ObjRender_SetAngleY(playerObj,0);
			ObjSprite2D_SetSourceRect(playerObj,32,0,64,48);
		}
		//Player is pressing right
		else if (GetVirtualKeyState(VK_RIGHT) == KEY_PUSH || GetVirtualKeyState(VK_RIGHT) == KEY_HOLD)
		{
			ObjRender_SetAngleY(playerObj,180);
			ObjSprite2D_SetSourceRect(playerObj,32,0,64,48);
		}
		// Idle animation or moving forward/backward
		else
		{
			ObjSprite2D_SetSourceRect(playerObj,0,0,32,48);
		}
		yield;
	}
}

// Render the hitbox
task renderHitBox(x,y)
{
	let alpha = 0;
	let spin = 0;
	
	ObjPrim_SetTexture(hitboxObj,playerSprite);
	ObjRender_SetBlendType(hitboxObj,BLEND_ALPHA);
	Obj_SetRenderPriorityI(hitboxObj,50);
	ObjRender_SetAlpha(hitboxObj,0);
	ObjRender_SetScaleXYZ(hitboxObj,1,1,0);
	ObjSprite2D_SetSourceRect(hitboxObj,0,64,64,128);
	ObjSprite2D_SetDestCenter(hitboxObj);
	
	while(!Obj_IsDeleted(hitboxObj))
	{
		// update the hitbox position, angle and alpha
		ObjRender_SetPosition(hitboxObj,GetPlayerX,GetPlayerY,0);
		ObjRender_SetAngleZ(hitboxObj,spin);
		ObjRender_SetAlpha(hitboxObj,alpha);
		
		if(isFocus&& !playerisdead)
		{
			alpha=255;
		}
		else
		{
			alpha=0;
		}
		
		// increase spin to make it roteate
		spin+=2; 
		
		yield;
	}
}

function wait(w)
{
	loop(w)
	{
	yield;
	}
}