#TouhouDanmakufu[Player]
#ScriptVersion[3]
#ID["CIRNO"]
#Title["Cirno"]
#Text["The Strongest"]
#ReplayName["Cirno"]

let CSD = GetCurrentScriptDirectory;
let playerID= GetPlayerObjectID;
let playerObj = ObjPrim_Create(OBJ_SPRITE_2D);
let hitboxObj = ObjPrim_Create(OBJ_SPRITE_2D);
let count = -1;
let isFocus = false;
let isbombing = false;
let playerisdead = false;
let GetCenterX=GetStgFrameWidth/2;
let GetCenterY=GetStgFrameHeight/2;
let UFO1;
let UFO2;
let Focusshottimer=0;

// Shot Sheet
let shotMarisa = CSD ~ "playershot.txt";

// Texture Sheet
let playerSprite = CSD ~ "PlayerSprite.png";

// Spell Texture
let spellTexture = CSD ~ "ring.png";

// Death Texture
let deathTexture = CSD ~ "enm5b.png";

//default render priority
let renderpriority=31;

@Initialize
{
// Load Player Shot Data
LoadPlayerShotData(shotMarisa);

// Set player unfocussed and focusse speed
SetPlayerSpeed(5,2.5);

//Set Player hitbox parameters = (playerobject, location x, location y, radius, grazerradius);
ObjPlayer_AddIntersectionCircleA1(playerID,0,0,2,16);

// Set the boundrary box for the game field
// Standart = x:384, y:448
SetPlayerClip(0+6,0+24,384-6,448-16);

// Set how long the player is "gone" upon Pichuun.
SetPlayerDownStateFrame(60);

// Counterbomb time frame
SetPlayerRebirthFrame(30);

// Set Y coordinate where the player starts auto-collecting.
SetPlayerAutoItemCollectLine(120);

// Launch two tasks to handle the sprinte animation
renderPlayer;
renderHitBox(GetPlayerX,GetPlayerY);

// Initialise Familiars
UFO1=SpawnFamiliar(0);
UFO2=SpawnFamiliar(180);
}

@Event
{
alternative(GetEventType)

// Spell card
case(EV_REQUEST_SPELL)
{
	if(GetPlayerSpell > 0)
	{
		SetScriptResult(true);
		SetPlayerSpell(GetPlayerSpell-1);
		Bomb;
		isbombing=true;
	}
	else
	{
	SetScriptResult(false);
	}
	
	
	//If the Player has no Bomb, use this
	/*if(GetPlayerSpell > 0)
	{
	SetScriptResult(true);
	}
	else
	{
	SetScriptResult(false);
	}*/
}

case(EV_HIT)
{
	PlaySound("seDeath",50,0);
}

// Player is pichuun (after the counterbomb timer)
case(EV_PLAYER_SHOOTDOWN)
{
	SetForbidPlayerShot(true);
	SetForbidPlayerSpell(true);
	playerisdead=true;
	Deathexplosion;
}

// Player is reviving
case(EV_PLAYER_REBIRTH)
{
	SetForbidPlayerShot(false);
	SetForbidPlayerSpell(false);
	SetPlayerInvincibilityFrame(120);
	SetPlayerSpell(2);
	ObjRender_SetAlpha(playerObj,255);
	SetPlayerSpeed(5,2.5);
	playerisdead=false;
}
}

let startshot=false;
	let dirx=0;
	let diry=0;
	let dirangle=270;
let focusshot=false;

@MainLoop
{
	if(GetVirtualKeyState(VK_SLOWMOVE) == KEY_PUSH || GetVirtualKeyState(VK_SLOWMOVE) == KEY_HOLD)
	{
		isFocus = true;
	}
	if(GetVirtualKeyState(VK_SLOWMOVE) == KEY_PULL)
	{
		isFocus = false;
	}
	
	//Shoot function
	
	if(GetVirtualKeyState(VK_SHOT) == KEY_PUSH || GetVirtualKeyState(VK_SHOT) == KEY_HOLD)
	{
	count++;
	if (count >=10){count=0;}
	}
	if(GetVirtualKeyState(VK_SHOT) == KEY_PULL)
	{
	startshot=false;
	count = -1;
	}
	let randdirx1=-16;
	let randdirx2=-8;
	let randdirx3=0;
	let randdirx4=+8;
	let randdirx5=+16;
	let randdir=rand(0,4.99);
	if(randdir<1){dirx=-16;diry=+10;}
	else if(randdir<2){dirx=-8;diry=+15;}
	else if(randdir<3){dirx=0;diry=+20;}
	else if(randdir<4){dirx=8;diry=+15;}
	else if(randdir<5){dirx=16;diry=+10;}
	let damage=25;
	let penetration=1;
	let id=8;
	let speed=20;
	
	
	// Focus shot
	if(isFocus)
	{
		if(Focusshottimer<=0&&IsPermitPlayerShot&&GetVirtualKeyState(VK_SHOT)==KEY_PUSH&&!isbombing){FocusShot;}
		
	task FocusShot
	{
		focusshot=true;
		Focustimer;
		SetPlayerSpeed(0,0);
		let ring=ObjEnemy_Create(OBJ_ENEMY);
		ObjEnemy_Regist(ring);
		ObjMove_SetPosition(ring,ObjRender_GetX(playerObj),ObjRender_GetY(playerObj));
		let n=100;
		let n1=40;
		let n2=n-n1;
		let alpha=0;
		let alpha1=170/n1;
		let scale=2;
		let scale1=scale/n;
		ObjPrim_SetTexture(ring,CSD~"charge.png");
		ObjSprite2D_SetSourceRect(ring,0,0,62,62);
		ObjSprite2D_SetDestCenter(ring);
		ObjRender_SetAlpha(ring,alpha);
		Obj_SetRenderPriorityI(ring,30);
		loop(n1)
		{
		alpha+=alpha1;
		ObjRender_SetAlpha(ring,alpha);
		ObjRender_SetScaleXYZ(ring,scale,scale,0);
		scale-=scale1;
		yield;
		}
		loop(n2)
		{
		ObjRender_SetScaleXYZ(ring,scale,scale,0);
		scale-=scale1;
		yield;
		}
		Obj_Delete(ring);
		if(!IsPermitPlayerShot){return;focusshot=false;SetPlayerSpeed(5,2.5);}
		let shot=CreatePlayerShotA1(ObjRender_GetX(playerObj),ObjRender_GetY(playerObj)-10,15,270,100,1,4);
		Shottrail(shot);
		let shotX=0;
		let shotY=0;
		while(!Obj_IsDeleted(shot)){shotX=ObjMove_GetX(shot);shotY=ObjMove_GetY(shot);yield;}
		if(!IsPermitPlayerShot){return;focusshot=false;SetPlayerSpeed(5,2.5);}
		let dis=5;
		loop(5)
		{
		if(!IsPermitPlayerShot){return;focusshot=false;SetPlayerSpeed(5,2.5);}
		let n=25;
		ascent(i in 0..n)
		{
		let angle=rand(i*360/n,(i+1)*360/n);
		let ice=CreatePlayerShotA1(shotX+dis*cos(angle),shotY+dis*sin(angle),3,angle,1,9999,truncate(rand(4,8.99)));
		Fade(ice,30,255,1);
		}
		yield;
		}
		SetPlayerSpeed(5,2.5);
		focusshot=false;
	}
	
		task Shottrail(obj)
		{
		while(!Obj_IsDeleted(obj)&&IsPermitPlayerShot)
		{
		let obj1=CreatePlayerShotA1(ObjMove_GetX(obj),ObjMove_GetY(obj),0,270,0,9999,4);
		Fade(obj1,20,255,0.7);
		wait(1);
		}
		}
		
		task Fade(obj,n,alpha,scale)
		{
			let alpha1=alpha/n;
			let scale1=scale/n;
			loop(n)
			{
			ObjRender_SetAlpha(obj,alpha);
			ObjRender_SetScaleXYZ(obj,scale,scale,0);
			alpha-=alpha1;
			scale-=scale1;
			yield;
			}
		Obj_Delete(obj);
		}
		
		task Focustimer
		{
		Focusshottimer=420;
		loop(420)
		{
		Focusshottimer-=1;
		yield;
		}
		}
		

	}
	// Regular shot
	else 
	{
		if(count ==5&&!isbombing&&!focusshot)
		{
		if(IsPermitPlayerShot){UFOShot(UFO1);UFOShot(UFO2);}
		}
	task UFOShot(obj)
	{
	let x=ObjMove_GetX(obj);
	let y=ObjMove_GetY(obj);
	let speed=5;
	let damage=5;
	let dis=8;
	let CX1=9.2;
	let CY1=-1;
	let CX2=3;
	let CY2=3;
	let n=5;
	let cone=20;
	let cone1=cone/n;
	let cones=270-(cone/2);
	ascent(i in 0..n)
	{
		let obj1=CreatePlayerShotA1((ObjMove_GetX(obj)-CX1)+dis*cos(cones+(i*cone1)),(ObjMove_GetY(obj)-CY1)+dis*sin(cones+(i*cone1)),speed,cones+(i*cone1),damage,1,3);
		let obj2=CreatePlayerShotA1((ObjMove_GetX(obj)-CX2)+dis*cos(cones+(i*cone1)),(ObjMove_GetY(obj)-CY2)+dis*sin(cones+(i*cone1)),speed,cones+(i*cone1),damage,1,3);
		let obj3=CreatePlayerShotA1((ObjMove_GetX(obj)+CX1)+dis*cos(cones+(i*cone1)),(ObjMove_GetY(obj)+CY1)+dis*sin(cones+(i*cone1)),speed,cones+(i*cone1),damage,1,3);
		let obj4=CreatePlayerShotA1((ObjMove_GetX(obj)+CX2)+dis*cos(cones+(i*cone1)),(ObjMove_GetY(obj)+CY2)+dis*sin(cones+(i*cone1)),speed,cones+(i*cone1),damage,1,3);
		ObjRender_SetScaleXYZ(obj1,0.5,0.5,1);
		ObjRender_SetScaleXYZ(obj2,0.5,0.5,1);
		ObjRender_SetScaleXYZ(obj3,0.5,0.5,1);
		ObjRender_SetScaleXYZ(obj4,0.5,0.5,1);
	}
	}
	}
	yield;
}



task Bombblock
{
	loop
	{
		SetForbidPlayerSpell(true);
		SetForbidPlayerShot(true);
		yield;
	}
}

task Bomb
{
	// Prepare
		//SetForbidPlayerShot(true);
		SetForbidPlayerSpell(true);
		SetPlayerInvincibilityFrame(120);
		SetPlayerSpeed(5,2.5);
	// A spellcard object
		let spellObject = ObjSpell_Create();
		ObjSpell_Regist(spellObject);
		ObjSpell_SetEraseShot(spellObject,true);
	// Bomb
		PlaySound("bomb",70,0);
		let IceRockets = [];
		loop(30)
		{
			let ice=[0];
			ice[0]=CreateSpellIce(rand(0,360));
			IceRockets=IceRockets~ice;
			wait(2);
		}
		let alldeleted=false;
		while(!alldeleted)
		{
		alldeleted=true;
		let numberrockets=length(IceRockets);
		ascent(i in 0..numberrockets)
		{
			if(!Obj_IsDeleted(IceRockets[i]))
			{
			alldeleted=false;
			}
		}
		SetPlayerInvincibilityFrame(10);
		yield;
		}
	// Cleanup and reset
	SetForbidPlayerShot(false);
	SetForbidPlayerSpell(false);
	SetPlayerSpeed(5,2.5);
	isbombing=false;
	Obj_Delete(GetSpellManageObject);
}

function CreateSpellIce(angle)
{
	let obj=CreatePlayerShotA1(ObjRender_GetX(playerObj),ObjRender_GetY(playerObj),2,angle,1,9999,2);
	SpellIce(obj);
	return(obj);
	
	task SpellIce(obj)
	{
	ObjShot_SetSpellFactor(obj,true);
	ObjShot_SetEraseShot(obj,true);
	ObjMove_SetAcceleration(obj,-0.05);
	ObjMove_SetMaxSpeed(obj,0);
	while(ObjMove_GetSpeed(obj)>0){yield;}
	wait(20);
	Deletecheck(obj);
	let allenemy=GetIntersectionRegistedEnemyID();
	let randenemy=truncate(rand(0,length(allenemy)));
	let randenemyID=0;
	let noenemy=false;
	if(length(allenemy)==0){noenemy=true;}
	else{randenemyID=allenemy[randenemy];}
	let angle=rand(50,60);
	loop(60)
	{
	ObjMove_SetAngle(obj,ObjMove_GetAngle(obj)+angle);
	yield;
	}
	if(!noenemy)
	{
		ObjMove_SetAngle(obj,GetAngleTo(obj,randenemyID));
		wait(30);
		ObjMove_SetDestAtFrame(obj,ObjMove_GetX(randenemyID),ObjMove_GetY(randenemyID),GetObjectDistance(obj,randenemyID)/6);
		while(GetObjectDistance(obj,randenemyID)>=4)
		{ObjMove_SetDestAtFrame(obj,ObjMove_GetX(randenemyID),ObjMove_GetY(randenemyID),GetObjectDistance(obj,randenemyID)/6); yield;}
		let shotX=ObjMove_GetX(obj);
		let shotY=ObjMove_GetY(obj);
		let dis=5;
		Obj_Delete(obj);
		if(shotX==0&&shotY==0){return;}
		loop(5)
		{
			if(!IsPermitPlayerShot){return;}
			let n=1;
			ascent(i in 0..n)
			{
			let angle=rand(i*360/n,(i+1)*360/n);
			let ice=CreatePlayerShotA1(shotX+dis*cos(angle),shotY+dis*sin(angle),5,angle,1,9999,truncate(rand(4,8.99)));
			Fade(ice,30,255,1);
			}
		}
		task Fade(obj,n,alpha,scale)
		{
			let alpha1=alpha/n;
			let scale1=scale/n;
			loop(n)
			{
			ObjRender_SetAlpha(obj,alpha);
			ObjRender_SetScaleXYZ(obj,scale,scale,0);
			alpha-=alpha1;
			scale-=scale1;
			yield;
			}
		Obj_Delete(obj);
		}
	}
	else
	{
		ObjMove_SetAngle(obj,rand(0,360));
		ObjMove_SetMaxSpeed(obj,5);
		ObjMove_SetSpeed(obj,5);
	}
	}
	
	task Deletecheck(obj)
	{
	wait(300);
	Obj_Delete(obj);
	}
}

task createRingEffect
{
	let scale = 0;
	let alpha = 200;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj,spellTexture);
	ObjRender_SetBlendType(obj,BLEND_ADD_ARGB);
	ObjRender_SetAlpha(obj,alpha);
	Obj_SetRenderPriorityI(obj,41);
	ObjRender_SetScaleXYZ(obj,scale,scale,0);
	ObjSprite2D_SetSourceRect(obj,0,0,128,128);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetPosition(obj,GetPlayerX,GetPlayerY,0);
	
	ObjRender_SetColor(obj, truncate(rand(128,255)), truncate(rand(128,255)), truncate(rand(128,255)));
	
	while(alpha > 0)
	{
		ObjRender_SetAlpha(obj,alpha);
		ObjRender_SetScaleXYZ(obj,scale,scale,0);
		
		scale+=0.4;
		alpha-=2;
		
		yield;
	}
	
	Obj_Delete(obj);
}

function SpawnFamiliar(Startangle)
{
	let obj=ObjEnemy_Create(OBJ_ENEMY);
	ObjEnemy_Regist(obj);
	ObjPrim_SetTexture(obj,CSD~"Gun.png");
	Obj_SetRenderPriorityI(obj,31);
	ObjSprite2D_SetSourceRect(obj,0,1,60,54);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj,0.4,0.4,1);
	ObjRender_SetAlpha(obj,180);
	UFOMovement(obj,Startangle);
	return obj;
	
	task UFOMovement(obj,Startangle)
	{
	let dis=23;
	let angle=Startangle;
	let angle1=360/240;
	loop
	{
	ObjMove_SetPosition(obj,ObjRender_GetX(playerObj)+dis*cos(angle),ObjRender_GetY(playerObj)+dis/1.8*sin(angle));
	angle+=angle1;
	if(playerisdead){ObjRender_SetAlpha(obj,0);}
	else{ObjRender_SetAlpha(obj,180);}
	yield;
	}
	}
}

/*task PlayblasterSFX(obj1)
{
	PlaySound("blaster2",50,0);
let x=0;
let y=0;
let angle=ObjRender_GetAngleZ(obj1);
if(!IsPermitPlayerShot){return;}
while(!Obj_IsDeleted(obj1)){if(!IsPermitPlayerShot){return;}x=ObjMove_GetX(obj1);y=ObjMove_GetY(obj1);yield;}
let obj = ObjEnemy_Create(OBJ_ENEMY);
	ObjEnemy_Regist(obj);
	ObjMove_SetPosition(obj,x,y-15);
	ObjPrim_SetTexture(obj,playerSprite);
	ObjRender_SetBlendType(obj,BLEND_ALPHA);
	ObjRender_SetAlpha(obj,150);
	Obj_SetRenderPriorityI(obj,45);
	ObjRender_SetAngleZ(obj,angle);
	ObjSprite2D_SetSourceRect(obj,0,256,(512/6),320);
	ObjSprite2D_SetDestCenter(obj);
	wait(3);
	let i=0;
	loop(5)
	{
	i++;
	ObjSprite2D_SetSourceRect(obj,0+((512/6)*i),256,(512/6)+((512/6)*i),320);
	wait(3);
	}
	Obj_Delete(obj);
}*/

task Deathexplosion
{
	let scale = 0;
	let alpha = 200;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj,deathTexture);
	ObjRender_SetBlendType(obj,BLEND_ADD_RGB);
	ObjRender_SetAlpha(obj,alpha);
	Obj_SetRenderPriorityI(obj,79);
	ObjRender_SetScaleXYZ(obj,scale,scale,0);
	ObjSprite2D_SetSourceRect(obj,0,0,128,128);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetPosition(obj,GetPlayerX,GetPlayerY,0);
	
	ObjRender_SetColor(obj,0,0,255);
	
	while(alpha > 0)
	{
		ObjRender_SetAlpha(obj,alpha);
		ObjRender_SetScaleXYZ(obj,scale,scale,0);
		ObjRender_SetAlpha(playerObj,0);
		scale+=0.2;
		alpha-=4;
		
		yield;
	}
	
	Obj_Delete(obj);

}

/*task Bomb
{
	// Prepare
		SetForbidPlayerShot(true);
		SetForbidPlayerSpell(true);
		SetPlayerInvincibilityFrame(180);
		SetPlayerSpeed(1,1);
	// A spellcard object
		let spellObject = ObjSpell_Create();
		ObjSpell_Regist(spellObject);
		ObjSpell_SetEraseShot(spellObject,true);
	// Bomb
		let enemys=GetAllEnemyID;
		let enemysIDnr=-1;
		let enemysID=0;
		loop(length(enemys))
		{
		enemysIDnr+=1;
		enemysID=enemys[enemysIDnr];
		Hochfliegen(enemysID);
		}
		/*loop(20)
		{
		ObjSpell_SetIntersectionCircle(spellObject,GetCenterX,GetCenterY,1024);
		ObjSpell_SetDamage(spellObject,10);
		yield;
		}
		task Hochfliegen(obj)
		{
		let x=0;
		let y=0;
		let height=100;
		loop(height)
		{
		//height+=1;
		x=ObjRender_GetX(obj);
		y=ObjRender_GetY(obj);
		ObjRender_SetY(obj,y-1);
		yield;
		}
		let n=10;
		loop(n)
		{
		ObjRender_SetY(obj,ObjMove_GetY(obj)+(height/n));
		yield;
		}
		}
	// Cleanup and reset
	SetForbidPlayerShot(false);
	SetForbidPlayerSpell(false);
	SetPlayerSpeed(5,2.5);
	Obj_Delete(GetSpellManageObject);
}*/

// Render the Player
task renderPlayer
{
	ObjPrim_SetTexture(playerObj,playerSprite);
	Obj_SetRenderPriorityI(playerObj,31);
	ObjRender_SetBlendType(playerObj,BLEND_ALPHA);
	ObjRender_SetAngleXYZ(playerObj,0,0,0);
	ObjRender_SetScaleXYZ(playerObj,1,1,0);
	ObjRender_SetAlpha(playerObj,255);
	ObjSprite2D_SetSourceRect(playerObj,0,0,32,48);
	ObjSprite2D_SetDestCenter(playerObj);
	ObjRender_SetPosition(playerObj,GetPlayerX,GetPlayerY,0);
	
	while(!Obj_IsDeleted(playerObj))
	{
		ObjRender_SetPosition(playerObj,GetPlayerX,GetPlayerY,0);
		Obj_SetRenderPriorityI(playerObj,renderpriority);
		//Player is pressing left
		if(GetVirtualKeyState(VK_LEFT) == KEY_PUSH || GetVirtualKeyState(VK_LEFT) == KEY_HOLD)
		{
			ObjRender_SetAngleY(playerObj,0);
			ObjRender_SetAngleZ(playerObj,-20);
			ObjSprite2D_SetSourceRect(playerObj,35,7,60,38);
		}
		//Player is pressing right
		else if (GetVirtualKeyState(VK_RIGHT) == KEY_PUSH || GetVirtualKeyState(VK_RIGHT) == KEY_HOLD)
		{
			ObjRender_SetAngleY(playerObj,180);
			ObjRender_SetAngleZ(playerObj,-20);
			ObjSprite2D_SetSourceRect(playerObj,35,7,60,38);
		}
		// Idle animation or moving forward/backward
		else
		{
			ObjRender_SetAngleZ(playerObj,0);
			ObjSprite2D_SetSourceRect(playerObj,4,6,29,38);
		}
		yield;
	}
}

// Render the hitbox
task renderHitBox(x,y)
{
	let alpha = 0;
	let spin = 0;
	
	ObjPrim_SetTexture(hitboxObj,playerSprite);
	ObjRender_SetBlendType(hitboxObj,BLEND_ALPHA);
	Obj_SetRenderPriorityI(hitboxObj,renderpriority+15);
	ObjRender_SetAlpha(hitboxObj,0);
	ObjRender_SetScaleXYZ(hitboxObj,1,1,0);
	ObjSprite2D_SetSourceRect(hitboxObj,0,64,64,128);
	ObjSprite2D_SetDestCenter(hitboxObj);
	
	while(!Obj_IsDeleted(hitboxObj))
	{
		Obj_SetRenderPriorityI(hitboxObj,renderpriority+15);
		// update the hitbox position, angle and alpha
		ObjRender_SetPosition(hitboxObj,GetPlayerX,GetPlayerY,0);
		ObjRender_SetAngleZ(hitboxObj,spin);
		ObjRender_SetAlpha(hitboxObj,alpha);
		
		if(isFocus&& !playerisdead)
		{
			alpha=255;
		}
		else
		{
			alpha=0;
		}
		
		// increase spin to make it roteate
		spin+=2; 
		
		yield;
	}
}

function GetAngleTo(let object1, let object2) { return atan2(ObjRender_GetY(object2)-ObjRender_GetY(object1), ObjRender_GetX(object2)-ObjRender_GetX(object1));}

function wait(w)
{
	loop(w)
	{
	yield;
	}
}

let soundarr = [];
let se;
let s = ObjSound_Create;
let blasterSFX = GetCurrentScriptDirectory ~ "blaster.wav";
let slashvapSFX = GetCurrentScriptDirectory ~ "slashvap.wav";

task SE_Play(let path, let vl){
let seobj = ObjSound_Create;
ObjSound_Load(seobj,path);
ObjSound_Play(seobj);
ObjSound_SetVolumeRate(seobj,vl);
loop(120){yield;}
RemoveSound(path);
}

task PlaySound(str,v,w)//Name(as a string),volume,delay before playing
{
	if(str == "seShot"){ObjSound_Load(s,CSD ~ "seShot.wav");}
	if(str == "bomb"){ObjSound_Load(s,CSD ~ "bomb.wav");}
	if(str == "seDeath"){ObjSound_Load(s,CSD ~ "seDeath.wav");}
	if(str == "blaster2"){ObjSound_Load(s,CSD ~ "blaster2.wav");}
	if(str == "fire2vap"){ObjSound_Load(s,CSD ~ "fire2vap.wav");}
	if(str == "slashvap"){ObjSound_Load(s,CSD ~ "slashvap.wav");}

	loop(w){yield;}
	ObjSound_SetSoundDivision(s,SOUND_SE);
	ObjSound_SetVolumeRate(s,v);
	ObjSound_Play(s);
	soundarr = soundarr ~ [s];
	if(str=="item")
	{
		yield;
		Obj_Delete(s);
	}
}


task LoadSE{
	LoadSound(CSD ~ "seShot.wav");
	LoadSound(CSD ~ "bomb.wav");
	LoadSound(CSD ~ "seDeath.wav");
	LoadSound(CSD ~ "blaster2.wav");
	LoadSound(CSD ~ "fire2vap.wav");
	LoadSound(CSD ~ "slashvap.wav");
	}