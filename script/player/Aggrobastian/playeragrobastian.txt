#TouhouDanmakufu[Player]
#ScriptVersion[3]
#ID["MARISA_A"]
#Title["Agrobastian"]
#Text["Fuer das Grab von Varn"]
#ReplayName["Agrobastian"]

let CSD = GetCurrentScriptDirectory;
let playerID= GetPlayerObjectID;
let playerObj = ObjPrim_Create(OBJ_SPRITE_2D);
let hitboxObj = ObjPrim_Create(OBJ_SPRITE_2D);
let count = -1;
let isFocus = false;
let playerisdead = false;
let GetCenterX=GetStgFrameWidth/2;
let GetCenterY=GetStgFrameHeight/2;

// Shot Sheet
let shotMarisa = CSD ~ "playershot.txt";

// Texture Sheet
let playerSprite = CSD ~ "PlayerSprite.png";

// Spell Texture
let spellTexture = CSD ~ "ring.png";

// Death Texture
let deathTexture = CSD ~ "enm5b.png";

//default render priority
let renderpriority=31;

PlaytestInvincibility;

task PlaytestInvincibility{
	AddVirtualKey(VK_USER1,KEY_SPACE,KEY_INVALID);
	loop{
		if(GetVirtualKeyState(VK_USER1)==KEY_HOLD){
		SetPlayerInvincibilityFrame(30);}
	yield;}	
}

@Initialize
{
// Load Player Shot Data
LoadPlayerShotData(shotMarisa);

// Set player unfocussed and focusse speed
SetPlayerSpeed(5,2.5);

//Set Player hitbox parameters = (playerobject, location x, location y, radius, grazerradius);
ObjPlayer_AddIntersectionCircleA1(playerID,0,0,2,16);

// Set the boundrary box for the game field
// Standart = x:384, y:448
SetPlayerClip(0+6,0+24,384-6,448-16);

// Set how long the player is "gone" upon Pichuun.
SetPlayerDownStateFrame(60);

// Counterbomb time frame
SetPlayerRebirthFrame(30);

// Set Y coordinate where the player starts auto-collecting.
SetPlayerAutoItemCollectLine(120);

// Launch two tasks to handle the sprinte animation
renderPlayer;
renderHitBox(GetPlayerX,GetPlayerY);
}

@Event
{
alternative(GetEventType)

// Spell card
case(EV_REQUEST_SPELL)
{
	if(GetPlayerSpell > 0)
	{
		SetScriptResult(true);
		SetPlayerSpell(GetPlayerSpell-1);
		Bomb;
	}
	else
	{
	SetScriptResult(false);
	}
	
	
	//If the Player has no Bomb, use this
	/*if(GetPlayerSpell > 0)
	{
	SetScriptResult(true);
	}
	else
	{
	SetScriptResult(false);
	}*/
}

case(EV_HIT)
{
	PlaySound("seDeath",50,0);
}

// Player is pichuun (after the counterbomb timer)
case(EV_PLAYER_SHOOTDOWN)
{
	SetForbidPlayerShot(true);
	SetForbidPlayerSpell(true);
	playerisdead=true;
	Deathexplosion;
}

// Player is reviving
case(EV_PLAYER_REBIRTH)
{
	SetForbidPlayerShot(false);
	SetForbidPlayerSpell(false);
	SetPlayerInvincibilityFrame(120);
	SetPlayerSpell(2);
	ObjRender_SetAlpha(playerObj,255);
	playerisdead=false;
}

case(EV_USER_PLAYER)
{
	let casefile=GetEventArgument(0);
	if(casefile==0){SetPlayerClip(0-GetStgFrameWidth()*0.5,0-GetStgFrameHeight()*0.5,GetStgFrameWidth()*1.5,GetStgFrameHeight()*1.5);}
	if(casefile==1){SetPlayerClip(0+6,0+24,384-6,448-16);}
	if(casefile==2)
	{
	renderpriority=82;
	Obj_SetRenderPriorityI(playerObj,renderpriority);
	SetPlayerClip(0,0,640,480);
	Bombblock;//Blockiert auch SchÃ¼sse
	}
}
}

let startshot=false;
	let dirx=0;
	let diry=0;
	let dirangle=270;

@MainLoop
{
	if(GetVirtualKeyState(VK_SLOWMOVE) == KEY_PUSH || GetVirtualKeyState(VK_SLOWMOVE) == KEY_HOLD)
	{
		isFocus = true;
	}
	if(GetVirtualKeyState(VK_SLOWMOVE) == KEY_PULL)
	{
		isFocus = false;
	}
	
	//Shoot function
	
	if(GetVirtualKeyState(VK_SHOT) == KEY_PUSH || GetVirtualKeyState(VK_SHOT) == KEY_HOLD)
	{
	count++;
	if (count >=20&&startshot==true){count=5;}
	if (count >=60&&startshot==false){count=5;startshot=true;}
	}
	if(GetVirtualKeyState(VK_SHOT) == KEY_PULL)
	{
	startshot=false;
	count = -1;
	}
	let randdirx1=-16;
	let randdirx2=-8;
	let randdirx3=0;
	let randdirx4=+8;
	let randdirx5=+16;
	let randdir=rand(0,4.99);
	if(randdir<1){dirx=-16;diry=+10;}
	else if(randdir<2){dirx=-8;diry=+15;}
	else if(randdir<3){dirx=0;diry=+20;}
	else if(randdir<4){dirx=8;diry=+15;}
	else if(randdir<5){dirx=16;diry=+10;}
	let damage=25;
	let penetration=1;
	let id=8;
	let speed=20;
	
	
	// Focus shot
	if(isFocus)
	{
	//PlaySound("blaster",70,5);
		if(count ==5)
		{
			// Location x, location y, speed, angle, damage, penetration, id
			let obj=CreatePlayerShotA1(GetPlayerX-dirx, GetPlayerY -diry, speed, 270, damage, penetration, id);
			if(IsPermitPlayerShot){PlayblasterSFX(obj);}
		}
		if(count ==5+3)
		{
			// Location x, location y, speed, angle, damage, penetration, id
			let obj=CreatePlayerShotA1(GetPlayerX-dirx, GetPlayerY -diry, speed, 270, damage, penetration, id);
			if(IsPermitPlayerShot){PlayblasterSFX(obj);}
		}
		if(count ==5+6)
		{
			// Location x, location y, speed, angle, damage, penetration, id
			let obj=CreatePlayerShotA1(GetPlayerX-dirx, GetPlayerY -diry, speed, 270, damage, penetration, id);
			if(IsPermitPlayerShot){PlayblasterSFX(obj);}
		}
		if(count ==5+9)
		{
			// Location x, location y, speed, angle, damage, penetration, id
			let obj=CreatePlayerShotA1(GetPlayerX-dirx, GetPlayerY -diry, speed, 270, damage, penetration, id);
			if(IsPermitPlayerShot){PlayblasterSFX(obj);}
		}
		if(count ==5+12)
		{
			// Location x, location y, speed, angle, damage, penetration, id
			let obj=CreatePlayerShotA1(GetPlayerX-dirx, GetPlayerY -diry, speed, 270, damage, penetration, id);
			if(IsPermitPlayerShot){PlayblasterSFX(obj);}
		}
	}
	
	// Regular shot
	else 
	{
	let dis=10;
	let randd1=260;
	let randd2=280;
		if(count ==5)
		{
			// Location x, location y, speed, angle, damage, penetration, id
			let obj=CreatePlayerShotA1(GetPlayerX+dis*cos(rand(randd1,randd2)), GetPlayerY+dis*sin(rand(randd1,randd2)), speed, rand(randd1,randd2), damage, penetration, id);
			if(IsPermitPlayerShot){PlayblasterSFX(obj);}
		}
		if(count ==5+3)
		{
			// Location x, location y, speed, angle, damage, penetration, id
			let obj=CreatePlayerShotA1(GetPlayerX+dis*cos(rand(randd1,randd2)), GetPlayerY+dis*sin(rand(randd1,randd2)), speed, rand(randd1,randd2), damage, penetration, id);
			if(IsPermitPlayerShot){PlayblasterSFX(obj);}
		}
		if(count ==5+6)
		{
			// Location x, location y, speed, angle, damage, penetration, id
			let obj=CreatePlayerShotA1(GetPlayerX+dis*cos(rand(randd1,randd2)), GetPlayerY+dis*sin(rand(randd1,randd2)), speed, rand(randd1,randd2), damage, penetration, id);
			if(IsPermitPlayerShot){PlayblasterSFX(obj);}
		}
		if(count ==5+9)
		{
			// Location x, location y, speed, angle, damage, penetration, id
			let obj=CreatePlayerShotA1(GetPlayerX+dis*cos(rand(randd1,randd2)), GetPlayerY+dis*sin(rand(randd1,randd2)), speed, rand(randd1,randd2), damage, penetration, id);
			if(IsPermitPlayerShot){PlayblasterSFX(obj);}
		}
		if(count ==5+12)
		{
			// Location x, location y, speed, angle, damage, penetration, id
			let obj=CreatePlayerShotA1(GetPlayerX+dis*cos(rand(randd1,randd2)), GetPlayerY+dis*sin(rand(randd1,randd2)), speed, rand(randd1,randd2), damage, penetration, id);
			if(IsPermitPlayerShot){PlayblasterSFX(obj);}
		}
		
	}
	yield;
}

task Bombblock
{
	loop
	{
		SetForbidPlayerSpell(true);
		SetForbidPlayerShot(true);
		yield;
	}
}

task Bomb
{
	// Prepare
		SetForbidPlayerShot(true);
		SetForbidPlayerSpell(true);
		SetPlayerInvincibilityFrame(120);
		SetPlayerSpeed(1,1);
	// A spellcard object
		let spellObject = ObjSpell_Create();
		ObjSpell_Regist(spellObject);
		ObjSpell_SetEraseShot(spellObject,true);
	// Bomb
		PlaySound("bomb",70,0);
		loop(5)
		{
			createRingEffect;
			ObjSpell_SetIntersectionCircle(spellObject,GetPlayerX,GetPlayerY,512);
			ObjSpell_SetDamage(spellObject,10);
			wait(10);
		}
	// Cleanup and reset
	SetForbidPlayerShot(false);
	SetForbidPlayerSpell(false);
	SetPlayerSpeed(5,2.5);
	Obj_Delete(GetSpellManageObject);
}

task createRingEffect
{
	let scale = 0;
	let alpha = 200;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj,spellTexture);
	ObjRender_SetBlendType(obj,BLEND_ADD_ARGB);
	ObjRender_SetAlpha(obj,alpha);
	Obj_SetRenderPriorityI(obj,41);
	ObjRender_SetScaleXYZ(obj,scale,scale,0);
	ObjSprite2D_SetSourceRect(obj,0,0,128,128);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetPosition(obj,GetPlayerX,GetPlayerY,0);
	
	ObjRender_SetColor(obj, truncate(rand(128,255)), truncate(rand(128,255)), truncate(rand(128,255)));
	
	while(alpha > 0)
	{
		ObjRender_SetAlpha(obj,alpha);
		ObjRender_SetScaleXYZ(obj,scale,scale,0);
		
		scale+=0.4;
		alpha-=2;
		
		yield;
	}
	
	Obj_Delete(obj);
}

task PlayblasterSFX(obj1)
{
	PlaySound("blaster2",50,0);
let x=0;
let y=0;
let angle=ObjRender_GetAngleZ(obj1);
if(!IsPermitPlayerShot){return;}
while(!Obj_IsDeleted(obj1)){if(!IsPermitPlayerShot){return;}x=ObjMove_GetX(obj1);y=ObjMove_GetY(obj1);yield;}
let obj = ObjEnemy_Create(OBJ_ENEMY);
	ObjEnemy_Regist(obj);
	ObjMove_SetPosition(obj,x,y-15);
	ObjPrim_SetTexture(obj,playerSprite);
	ObjRender_SetBlendType(obj,BLEND_ALPHA);
	ObjRender_SetAlpha(obj,150);
	Obj_SetRenderPriorityI(obj,45);
	ObjRender_SetAngleZ(obj,angle);
	ObjSprite2D_SetSourceRect(obj,0,256,(512/6),320);
	ObjSprite2D_SetDestCenter(obj);
	wait(3);
	let i=0;
	loop(5)
	{
	i++;
	ObjSprite2D_SetSourceRect(obj,0+((512/6)*i),256,(512/6)+((512/6)*i),320);
	wait(3);
	}
	Obj_Delete(obj);
}

task Deathexplosion
{
	let scale = 0;
	let alpha = 200;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj,deathTexture);
	ObjRender_SetBlendType(obj,BLEND_ADD_RGB);
	ObjRender_SetAlpha(obj,alpha);
	Obj_SetRenderPriorityI(obj,79);
	ObjRender_SetScaleXYZ(obj,scale,scale,0);
	ObjSprite2D_SetSourceRect(obj,0,0,128,128);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetPosition(obj,GetPlayerX,GetPlayerY,0);
	
	ObjRender_SetColor(obj,255,0,0);
	
	while(alpha > 0)
	{
		ObjRender_SetAlpha(obj,alpha);
		ObjRender_SetScaleXYZ(obj,scale,scale,0);
		ObjRender_SetAlpha(playerObj,0);
		scale+=0.2;
		alpha-=4;
		
		yield;
	}
	
	Obj_Delete(obj);

}

/*task Bomb
{
	// Prepare
		SetForbidPlayerShot(true);
		SetForbidPlayerSpell(true);
		SetPlayerInvincibilityFrame(180);
		SetPlayerSpeed(1,1);
	// A spellcard object
		let spellObject = ObjSpell_Create();
		ObjSpell_Regist(spellObject);
		ObjSpell_SetEraseShot(spellObject,true);
	// Bomb
		let enemys=GetAllEnemyID;
		let enemysIDnr=-1;
		let enemysID=0;
		loop(length(enemys))
		{
		enemysIDnr+=1;
		enemysID=enemys[enemysIDnr];
		Hochfliegen(enemysID);
		}
		/*loop(20)
		{
		ObjSpell_SetIntersectionCircle(spellObject,GetCenterX,GetCenterY,1024);
		ObjSpell_SetDamage(spellObject,10);
		yield;
		}
		task Hochfliegen(obj)
		{
		let x=0;
		let y=0;
		let height=100;
		loop(height)
		{
		//height+=1;
		x=ObjRender_GetX(obj);
		y=ObjRender_GetY(obj);
		ObjRender_SetY(obj,y-1);
		yield;
		}
		let n=10;
		loop(n)
		{
		ObjRender_SetY(obj,ObjMove_GetY(obj)+(height/n));
		yield;
		}
		}
	// Cleanup and reset
	SetForbidPlayerShot(false);
	SetForbidPlayerSpell(false);
	SetPlayerSpeed(5,2.5);
	Obj_Delete(GetSpellManageObject);
}*/

// Render the Player
task renderPlayer
{
	ObjPrim_SetTexture(playerObj,playerSprite);
	Obj_SetRenderPriorityI(playerObj,31);
	ObjRender_SetBlendType(playerObj,BLEND_ALPHA);
	ObjRender_SetAngleXYZ(playerObj,0,0,0);
	ObjRender_SetScaleXYZ(playerObj,1,1,0);
	ObjRender_SetAlpha(playerObj,255);
	ObjSprite2D_SetSourceRect(playerObj,0,0,32,48);
	ObjSprite2D_SetDestCenter(playerObj);
	ObjRender_SetPosition(playerObj,GetPlayerX,GetPlayerY,0);
	
	while(!Obj_IsDeleted(playerObj))
	{
		ObjRender_SetPosition(playerObj,GetPlayerX,GetPlayerY,0);
		Obj_SetRenderPriorityI(playerObj,renderpriority);
		//Player is pressing left
		if(GetVirtualKeyState(VK_LEFT) == KEY_PUSH || GetVirtualKeyState(VK_LEFT) == KEY_HOLD)
		{
			ObjRender_SetAngleY(playerObj,0);
			ObjRender_SetAngleZ(playerObj,-20);
			ObjSprite2D_SetSourceRect(playerObj,35,7,60,38);
		}
		//Player is pressing right
		else if (GetVirtualKeyState(VK_RIGHT) == KEY_PUSH || GetVirtualKeyState(VK_RIGHT) == KEY_HOLD)
		{
			ObjRender_SetAngleY(playerObj,180);
			ObjRender_SetAngleZ(playerObj,-20);
			ObjSprite2D_SetSourceRect(playerObj,35,7,60,38);
		}
		// Idle animation or moving forward/backward
		else
		{
			ObjRender_SetAngleZ(playerObj,0);
			ObjSprite2D_SetSourceRect(playerObj,4,6,29,38);
		}
		yield;
	}
}

// Render the hitbox
task renderHitBox(x,y)
{
	let alpha = 0;
	let spin = 0;
	
	ObjPrim_SetTexture(hitboxObj,playerSprite);
	ObjRender_SetBlendType(hitboxObj,BLEND_ALPHA);
	Obj_SetRenderPriorityI(hitboxObj,renderpriority+15);
	ObjRender_SetAlpha(hitboxObj,0);
	ObjRender_SetScaleXYZ(hitboxObj,1,1,0);
	ObjSprite2D_SetSourceRect(hitboxObj,0,64,64,128);
	ObjSprite2D_SetDestCenter(hitboxObj);
	
	while(!Obj_IsDeleted(hitboxObj))
	{
		Obj_SetRenderPriorityI(hitboxObj,renderpriority+15);
		// update the hitbox position, angle and alpha
		ObjRender_SetPosition(hitboxObj,GetPlayerX,GetPlayerY,0);
		ObjRender_SetAngleZ(hitboxObj,spin);
		ObjRender_SetAlpha(hitboxObj,alpha);
		
		if(isFocus&& !playerisdead)
		{
			alpha=255;
		}
		else
		{
			alpha=0;
		}
		
		// increase spin to make it roteate
		spin+=2; 
		
		yield;
	}
}

function wait(w)
{
	loop(w)
	{
	yield;
	}
}

let soundarr = [];
let se;
let s = ObjSound_Create;
let blasterSFX = GetCurrentScriptDirectory ~ "blaster.wav";
let slashvapSFX = GetCurrentScriptDirectory ~ "slashvap.wav";

task SE_Play(let path, let vl){
let seobj = ObjSound_Create;
ObjSound_Load(seobj,path);
ObjSound_Play(seobj);
ObjSound_SetVolumeRate(seobj,vl);
loop(120){yield;}
RemoveSound(path);
}

task PlaySound(str,v,w)//Name(as a string),volume,delay before playing
{
	if(str == "seShot"){ObjSound_Load(s,CSD ~ "seShot.wav");}
	if(str == "bomb"){ObjSound_Load(s,CSD ~ "bomb.wav");}
	if(str == "seDeath"){ObjSound_Load(s,CSD ~ "seDeath.wav");}
	if(str == "blaster2"){ObjSound_Load(s,CSD ~ "blaster2.wav");}
	if(str == "fire2vap"){ObjSound_Load(s,CSD ~ "fire2vap.wav");}
	if(str == "slashvap"){ObjSound_Load(s,CSD ~ "slashvap.wav");}

	loop(w){yield;}
	ObjSound_SetSoundDivision(s,SOUND_SE);
	ObjSound_SetVolumeRate(s,v);
	ObjSound_Play(s);
	soundarr = soundarr ~ [s];
	if(str=="item")
	{
		yield;
		Obj_Delete(s);
	}
}


task LoadSE{
	LoadSound(CSD ~ "seShot.wav");
	LoadSound(CSD ~ "bomb.wav");
	LoadSound(CSD ~ "seDeath.wav");
	LoadSound(CSD ~ "blaster2.wav");
	LoadSound(CSD ~ "fire2vap.wav");
	LoadSound(CSD ~ "slashvap.wav");
	}