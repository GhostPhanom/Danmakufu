//================================================================
//Global setting value
//Texture
sampler sampler0_ : register(s0);

//--------------------------------
//Texture for mask
// Screen width (mask texture size)
const float SCREEN_WIDTH = 640;
const float SCREEN_HEIGHT = 480;
const float POS_X = 0;
const float POS_Y = 0;
texture textureMask_;
sampler samplerMask_ = sampler_state
{ 
	Texture = <textureMask_>;
};


//================================================================
//--------------------------------
//Pixel shader input value
struct PS_INPUT
{
	float4 diffuse : COLOR0;  //Diffuse color
	float2 texCoord : TEXCOORD0; //Texture coordinates
	float2 vPos : VPOS; //Drawing destination coordinates
};

//--------------------------------
//Pixel shader output value
struct PS_OUTPUT
{
    float4 color : COLOR0; //Output color
};


//================================================================
// Shader
//--------------------------------
//Pixel shader
PS_OUTPUT PsMask( PS_INPUT In ) : COLOR0
{
	PS_OUTPUT Out;

	//Texture color
	float4 colorTexture = tex2D(sampler0_, In.texCoord);

	//Vertex diffuses color
	float4 colorDiffuse = In.diffuse;

	//Synthesis
	float4 color = colorTexture * colorDiffuse;
	Out.color = color;
	if(color.a > 0)
	{
		//--------------------------------
		//Get color component from texture for mask
		// The position in UV is proportional to the width and height of the image file
		// For example, the position (320, 240) of the 640 x 480 image will be 0.5, 0.5 for UV.
		float2 maskUV;

		//Calculate the position of the mask texture from the drawing destination
		//maskUV.x = In.vPos.x / SCREEN_WIDTH;
		//maskUV.y = In.vPos.y / SCREEN_HEIGHT;
		//maskUV.x = POS_X / SCREEN_WIDTH;
		//maskUV.y = POS_Y / SCREEN_HEIGHT;
		//maskUV.x = POS_X+In.vPos.x / SCREEN_WIDTH;
		//maskUV.y = POS_Y+In.vPos.y / SCREEN_HEIGHT;
		maskUV.x = POS_X ;
		maskUV.y = POS_Y ;
		float4 colorMask = tex2D(samplerMask_, maskUV);

		//The RGB values of the mask are combined as the ƒ¿ value of the output result
		Out.color.a = ( colorMask.r + colorMask.g + colorMask.b ) * 0.3333f * color.a;
	}


	return Out;
}


//================================================================
//--------------------------------
//technique
technique TecMask
{
	pass P0
	{
		PixelShader = compile ps_3_0 PsMask();
	}
}

