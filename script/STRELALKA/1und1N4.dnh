#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["1und1 Nonspell4"]
#Text["1und1 Nonspell4" ]
#System["./System/Default_System.txt"]

#include"./Bulletsheet/Shotconstants.dnh" // ./../ bringt dich zum script Ordner
#include"./Generalfunction.dnh"
#include"./effectlibrary.dnh"
let objBoss;
let objBossSprite = 0;

let bossX=0;
let bossY=0;

let objScene = GetEnemyBossSceneObjectID();

@Initialize
{
	objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objBoss);
	//NotifyEvent(MyStageID, EV_USER, [0]);
	ObjMove_SetPosition(objBoss, GetCenterX, GetCenterY-150);
    //ObjMove_SetX(objBoss,3600);
	ObjEnemy_SetDamageRate(objBoss,500,100);
	SetPlayerLife(99);
	SetCommonData("BossSprite", 0); //0 = Utsuho  1 = Cirno
	TDrawLoop;
	TFinalize;
	MainTask;
}

@MainLoop
{
    bossX = ObjMove_GetX(objBoss);
    bossY = ObjMove_GetY(objBoss);
    DeleteShotInCircle(TYPE_SHOT,TYPE_IMMEDIATE,0,0,2);
    ObjEnemy_SetIntersectionCircleToShot(objBoss,ObjMove_GetX(objBoss),ObjMove_GetY(objBoss),50);
    ObjEnemy_SetIntersectionCircleToPlayer(objBoss,ObjMove_GetX(objBoss),ObjMove_GetY(objBoss),40);
    yield;
}

@Event
{
    alternative(GetEventType())
    case(EV_REQUEST_LIFE)
    {
        SetScriptResult(4000);
    }
    case(EV_REQUEST_TIMER)
    {
        SetScriptResult(999);
    }
    case(EV_REQUEST_SPELL_SCORE)
    {
        SetScriptResult(1000000);
    }
	
	case(EV_USER) 
	{
		let value=GetEventArgument(0);
		if (value[0]==0){objBoss=value[1];} //when objBoss is asked
	}
}

task MainTask
{
	//ObjMove_SetDestAtFrame(objBoss,GetCenterX,GetCenterY,120);
	yield;
	//TestLogo;
	//Firetask;
	Firetask;
	PerfectPosession(objBoss);
	yield;
}


task GegenUhrzeigerBullet
{
	let randdistanz = 20;
	let t = 60;
	let xlength = (GetStgFrameWidth - (randdistanz * 2));
	let xspeed = xlength / t;
	let ylength = (GetStgFrameHeight - (randdistanz * 2));
	let yspeed = ylength / t;
	let obj = CreateShotA1(0 + randdistanz, 0 + randdistanz, yspeed, 90, 56, 0);
	while(!Obj_IsDeleted(obj))
	{
		wait(t);
		ObjMove_SetSpeed(obj, xspeed);
		ObjMove_SetAngle(obj, ObjMove_GetAngle(obj) - 90);
		wait(t);
		ObjMove_SetSpeed(obj, yspeed);
		ObjMove_SetAngle(obj, ObjMove_GetAngle(obj) - 90);
	}
}

task Firetask
{
	while(!IsBossLifeZero)
	{
		wait(200);
		ObjMove_SetDestAtFrame(objBoss, rand(50, 350), rand(50, 400), 50);
		wait(200);
		ChangeCharakterTo("Cirno");
		wait(200);
		ObjMove_SetDestAtFrame(objBoss, rand(50, 350), rand(50, 400), 50);
		wait(200);
		ChangeCharakterTo("Utsuho");
	}
}




#include"./Laser/delaylaserfunctions.dnh"

task ChangeCharakterTo(char)
{
	if(char == "Utsuho")
	{
		SetCommonData("BossSprite", 0);
		PerfectPosession(objBoss);
		ObjPrim_SetTexture(objBossSprite, imgBossUtsuho);
		ObjSprite2D_SetSourceRect(objBossSprite, 0, 0, Utsuhoxpart * 1, Utsuhoypart);
		ObjSprite2D_SetDestCenter(objBossSprite);
		
	}
	if(char == "Cirno")
	{
		SetCommonData("BossSprite", 1);
		PerfectPosession(objBoss);
		ObjPrim_SetTexture(objBossSprite, imgBossCirno);
		ObjSprite2D_SetSourceRect(objBossSprite, 0, 0, Cirnoxpart * 1, Cirnoypart);
		ObjSprite2D_SetDestCenter(objBossSprite);
	}
}

let imgBossCirno = GetCurrentScriptDirectory ~"./Sprite/enm1m.png";
let imgBossUtsuho = GetCurrentScriptDirectory ~"./Sprite/stg6enm.png";
LoadTexture(imgBossUtsuho);
LoadTexture(imgBossCirno);
let Utsuhoxpart = 96;
let Utsuhoypart = 96;
let Cirnoxpart = 64;
let Cirnoypart = 80;

task TDrawLoop
{
	//let scale=0.4;

	let cyclespeed = 8;
	let cyclecounter = 0;
	let cyclephase = 0;
	
	let activemovementcount = 18;
	let moveanimationparts = 3;
	let moveanimationpartcount = activemovementcount / moveanimationparts; 
	let moveanimationcounter = 0;
	
	Render;
	
	task Render
	{
		objBossSprite = ObjEnemy_Create(OBJ_ENEMY);
		ObjEnemy_Regist(objBossSprite);
		ObjMove_SetPosition(objBossSprite,bossX,bossY);
		//ObjRender_SetScaleXYZ(objBossSprite, scale, scale, scale);
		
		//Für Default Spriteauswahl
		let activeboss = GetCommonData("BossSprite", 999);
		if(activeboss == 1)
		{
			ObjPrim_SetTexture(objBossSprite, imgBossCirno);
			ObjSprite2D_SetSourceRect(objBossSprite, 0, 0, Cirnoxpart * 1, Cirnoypart);
			ObjSprite2D_SetDestCenter(objBossSprite);
		}
		else
		{
			SetCommonData("BossSprite", 0);
			ObjPrim_SetTexture(objBossSprite, imgBossUtsuho);
			ObjSprite2D_SetSourceRect(objBossSprite, 0, 0, Utsuhoxpart * 1, Utsuhoypart);
			ObjSprite2D_SetDestCenter(objBossSprite);
		}
		
		SetCommonData("BossSpriteAnimation", 0); //0 = idle 1 = attacking 
		let bossanimationphase = 0;
		
		while(!Obj_IsDeleted(objBoss))
		{
			activeboss = GetCommonData("BossSprite", 0);
			bossanimationphase = GetCommonData("BossSpriteAnimation", 0);
			
			
			
			if(activeboss == 0)//0 = Utsuho
			{
				if(ObjMove_GetSpeed(objBoss) != 0 && moveanimationcounter < activemovementcount)
				{
					moveanimationcounter++;
				}
				else if(moveanimationcounter > 0)
				{
					moveanimationcounter--;
				}
				
				if(moveanimationcounter == 0)
				{	
					if(cyclephase <= 0)
					{
						ObjSprite2D_SetSourceRect(objBossSprite, Utsuhoxpart * cyclephase, 0, Utsuhoxpart * (cyclephase + 1), Utsuhoypart);
					}
					else if(cyclephase <= 1)
					{
						ObjSprite2D_SetSourceRect(objBossSprite, Utsuhoxpart * cyclephase, 0, Utsuhoxpart * (cyclephase + 1), Utsuhoypart);
					}
					else if(cyclephase <= 2)
					{
						ObjSprite2D_SetSourceRect(objBossSprite, Utsuhoxpart * cyclephase, 0, Utsuhoxpart * (cyclephase + 1), Utsuhoypart);
					}
					else if(cyclephase <= 5)
					{
						ObjSprite2D_SetSourceRect(objBossSprite, Utsuhoxpart * cyclephase, 0, Utsuhoxpart * (cyclephase + 1), Utsuhoypart);
					}
				}
				else
				{
					if(moveanimationcounter >= moveanimationpartcount * 2)
					{
						ObjSprite2D_SetSourceRect(objBossSprite, Utsuhoxpart * 2, Utsuhoypart, Utsuhoxpart * 3, Utsuhoypart * 2);
					}
					else if(moveanimationcounter >= moveanimationpartcount)
					{
						ObjSprite2D_SetSourceRect(objBossSprite, Utsuhoxpart * 1, Utsuhoypart, Utsuhoxpart * 2, Utsuhoypart * 2);
					}
					else if(moveanimationcounter >= 0)
					{
						ObjSprite2D_SetSourceRect(objBossSprite, 0, Utsuhoypart, Utsuhoxpart * 1, Utsuhoypart * 2);
					}
				}
			}
			else if(activeboss == 1)//1 = Cirno
			{
				ObjPrim_SetTexture(objBossSprite, imgBossCirno);
				if(ObjMove_GetSpeed(objBoss) != 0 && moveanimationcounter < activemovementcount)
				{
					moveanimationcounter++;
				}
				else if(moveanimationcounter > 0)
				{
					moveanimationcounter--;
				}
				
				if(moveanimationcounter == 0)
				{	
					if(cyclephase <= 0)
					{
						ObjSprite2D_SetSourceRect(objBossSprite, Cirnoxpart * cyclephase, 0, Cirnoxpart * (cyclephase + 1), Cirnoypart);
					}
					else if(cyclephase <= 1)
					{
						ObjSprite2D_SetSourceRect(objBossSprite, Cirnoxpart * cyclephase, 0, Cirnoxpart * (cyclephase + 1), Cirnoypart);
					}
					else if(cyclephase <= 2)
					{
						ObjSprite2D_SetSourceRect(objBossSprite, Cirnoxpart * cyclephase, 0, Cirnoxpart * (cyclephase + 1), Cirnoypart);
					}
					else if(cyclephase <= 5)
					{
						ObjSprite2D_SetSourceRect(objBossSprite, Cirnoxpart * cyclephase, 0, Cirnoxpart * (cyclephase + 1), Cirnoypart);
					}
				}
				else
				{
					if(moveanimationcounter >= moveanimationpartcount * 2)
					{
						ObjSprite2D_SetSourceRect(objBossSprite, Cirnoxpart * 2, Cirnoypart, Cirnoxpart * 3, Cirnoypart * 2);
					}
					else if(moveanimationcounter >= moveanimationpartcount)
					{
						ObjSprite2D_SetSourceRect(objBossSprite, Cirnoxpart * 1, Cirnoypart, Cirnoxpart * 2, Cirnoypart * 2);
					}
					else if(moveanimationcounter >= 0)
					{
						ObjSprite2D_SetSourceRect(objBossSprite, 0, Cirnoypart, Cirnoxpart * 1, Cirnoypart * 2);
					}
				}
			}
			
			cyclecounter++;
			if(cyclecounter >= cyclespeed)
			{
				cyclecounter = 0;
				cyclephase += 1;
			}
			if(cyclephase >= 4)
			{
				cyclephase = 0;
			}
			ObjMove_SetPosition(objBossSprite,bossX,bossY);
			yield;
		}
		Obj_Delete(objBossSprite);
	}
	yield;
}

task TFinalize 
{
    while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0){yield;}
    DeleteShotAll(TYPE_ALL, TYPE_IMMEDIATE);
    SetAutoDeleteObject(true);
    Obj_Delete(objBoss);
    CloseScript(GetOwnScriptID());
    
    if(ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SHOOTDOWN_COUNT) +ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SPELL_COUNT) == 0)
    {
        AddScore(ObjEnemyBossScene_GetInfo(objScene, INFO_SPELL_SCORE));
    }
    return;
}