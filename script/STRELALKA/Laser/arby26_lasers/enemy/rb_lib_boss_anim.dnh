let imgTileX = 128;
let imgTileY = 256;

task TBossSetFrame(obj, row, af)
{
	af = floor(af);
	if(af >= 0 && af < 8) {
		ObjSprite2D_SetSourceRect(obj, af*imgTileX+1, row*imgTileY+1, (af+1)*imgTileX, (row+1)*imgTileY);
	}
}
function BossAnimObj {
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetVisible(obj, false);
	return obj;
}
function DrawBossInit(obj, img, xoff,yoff, Rscale)
{
	ObjPrim_SetTexture(obj, img); //Setting the above image file as a texture to the enemy object(objREnemy)
	ObjSprite2D_SetSourceRect(obj, 1, 1, imgTileX, imgTileY);
	TBossSetFrame(obj, 0, 0);
	let tilex_half = imgTileX/2;
	let tiley_half = imgTileY/2;
	ObjSprite2D_SetDestRect(obj, -tilex_half+xoff, -tiley_half+yoff, tilex_half+xoff, tiley_half+yoff); //Positioning the center of the rectangle(w/texture) at (0, 0) on the stage(top left corner).
	ObjRender_SetScaleXYZ(obj, Rscale, Rscale, 1);
}

// anim that loops until a new one is played
function BossAnimIdle1(obj, aObj, row, rate)
{
	// aObj should be the handle of the animation that was playing last
	if(!Obj_IsDeleted(aObj)) { // kill whatever animation was playing last
		Obj_Delete(aObj);
	}
	aObj = BossAnimObj; // make a new handle for the current animation
	TAnimateLoop(obj, aObj, row, rate);
	return aObj; // give the animation's handle to the script that called this

	task TAnimateLoop(obj, aObj, row, rate)
	{
		let frame = 0;
		while(!Obj_IsDeleted(aObj)) { // the anim object can be deleted at any time, usually the end of a script or when a new anim starts.
			TBossSetFrame(obj, row, frame);
			frame = (frame+rate)%8;
			yield;
		}
	}
}
// anim that overrides whatever is currently playing
// events in order:
//   1) first plays a wind-up (first four frames of a row)
//   2) then a loop for a set amount of time (last four frames of a row)
//   3) then plays the wind-up in reverse
//   4) then plays the exit idle anim (exit_row at exit_rate)
function BossAnim1(obj, aObj, row, hold_time, rate, exit_row, exit_rate)
{
	// aObj should be the handle of the animation that was playing last
	if(!Obj_IsDeleted(aObj)) { // kill whatever animation was playing last
		Obj_Delete(aObj);
	}
	aObj = BossAnimObj; // make a new handle for the current animation

	TAnimateHold4(obj, aObj, row, hold_time, rate, exit_row, exit_rate);

	return aObj; // give the animation's handle to the script that called this

	task TAnimateHold4(obj, aObj, row, hold_time, rate, exit_row, exit_rate)
	{
		let frame = 0;
		let rate2 = rate/2;
		while(!Obj_IsDeleted(aObj) && frame < 4) { // the anim object can be deleted at any time, usually the end of a script or when a new anim starts.
			TBossSetFrame(obj, row, frame);
			frame += rate;
			yield;
		}
		while(!Obj_IsDeleted(aObj) && hold_time > 0) { // the anim object can be deleted at any time, usually the end of a script or when a new anim starts.
			TBossSetFrame(obj, row, frame);
			frame += rate2;
			if(frame >= 8) { frame = 4; }
			hold_time--;
			yield;
		}
		frame = 4;
		while(!Obj_IsDeleted(aObj) && frame > 0) { // the anim object can be deleted at any time, usually the end of a script or when a new anim starts.
			TBossSetFrame(obj, row, frame);
			frame += -rate;
			yield;
		}
		frame = 0;
		while(!Obj_IsDeleted(aObj)) { // the anim object can be deleted at any time, usually the end of a script or when a new anim starts.
			TBossSetFrame(obj, exit_row, frame);
			frame = (frame+exit_rate)%8;
			yield;
		}
	}
}

//same as above but the hold time doesn't animate, it freezes at frame 4.
function BossAnim2(obj, aObj, row, hold_time, rate, exit_row, exit_rate)
{
	// aObj should be the handle of the animation that was playing last
	if(!Obj_IsDeleted(aObj)) { // kill whatever animation was playing last
		Obj_Delete(aObj);
	}
	aObj = BossAnimObj; // make a new handle for the current animation

	TAnimateHold(obj, aObj, row, hold_time, rate, exit_row, exit_rate);

	return aObj; // give the animation's handle to the script that called this

	task TAnimateHold(obj, aObj, row, hold_time, rate, exit_row, exit_rate)
	{
		let frame = 0;
		let rate2 = rate/2;
		while(!Obj_IsDeleted(aObj) && frame < 4) { // the anim object can be deleted at any time, usually the end of a script or when a new anim starts.
			TBossSetFrame(obj, row, frame);
			frame += rate;
			yield;
		}
		TBossSetFrame(obj, row, 4);
		while(!Obj_IsDeleted(aObj) && hold_time > 0) { // the anim object can be deleted at any time, usually the end of a script or when a new anim starts.
			hold_time--;
			yield;
		}
		frame = 4;
		while(!Obj_IsDeleted(aObj) && frame > 0) { // the anim object can be deleted at any time, usually the end of a script or when a new anim starts.
			TBossSetFrame(obj, row, frame);
			frame += -rate;
			yield;
		}
		frame = 0;
		while(!Obj_IsDeleted(aObj)) { // the anim object can be deleted at any time, usually the end of a script or when a new anim starts.
			TBossSetFrame(obj, exit_row, frame);
			frame = (frame+exit_rate)%8;
			yield;
		}
	}
}

task TBossFlyOff(x, y, img, Rscale)
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img);
	Obj_SetRenderPriority(obj, 0.31);
	ObjSprite2D_SetSourceRect(obj, 0*imgTileX+1, 2*imgTileY+1, 1*imgTileX, 3*imgTileY); // middle
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, Rscale, Rscale, 1);
	ObjRender_SetPosition(obj, x, y, 0);
	ObjRender_SetAlpha(obj, 48);

	let yaccel = -0.67;
	let yspeed = 1.0;
	while(y > -GetStgFrameHeight)
	{
		ObjRender_SetPosition(obj, x, y, 0);
		y += yspeed;
		yspeed += yaccel;
		yield;
	}
	Obj_Delete(obj);
}
