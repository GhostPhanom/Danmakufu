task Kasten
{
	let x = bossX;
	let y = bossY;
	
	let dis = 160;
	
	let angle = 0;
	let spinspeed = 1;
	
	let mitte = ObjEnemy_Create(OBJ_ENEMY);
	ObjEnemy_Regist(mitte);
	ObjMove_SetPosition(mitte, x, y);
	ObjMove_SetAngle(mitte, angle);
	
	ascent(i in 0..4)
	{
		Ecke(45 + (i * 90), i * 90 + 180);
	}
	
	while(true)
	{
		ascent(i in 0..30)
		{
			CreateShotA1(bossX, bossY, rand(0.5, 2), 360 / 30 * i, 52, 0);
		}
		
		loop(90)
		{
			angle += spinspeed;
			ObjMove_SetAngle(mitte, angle);
			yield;
		}
	}
	
	task Ecke(posangle, angle)
	{
		let posx = ObjMove_GetX(mitte) + dis * cos(ObjMove_GetAngle(mitte) + posangle);
		let posy = ObjMove_GetY(mitte) + dis * sin(ObjMove_GetAngle(mitte) + posangle);
		let scanangle = ObjMove_GetAngle(mitte) + angle;
		let objl = CreateStraightLaserA1(posx, posy, scanangle, 500, 20, 9999, 8, 0);
		let obj = CreateShotA1(posx, posy, 0, scanangle, 31, 0);
		Obj_SetValue(obj, "MOVED", 1);
		ObjShot_SetAutoDelete(obj, false);
		Obj_SetValue(objl, "MOVED", 1);
		ObjShot_SetIntersectionEnable(objl, false);
		
		
		while(!Obj_IsDeleted(mitte))
		{
			posx = ObjMove_GetX(mitte) + dis * cos(ObjMove_GetAngle(mitte) + posangle);
			posy = ObjMove_GetY(mitte) + dis * sin(ObjMove_GetAngle(mitte) + posangle);
			ObjMove_SetPosition(obj, posx, posy);
			ObjMove_SetPosition(objl, posx, posy);
			ObjStLaser_SetAngle(objl, scanangle);
			scanangle = ObjMove_GetAngle(mitte) + angle;
			ObjMove_SetAngle(obj, scanangle);
		
			let array = GetShotIdInCircleA2(0, 0, 1000, TARGET_ENEMY);
			let posx2 = ObjMove_GetX(mitte) + dis * cos(ObjMove_GetAngle(mitte) + posangle + 90);
			let posy2 = ObjMove_GetY(mitte) + dis * sin(ObjMove_GetAngle(mitte) + posangle + 90);
			ascent(i in 0..length(array))
			{
				if(Obj_GetValueD(array[i], "MOVED", 0) == 0)
				{
					//E-Dragon
					/*
					let a = posx;
					let b = posy;
					let c = posx2;
					let d = posy2;
					x = ObjMove_GetX(array[i]);
					y = ObjMove_GetY(array[i]);
					//if((b - d) * x + (c - a) * y + d * a - b * c <= 0)
					if((posy - posy2) * ObjMove_GetX(array[i]) + (posx2 - posx) * ObjMove_GetY(array[i]) + posy2 * posx - posy * posx2 <= 0)
					{
						ObjMove_SetPosition(array[i], 300, 300);
						ObjMove_SetAngle(array[i], 90);
						Obj_SetValue(array[i], "MOVED", 1);
					}
					*/
					
					if((posy - posy2) * ObjMove_GetX(array[i]) + (posx2 - posx) * ObjMove_GetY(array[i]) + posy2 * posx - posy * posx2 <= 0){
						ObjMove_SetPosition(array[i], 300, 300);
						ObjMove_SetAngle(array[i], 90);
						Obj_SetValue(array[i], "MOVED", 1);
					}
					
					
					//GhostPhanom Weg
					/*
					let angdis = AngularDistance(scanangle, GetAngleTo(obj, array[i]));
					if(angdis <= 0 && angdis >= -90)
					{
						ObjMove_SetPosition(array[i], 300, 300);
						ObjMove_SetAngle(array[i], 90);
						Obj_SetValue(array[i], "MOVED", 1);
					}
					*/
				}
			}
			
			yield;
		}
	}
}	
	