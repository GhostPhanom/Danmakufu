#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["1und1 Nonspell4"]
#Text["1und1 Nonspell4" ]
#System["./System/Default_System.txt"]

#include"./Bulletsheet/Shotconstants.dnh" // ./../ bringt dich zum script Ordner
#include"./Generalfunction.dnh"

let objBoss;
let objBossSprite = 0;

let bossX=0;
let bossY=0;

let objScene = GetEnemyBossSceneObjectID();

@Initialize
{
	objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objBoss);
	//NotifyEvent(MyStageID, EV_USER, [0]);
	ObjMove_SetPosition(objBoss, GetCenterX, GetCenterY-150);
    //ObjMove_SetX(objBoss,3600);
	ObjEnemy_SetDamageRate(objBoss,500,100);
	SetPlayerLife(99);
	TDrawLoop;
	TFinalize;
	MainTask;
}

@MainLoop
{
    bossX = ObjMove_GetX(objBoss);
    bossY = ObjMove_GetY(objBoss);
    DeleteShotInCircle(TYPE_SHOT,TYPE_IMMEDIATE,0,0,2);
    ObjEnemy_SetIntersectionCircleToShot(objBoss,ObjMove_GetX(objBoss),ObjMove_GetY(objBoss),50);
    ObjEnemy_SetIntersectionCircleToPlayer(objBoss,ObjMove_GetX(objBoss),ObjMove_GetY(objBoss),40);
    yield;
}

@Event
{
    alternative(GetEventType())
    case(EV_REQUEST_LIFE)
    {
        SetScriptResult(4000);
    }
    case(EV_REQUEST_TIMER)
    {
        SetScriptResult(999);
    }
    case(EV_REQUEST_SPELL_SCORE)
    {
        SetScriptResult(1000000);
    }
	
	case(EV_USER) 
	{
		let value=GetEventArgument(0);
		if (value[0]==0){objBoss=value[1];} //when objBoss is asked
	}
}

task MainTask
{
	//ObjMove_SetDestAtFrame(objBoss,GetCenterX,GetCenterY,120);
	yield;
	//TestLogo;
	movement;
	Werfen;
	//Firetask;
	//Firetask;
	yield;
}

 task movement{
        while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) >=4000){
        ObjMove_SetDestAtFrame(objBoss,GetCenterX,GetCenterY-150, 40);
        
        wait(120);
        
        
        }                     
        }
        
    task Ranke(Bullet)
    {
    let obj = CreateShotA1(ObjMove_GetX(Bullet),ObjMove_GetY(Bullet),0,GetAngleToPlayer(Bullet),49,1);    
    Obj_SetValue(obj, "Number", 0);
	
    loop(3)
    {    
    Wachsen(obj,ObjMove_GetX(obj),ObjMove_GetY(Bullet));
    wait(2);
    } 
	Obj_Delete(obj);
    }    
    
    task Wachsen(obj,x,y)
    {
    let Ding = CreateShotA1(ObjMove_GetX(obj),ObjMove_GetY(obj),6,ObjMove_GetAngle(obj)+rand(-10,10),49,1);
	Obj_SetValue(Ding, "Number", Obj_GetValue(obj, "Number") + 1);
    wait(3);
    ObjMove_SetSpeed(Ding,0);
	if(Obj_GetValueD(Ding, "Number", 9999999) >= 30){return;}
    Wachsen(Ding,ObjMove_GetX(obj),ObjMove_GetY(obj));
    }    
        
    
    
    task Werfen
    {
    loop
    {
    let obj = CreateShotA1(ObjMove_GetX(objBoss),ObjMove_GetY(objBoss),4,rand(0,360),29,1);
    
    while(!Obj_IsDeleted(obj))
    {            
    if(Gucken(obj)==true)
    {
    let Start = CreateShotA1(ObjMove_GetX(obj),ObjMove_GetY(obj),0,GetAngleToPlayer(obj),29,1);
    Ranke(Start);
    Obj_Delete(obj);    
    }
    
    yield;
    }
    wait(50);
    }
    }
    

    
    
    function Gucken(Bullet)
    {                
    if(CheckenX(Bullet)>=GetStgFrameWidth || CheckenY(Bullet) >= GetStgFrameHeight || CheckenX(Bullet)<=0 || CheckenY(Bullet) <=0)
    {
    return true;        
    }
    return false;    
    }
    
    
    
    
    
    function CheckenX(Bullet)
    {
    
    return ObjMove_GetX(Bullet);
    
    
    }
    function CheckenY(Bullet)
    {
    
    return ObjMove_GetY(Bullet);
    
    
    } 

task Firetask
{
	while(!IsBossLifeZero)
	{
		CreateMasterSpark;
		wait(300);
	}
}



#include "./StarWarsText/StarWarsText.dnh"

task TestLogo
{
	CreateStarWarsLogo;
}

#include"./Laser/delaylaserfunctions.dnh"

task CreateMasterSpark
{
	let shotangle = GetAngleToPlayer(objBoss);
	let laserlength = 600;
	
	let chargetime = 90;
	let firetime = 240;
	let cooldowntime = 20;
	
	let ringdis = 70;
	let ringscale2 = 0.5;
	let ringscale = 0.45;
	
	/*let delay = CreateDelayLaserA1(bossX, bossY, shotangle, laserlength, 20, chargetime + 10, 4010);
	ObjRender_SetAlpha(delay, 180);
	ObjRender_SetBlendType(delay, BLEND_ALPHA);*/
	
	CreateSpark;
	
	ascent (i in 0..2)
	{
		CreateLaserRing(ringdis + (ringdis * i), ringscale2 + ringscale * i);
	}
	
	
	
	task CreateSpark
	{
		let path = CSD ~ "./Laser/biglaser.png";
		LoadTexture(path);
		let picturepartcount = 25;
		let picturepartwidth = GetTextureWidth(path) / picturepartcount;
		
		let chargescale = 0.025;
		let firescale = 0.8;
		
		let laserlengthscale = laserlength / picturepartwidth;
		
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(obj, path);
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
		ObjSprite2D_SetSourceRect(obj, 1, 0, picturepartwidth, GetTextureHeight(path));
		ObjSprite2D_SetDestCenter(obj);
		//ObjRender_SetPosition(obj, bossX + (laserlength / 2) * cos(shotangle), bossY + (laserlength / 2) * sin(shotangle), 0);
		ObjRender_SetPosition(obj, bossX + (150 + (150 * (laserlengthscale -1)))  * cos(shotangle), bossY + (150 + (150 * (laserlengthscale -1))) * sin(shotangle), 0);
		ObjRender_SetAngleZ(obj, shotangle);
		ObjRender_SetScaleXYZ(obj, laserlengthscale, chargescale, 0);
		Obj_SetRenderPriorityI(obj, 40);
		ObjRender_SetAlpha(obj, 200);
		RenderLaser(obj);
		CreateShots;
		
		wait(chargetime);
		let n = 15;
		let scale2 = chargescale;
		loop(n)
		{
			scale2 += firescale / n;
			ObjRender_SetScaleY(obj, scale2);
			yield;
		}
		
		wait(firetime - n);
		let scale1 = scale2 / cooldowntime;
		loop(cooldowntime)
		{
			scale2 -= scale1;
			ObjRender_SetScaleY(obj, scale2);
			yield;
		}
		Obj_Delete(obj);
		
		task RenderLaser(obj)
		{
			let count = round(rand(1, 25));
			while(!Obj_IsDeleted(obj))
			{
				ObjSprite2D_SetSourceRect(obj, picturepartwidth * (count -1) +1, 0, picturepartwidth * count, GetTextureHeight(path));
				count += 1;
				wait(2);
			}
		}
	}
	
	task CreateShots
	{
		let timecorrect = 20;
		let shotsperframe = 1;
		let waittime = 2;
		
		wait(chargetime);
		CreateStraightLaserA1(bossX, bossY, shotangle, laserlength, 200, firetime, 0, 0);
		loop((firetime - timecorrect -10) / waittime)
		{
			loop (shotsperframe)
			{
				CreateTracerShot;
			}
			wait(2);
		}
		
		task CreateTracerShot
		{
			let obj = CreateShotA1(bossX, bossY, 25, shotangle + rand(-8, 8), 0, 0);
			ObjShot_SetIntersectionEnable(obj, false);
			while(IsInStageFrame(obj, 10, 10))
			{
				yield;
			}
			let obj2 = CreateShotA1(ObjMove_GetX(obj), ObjMove_GetY(obj), rand(1.5, 2.5), shotangle + 180 + rand(-40, 40), 1111, 10);
			ScreenShakeA1(3, 3);
			Obj_SetRenderPriorityI(obj2, 39);
			Obj_Delete(obj);
		}
	}
	
	task CreateLaserRing(ringdistance, ringsca)
	{
		let path = CSD ~ "./Laser/laserring2.png";
		LoadTexture(path);
		let picturepartcount = 29;
		let picturepartwidth = GetTextureWidth(path) / picturepartcount;
		let distime = 10;
		let dis2 = 0;
		let dis = ringdistance / distime;
		
		let alpha2 = 0;
		let alpha1 = 255 / 20;
		
		let obj = ObjEnemy_Create(OBJ_ENEMY);
		ObjEnemy_Regist(obj);
		ObjPrim_SetTexture(obj, path);
		ObjSprite2D_SetSourceRect(obj, 0, 0, picturepartwidth, GetTextureHeight(path));
		ObjSprite2D_SetDestCenter(obj);
		ObjRender_SetScaleXYZ(obj, ringsca, ringsca, 0);
		ObjRender_SetAngleZ(obj, shotangle);
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
		Obj_SetRenderPriorityI(obj, 40);
		//Obj_SetRenderPriorityI(obj, 70);
		
		RenderRing(obj);
		
		//wait(10);
		ObjMove_SetPosition(obj, bossX, bossY);
		ObjMove_SetDestAtWeight(obj, bossX + ringdistance * cos(shotangle), bossY + ringdistance * sin(shotangle), 20, 5);
		
		wait(chargetime);
		let n = 30; 
		alpha2 = 255; 
		alpha1 = 255 / n;
		let scale2 = ringsca;
		loop(n)
		{
			ringsca += 0.1;
			alpha2 -= alpha1;
			ObjRender_SetScaleXYZ(obj, ringsca, ringsca, 0);
			ObjRender_SetAlpha(obj, alpha2);
			yield;
		}
		Obj_Delete(obj);
		
		/*
		loop(distime)
		{
			dis2 += dis;
			ObjRender_SetPosition(obj, bossX + dis2 * cos(shotangle), bossY + dis2 * sin(shotangle), 0);
			yield;
		}
		*/
		task RenderRing(obj)
		{
			let count = round(rand(1, 29));
			while(!Obj_IsDeleted(obj))
			{
				ObjSprite2D_SetSourceRect(obj, picturepartwidth * (count -1), 0, picturepartwidth * count, GetTextureHeight(path));
				count += 1;
				wait(1);
			}
		}
	}
}

task TDrawLoop
{
	let scale=0.4;
    let imgBoss = GetCurrentScriptDirectory ~"./Sprite/Marcelldavis.png";
	Render(scale, imgBoss);

	task Render(scale,imgBoss)
	{
		let circle=0;
		let disy=4;
		objBossSprite=ObjEnemy_Create(OBJ_ENEMY);
		ObjEnemy_Regist(objBossSprite);
		ObjMove_SetPosition(objBossSprite,bossX,bossY);
		ObjPrim_SetTexture(objBossSprite,imgBoss);
		ObjSprite2D_SetSourceRect(objBossSprite,0,1,431,428);
		ObjSprite2D_SetDestCenter(objBossSprite);
		ObjRender_SetScaleXYZ(objBossSprite, scale, scale, scale);
		while(!Obj_IsDeleted(objBoss))
		{
			ObjMove_SetPosition(objBossSprite,bossX,bossY+disy*cos(circle));
			circle+=1.5;
			yield;
		}
		Obj_Delete(objBossSprite);
	}
	yield;
}

task TFinalize 
{
    while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0){yield;}
    DeleteShotAll(TYPE_ALL, TYPE_IMMEDIATE);
    SetAutoDeleteObject(true);
    Obj_Delete(objBoss);
    CloseScript(GetOwnScriptID());
    
    if(ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SHOOTDOWN_COUNT) +ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SPELL_COUNT) == 0)
    {
        AddScore(ObjEnemyBossScene_GetInfo(objScene, INFO_SPELL_SCORE));
    }
    return;
}